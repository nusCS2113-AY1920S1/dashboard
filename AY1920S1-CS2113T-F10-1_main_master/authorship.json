[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    archiveBaseName \u003d \"[CS2113T-F10-1][ModPlan]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.antlr\u0027, name: \u0027antlr-runtime\u0027, version: \u00273.5.2\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.mnode.ical4j\u0027, name: \u0027ical4j\u0027, version: \u00271.0.2\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-nop\u0027, version: \u00271.7.10\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    // https://mvnrepository.com/artifact/com.google.code.gson/gson"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // https://mvnrepository.com/artifact/net.sourceforge.argparse4j/argparse4j"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    compile group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.8.1\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        events \"failed\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        csv.enabled \u003d true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    jacocoReportPath \u003d \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    mainClassName \u003d \"planner.main.CliLauncher\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 5,
      "andrewleow97": 13,
      "namiwa": 43,
      "-": 40
    }
  },
  {
    "path": "docs/stylesheets/asciidoc.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/* Taken from https://github.com/nusCS2113-AY1920S1/addressbook-level3/blob/master/docs/stylesheets/asciidoctor.css*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "namiwa"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "namiwa"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "namiwa"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "namiwa"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "namiwa"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "namiwa"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "namiwa"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "namiwa"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "namiwa"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "namiwa"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "namiwa"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "namiwa"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "namiwa"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "namiwa"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "namiwa"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "namiwa"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "namiwa"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "namiwa"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "namiwa"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "namiwa"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "namiwa"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "namiwa"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "namiwa"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "namiwa"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "namiwa"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 408
    }
  },
  {
    "path": "src/main/java/planner/credential/cryptography/Cipher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.BadPaddingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.IllegalBlockSizeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.NoSuchPaddingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.InvalidKeyException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Cipher {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private javax.crypto.Cipher cipher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Hasher hasher \u003d new Hasher();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void encode(CipherState state, EncryptionLayer layer, boolean withHash)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws NoSuchPaddingException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.cipher \u003d javax.crypto.Cipher.getInstance(layer.getEncryptionAlgorithm());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, layer.getPublicKey());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] toEncrypt \u003d state.next(layer.isEncryptKey());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (withHash \u0026\u0026 layer.getHashAlgorithm() !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ByteArrayOutputStream stream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                stream.write(toEncrypt);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                stream.write(Cipher.hasher.getHash(toEncrypt, layer.getHashAlgorithm()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            toEncrypt \u003d stream.toByteArray();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        state.updateState(cipher.doFinal(toEncrypt), layer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Encode data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param state current cipher state"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param layers encryption layers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param withHash with or without hash of innermost layer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return final cipher state"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchPaddingException if encryption padding is invalid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchAlgorithmException if algorithm provided in encryption layer is not supported"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws BadPaddingException if encryption padding is valid but not usable in current encryption state"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws IllegalBlockSizeException if block size of data is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws InvalidKeyException if key used is invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherState encode(CipherState state, List\u003cEncryptionLayer\u003e layers, boolean withHash)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws NoSuchPaddingException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (layers.size() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.encode(state, layers.get(0), withHash);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (int i \u003d 1; i \u003c layers.size(); ++i) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.encode(state, layers.get(i),false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void decode(CipherState state, EncryptionLayer layer)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws NoSuchPaddingException,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                   NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                   BadPaddingException,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                   IllegalBlockSizeException,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                   InvalidKeyException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.cipher \u003d javax.crypto.Cipher.getInstance(layer.getEncryptionAlgorithm());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipher.init(javax.crypto.Cipher.DECRYPT_MODE, layer.getPrivateKey());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] toDecrypt \u003d state.next(layer.isEncryptKey());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        state.updateState(cipher.doFinal(toDecrypt), layer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Decode data."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param state current cipher state"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param layers encryption layers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return final cipher state"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchPaddingException if encryption padding is invalid"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchAlgorithmException if algorithm provided in encryption layer is not supported"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws BadPaddingException if encryption padding is valid but not usable in current encryption state"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws IllegalBlockSizeException if block size of data is invalid"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws InvalidKeyException if key used is invalid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherState decode(CipherState state, List\u003cEncryptionLayer\u003e layers)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws NoSuchPaddingException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (int i \u003d layers.size(); i-- \u003e 0;) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.decode(state, layers.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 102
    }
  },
  {
    "path": "src/main/java/planner/credential/cryptography/CipherState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CipherState {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private byte[] message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private byte[] key;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for CipherState."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message current cipher message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param key current private key"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherState(byte[] message, byte[] key) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherState(byte[] message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(message, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getKey() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.key;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Update cipher state."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param cipherText new cipher text"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param layer current encryption layer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void updateState(byte[] cipherText, EncryptionLayer layer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (layer.isEncryptKey()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.key \u003d cipherText;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.message \u003d cipherText;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.key \u003d layer.getPrivateKey().getEncoded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] next(boolean isEncryptKey) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return isEncryptKey ? this.key : this.message;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * String representation of CipherState."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return HashMap-like String representation of CipherState"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String messageRepresentation;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String keyRepresentation;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.message \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            messageRepresentation \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            messageRepresentation \u003d new String(this.message, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.key \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            keyRepresentation \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            keyRepresentation \u003d new String(this.key, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashMap\u003cString, String\u003e state \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        state.put(\"message\", messageRepresentation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        state.put(\"privateKey\", keyRepresentation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return state.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 78
    }
  },
  {
    "path": "src/main/java/planner/credential/cryptography/EncryptionLayer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.cryptography.CryptographyUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.KeyGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.Key;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.KeyPairGenerator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.PrivateKey;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.PublicKey;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EncryptionLayer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String encryptionAlgorithm;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private KeyPair key;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String hashAlgorithm;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean encryptKey;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for encryption layer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param encryptionAlgorithm encryption algorithm to use"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param key key to use for encryption"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hashAlgorithm hash algorithm to use"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, KeyPair key, String hashAlgorithm) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.encryptionAlgorithm \u003d encryptionAlgorithm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.hashAlgorithm \u003d hashAlgorithm;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.encryptKey \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, String hashAlgorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, EncryptionLayer.genKey(encryptionAlgorithm), hashAlgorithm);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, KeyPair key) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                           PublicKey publicKey,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                           PrivateKey privateKey,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                           String hashAlgorithm) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, new KeyPair(publicKey, privateKey), hashAlgorithm);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, Key publicKey, Key privateKey, String hashAlgorithm) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, (PublicKey) publicKey, (PrivateKey) privateKey, hashAlgorithm);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, Key key, String hashAlgorithm) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, key, hashAlgorithm);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, Key key) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for EncryptionLayer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param encryptionAlgorithm algorithm to use"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param publicKey public key"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param privateKey private key"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hashAlgorithm hash algorithm to use"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, String publicKey, String privateKey, String hashAlgorithm) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CryptographyUtils.toKey(publicKey, encryptionAlgorithm),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CryptographyUtils.toKey(privateKey, encryptionAlgorithm),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                hashAlgorithm);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, String key, String hashAlgorithm) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, key, hashAlgorithm);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for EncryptionLayer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param encryptionAlgorithm algorithm to use"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param publicKey public key"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param privateKey private key"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hashAlgorithm hash algorithm to use"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, byte[] publicKey, byte[] privateKey, String hashAlgorithm) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CryptographyUtils.toKey(publicKey, encryptionAlgorithm),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CryptographyUtils.toKey(privateKey, encryptionAlgorithm),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                hashAlgorithm);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, byte[] publicKey, byte[] privateKey) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, publicKey, privateKey, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, byte[] key, String hashAlgorithm) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, key, hashAlgorithm);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm, byte[] key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, key, (String) null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer(String encryptionAlgorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(encryptionAlgorithm, (String) null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isSymmetric() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.key.getPublic().equals(this.key.getPrivate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getEncryptionAlgorithm() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.encryptionAlgorithm;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashAlgorithm() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.hashAlgorithm;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public KeyPair getKey() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.key;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Key getPublicKey() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.key.getPublic();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Key getPrivateKey() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.key.getPrivate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isEncryptKey() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.encryptKey;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set to encrypt last layer\u0027s key instead of the data."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return this"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EncryptionLayer encryptKey() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.encryptKey \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Generate KeyPair for cipher."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param algorithm algorithm to use"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param keySize key size"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param seed seed for SecureRandom"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return generated KeyPair"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchAlgorithmException if algorithm required is not supported"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static KeyPair genKey(String algorithm, int keySize, long seed) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (algorithm.contains(\"/\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            algorithm \u003d algorithm.substring(0, algorithm.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        KeyPair key;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Key tmp;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        SecureRandom random \u003d SecureRandom.getInstance(\"SHA1PRNG\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        random.setSeed(seed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            KeyPairGenerator generator \u003d KeyPairGenerator.getInstance(algorithm);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            generator.initialize(keySize, random);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            key \u003d new KeyPair(generator.genKeyPair());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NoSuchAlgorithmException ex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            KeyGenerator generator \u003d KeyGenerator.getInstance(algorithm);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            generator.init(keySize, random);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            tmp \u003d generator.generateKey();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            key \u003d new KeyPair(tmp, tmp);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static KeyPair genKey(String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return EncryptionLayer.genKey(algorithm, 2048, new SecureRandom().nextLong());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 179
    }
  },
  {
    "path": "src/main/java/planner/credential/cryptography/Hasher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.cryptography.CryptographyUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Hasher {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private final String defaultAlgorithm \u003d \"SHA-512\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get hash value for input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input input for hashing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param algorithm algorithm to use"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hash value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws NoSuchAlgorithmException when selected algorithm is not supported or invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(byte[] input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        MessageDigest md \u003d MessageDigest.getInstance(algorithm);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return md.digest(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(String input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getHash(input.getBytes(StandardCharsets.UTF_8), algorithm);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get hash value for input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input input for hashing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hash value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(byte[] input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getHash(input, defaultAlgorithm);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NoSuchAlgorithmException ignored) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public byte[] getHash(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getHash(input.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(String input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return CryptographyUtils.byteArrayToHexString(this.getHash(input, algorithm));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(byte[] input, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return CryptographyUtils.byteArrayToHexString(this.getHash(input, algorithm));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return CryptographyUtils.byteArrayToHexString(this.getHash(input));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getHashString(byte[] input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return CryptographyUtils.byteArrayToHexString(this.getHash(input));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 63
    }
  },
  {
    "path": "src/main/java/planner/credential/cryptography/KeyPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.Key;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * Wrapper for KeyPair to overcome some encryption implementation difficulties."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class KeyPair implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final long serialVersionUID \u003d -7565189502268009837L;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Key privateKey;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Key publicKey;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for KeyPair."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param publicKey public key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param privateKey private key"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public KeyPair(Key publicKey, Key privateKey) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.publicKey \u003d publicKey;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.privateKey \u003d privateKey;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for KeyPair."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param keyPair Java\u0027s KeyPair implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public KeyPair(java.security.KeyPair keyPair) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.publicKey \u003d keyPair.getPublic();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.privateKey \u003d keyPair.getPrivate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Key getPublic() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.publicKey;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Key getPrivate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.privateKey;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 42
    }
  },
  {
    "path": "src/main/java/planner/credential/user/CredentialManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.cryptography.EncryptionLayer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.cryptography.Hasher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CredentialManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Hasher hasher \u003d new Hasher();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArrayList\u003cEncryptionLayer\u003e encryptionLayers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for CredentialManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CredentialManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.encryptionLayers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.encryptionLayers.add(new EncryptionLayer(\"AES\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                          EncryptionLayer.genKey(\"AES\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                                         256,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                                           6478135743227891177L),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                             \"SHA-512\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.encryptionLayers.add(new EncryptionLayer(\"RSA\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                          EncryptionLayer.genKey(\"RSA\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                                         2048,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                                           2457103743313381847L))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                                          .encryptKey());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NoSuchAlgorithmException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean compareHash(String password, String passwordHash, String algorithm)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.hash(password, algorithm).equals(passwordHash);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean compareHash(String password, String passwordHash) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.hash(password).equals(passwordHash);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String hash(String message, String algorithm) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return hasher.getHashString(message, algorithm);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String hash(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return hasher.getHashString(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String requirePassword(PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return plannerUi.prompt(\"Please enter your password to continue:\", false, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ArrayList\u003cEncryptionLayer\u003e getEncryptionLayers() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.encryptionLayers;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int getHashLength() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return 64;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Xor operation on two byte arrays."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message first byte array"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param secret second byte array"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return xor result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private byte[] xor(byte[] message, byte[] secret) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] ret \u003d new byte[message.length];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (int i \u003d 0; i \u003c message.length; ++i) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret[i] \u003d (byte) (message[i] ^ secret[i % secret.length]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 80
    }
  },
  {
    "path": "src/main/java/planner/credential/user/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Profile extends HashMap\u003cString, User\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 8
    }
  },
  {
    "path": "src/main/java/planner/credential/user/TaskLists.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskLists {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskList\u003cModuleTask\u003e modules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskList\u003cCca\u003e ccas;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTask(TaskList\u003cModuleTask\u003e modules) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcas(TaskList\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cModuleTask\u003e getModules() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cCca\u003e getCcas() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get all tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return all tasks from all task lists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e getAllTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashSet\u003cTaskWithMultipleWeeklyPeriod\u003e taskSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e dummyVar \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (Field field : TaskLists.class.getDeclaredFields()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (dummyVar.getClass().isAssignableFrom(field.get(this).getClass())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    taskSet.addAll((TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e) field.get(this));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IllegalAccessException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TaskList(taskSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 53
    }
  },
  {
    "path": "src/main/java/planner/credential/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.cryptography.Cipher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.cryptography.CipherState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.Arguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.planner.ModTamperedDataException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.cryptography.CryptographyUtils;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int currentSemester;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cInteger, TaskLists\u003e modulesAndCcas;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static CredentialManager credentialManager \u003d new CredentialManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static int LOGIN_LIMITS \u003d 5;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final String defaultPath \u003d \"data/userProfile.json\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static String path \u003d \"data/userProfile.json\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static boolean resourceRead \u003d Files.isRegularFile(Path.of(defaultPath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public User(int semester) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        currentSemester \u003d semester;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void init(int semester) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modulesAndCcas \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modulesAndCcas.put(semester, new TaskLists());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modulesAndCcas.get(semester).setTask(new TaskList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modulesAndCcas.get(semester).setCcas(new TaskList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.init(currentSemester);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void setPath(String path) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        User.path \u003d path;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void restoreDefaultPath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        User.path \u003d User.defaultPath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Profile readUserData() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (resourceRead) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return User.storage.readGsonSecure(User.path, Profile.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                InputStream in \u003d User.class"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        .getClassLoader()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        .getResourceAsStream(\"data/userProfile.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                InputStreamReader inputStreamReader \u003d new InputStreamReader(in, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                Cipher cipher \u003d new Cipher();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CipherState state \u003d gson.fromJson(inputStreamReader, CipherState.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    state \u003d cipher.decode(state, credentialManager.getEncryptionLayers());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (Throwable ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new ModTamperedDataException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                int hashLength \u003d credentialManager.getHashLength();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (!CryptographyUtils.isOriginal(state.getMessage(), hashLength)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new ModTamperedDataException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return gson.fromJson("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        CryptographyUtils.removeTrailingHash("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                state.getMessage(), hashLength),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Profile.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModTamperedDataException ex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Load user profile."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param detailedMap detailed module map"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi planner Ui"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param store storage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param jsonWrapper json wrapper"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return user profile"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static User loadProfile(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                   PlannerUi plannerUi,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                   Storage store,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                   JsonWrapper jsonWrapper) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Profile p \u003d User.readUserData();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (p \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        User user \u003d p.get(\"profile\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (user \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!User.confirmOldPassword(detailedMap, plannerUi, store, jsonWrapper, user)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.println(\"Sorry but I cannot continue without a valid password!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt to confirm old password on log in."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param detailedMap detailed module map"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi planner Ui"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param store storage"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param jsonWrapper json wrapper"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param profile user profile"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if user input valid old password within LOGIN_LIMITS tries, false otherwise"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static boolean confirmOldPassword(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                             PlannerUi plannerUi,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                             Storage store,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                             JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                             User profile) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (profile.isPasswordProtected()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (String password \u003d CredentialManager.requirePassword(plannerUi);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                 !User.isValidPassword(password, profile.password);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                 password \u003d CredentialManager.requirePassword(plannerUi)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                plannerUi.println(\"That did not work, please try again\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ++counter;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (counter \u003e LOGIN_LIMITS) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    boolean reset \u003d plannerUi.confirm(\"You are entering wrong passwords too many times!\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"\\nDo you want me to reset the password? (ALL user data will be wiped!)\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (reset) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        User.reset(detailedMap, plannerUi, store, jsonWrapper, profile);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Save user profile to disk."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void saveProfile() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        profile.put(\"profile\", this);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        User.storage.writeGsonSecure(profile, User.path);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.currentSemester;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cModuleTask\u003e getModules(int semester) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.modulesAndCcas.get(semester).getModules();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cModuleTask\u003e getModules() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getModules(this.getSemester());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cCca\u003e getCcas(int semester) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.modulesAndCcas.get(semester).getCcas();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cCca\u003e getCcas() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getCcas(this.getSemester());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e getAllTasks(int semester) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.modulesAndCcas.get(semester).getAllTasks();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e getAllTasks() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getAllTasks(this.getSemester());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set modules/ccas for a semester."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param semester selected semester"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param tasks module list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void setTask(int semester, TaskList\u003c? extends TaskWithMultipleWeeklyPeriod\u003e tasks) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (tasks !\u003d null \u0026\u0026 !tasks.isEmpty()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.modulesAndCcas \u003d\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.modulesAndCcas \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            TaskLists taskLists \u003d this.modulesAndCcas.get(semester);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (Field field: taskLists.getClass().getDeclaredFields()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (field.getClass().isAssignableFrom(tasks.getClass())) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        field.set(taskLists, tasks);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } catch (IllegalAccessException ex) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        ex.printStackTrace();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModules(int semester, TaskList\u003cModuleTask\u003e modules) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setTask(semester, modules);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModules(TaskList\u003cModuleTask\u003e modules) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModules(this.getSemester(), modules);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcas(int semester, TaskList\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setTask(semester, ccas);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcas(TaskList\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCcas(this.getSemester(), ccas);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set modules and ccas for a semester."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param semester selected semester"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param modules module list"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param ccas cca list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModulesAndCcas(int semester, TaskList\u003cModuleTask\u003e modules, TaskList\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModules(semester, modules);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCcas(semester, ccas);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setModulesAndCcas(TaskList\u003cModuleTask\u003e modules, TaskList\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setModulesAndCcas(this.getSemester(), modules, ccas);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setSemester(int semester) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.currentSemester \u003d semester;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set new password."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param newPassword new password"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param oldPassword old password"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if old password is valid, false otherwise"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean setPassword(String newPassword, String oldPassword) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (newPassword !\u003d null \u0026\u0026 !newPassword.isBlank()"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (!this.isPasswordProtected() || this.isValidPassword(oldPassword))) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.password \u003d credentialManager.hash(newPassword);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getPasswordHash() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isValidPassword(String password) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return User.isValidPassword(password, this.password);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static boolean isValidPassword(String password, String passwordHash) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return credentialManager.compareHash(password, passwordHash);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPasswordProtected() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.password !\u003d null \u0026\u0026 !this.password.isBlank();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Reset data (depends on ClearCommand\u0027s implementation)."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param detailedMap detailed module map"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param plannerUi planner Ui"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param store storage"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param jsonWrapper json wrapper"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param profile user profile"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static void reset(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                              PlannerUi plannerUi,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                              Storage store,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                              JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                              User profile) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashMap\u003cString, Object\u003e argsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        argsMap.put(\"command\", \"clear\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        argsMap.put(\"toClear\", \"data\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Arguments args \u003d new Arguments(argsMap);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        new ClearCommand(args).execute(detailedMap, plannerUi, store, jsonWrapper, profile);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Reset all."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setSemester(0);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.clearPassword();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.saveProfile();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearPassword() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.password \u003d null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 329
    }
  },
  {
    "path": "src/main/java/planner/logic/command/AddCcaScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModScheduleException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModOutOfBoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class AddCcaScheduleCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public AddCcaScheduleCommand(Arguments args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(HashMap\u003cString,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        User profile) throws ModException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int index \u003d arg(\"index\", Integer.class) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (profile.getCcas().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModEmptyListException(\"ccas\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d profile.getCcas().size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModOutOfBoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(arg(\"begin\")).toLocalTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(arg(\"end\")).toLocalTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(arg(\"dayOfWeek\").toUpperCase());     "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TimePeriodWeekly timePeriodWeekly \u003d new TimePeriodWeekly(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (profile.getAllTasks().clashes(timePeriodWeekly)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModScheduleException(\"Time period\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Cca cca \u003d profile.getCcas().get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cca.addPeriod(timePeriodWeekly);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        jsonWrapper.storeCcaListAsJson(profile.getCcas(), store);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        plannerUi.addedMsg(cca);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 55
    }
  },
  {
    "path": "src/main/java/planner/logic/command/Arguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Arguments extends HashMap\u003cString, Object\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Arguments(Map\u003cString, Object\u003e map) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(map);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/planner/logic/command/CapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@author andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModMissingArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModBadGradeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModNoPrerequisiteException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModCommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyCommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class CapCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String[] command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //public ArrayList\u003cModuleInfoSummary\u003e completedModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //public ModuleList specificModuleCap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double currentCap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double projectedModuleCap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double projectedCap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private double mcCount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private ArrayList\u003cString\u003e validGrades \u003d new ArrayList\u003c\u003e(Arrays.asList(\"A+\", \"A\", \"A-\", \"B+\", \"B\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"B-\", \"C+\", \"C\", \"D+\", \"D\", \"F\", \"S\", \"U\", \"CS\", \"CU\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the CapCommand class where user can enquire information about their CAP."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Such as overall CAP and what-if reports about predicted CAP."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Input format can be in three forms"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap` overall cap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap list` to calculate cap from grades in module list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * `cap module to check predicted cap for a specific module from prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public CapCommand(Arguments args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        mcCount \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        currentCap \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedModuleCap \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedCap \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for testing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public CapCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        mcCount \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        currentCap \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedModuleCap \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        projectedCap \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public boolean isComplete(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return input.equalsIgnoreCase(\"done\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getCurrentCap() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return currentCap;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getProjectedModuleCap() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return projectedModuleCap;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double getProjectedCap() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return projectedCap;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Converts String grade to a double value according to NUS guidelines."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public double letterGradeToCap(String grade) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A+\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 5.00;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"A-\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 4.50;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B+\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 4.00;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 3.50;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"B-\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 3.00;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"C+\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 2.50;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"C\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 2.00;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"D+\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 1.50;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 1.00;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 0.50;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return 0.00;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Execute of 3 different forms of user input according to the arguments of the user input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        User profile)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        switch (arg(\"toCap\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"overall\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capStartMsg();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateOverallCap(profile.getModules(), detailedMap, plannerUi, store);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capModStartMsg();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateModuleCap(detailedMap, plannerUi, store, profile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                TaskList\u003cModuleTask\u003e hold \u003d profile.getModules();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capListStartMsg(hold);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                calculateListCap(profile.getModules(), detailedMap, plannerUi, store, hold);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModCommandException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * User will keep inputting \"[moduleCode] [letterGrade]\" until satisfied."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Then user inputs \"done\" and the user\u0027s CAP will be calculated and printed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateOverallCap(TaskList\u003cModuleTask\u003e moduleTasksList,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    PlannerUi plannerUi,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Storage store)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModMissingArgumentException, ModNotFoundException, ModEmptyCommandException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModBadGradeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String userInput \u003d plannerUi.readInput();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (!isComplete(userInput)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModEmptyCommandException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] userInfo \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (userInfo.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModBadGradeException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!validGrades.contains(userInfo[1].toUpperCase())) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModBadGradeException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!detailedMap.containsKey(userInfo[0].toUpperCase())) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModNotFoundException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            double mcTemp \u003d detailedMap.get(userInfo[0].toUpperCase()).getModuleCredit();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (letterGradeToCap(userInfo[1].toUpperCase()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                mcCount +\u003d mcTemp;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                currentCap +\u003d (letterGradeToCap(userInfo[1].toUpperCase()) * mcTemp);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (userInfo[1].isEmpty() || userInfo[1].isBlank()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModMissingArgumentException(\"Please input a letter grade for this module.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            userInput \u003d plannerUi.readInput();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (currentCap \u003d\u003d 0 \u0026\u0026 mcCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capMsg(0.00);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            double averageCap \u003d currentCap / mcCount;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capMsg(averageCap);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Calculates a predicted CAP for a module based on the grades attained for it\u0027s prerequisites."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateModuleCap(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    PlannerUi plannerUi,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    Storage store,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                    User profile)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        throws ModNotFoundException,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModNoPrerequisiteException,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModEmptyListException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String moduleCode \u003d plannerUi.readInput().toUpperCase();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!detailedMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (detailedMap.get(moduleCode).getPrerequisites().isEmpty()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ||"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            detailedMap.get(moduleCode).getPrerequisites().isBlank()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNoPrerequisiteException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (profile.getModules().isEmpty()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModEmptyListException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cString\u003e prunedModules \u003d parsePrerequisiteTree(detailedMap.get(moduleCode).getPrerequisites());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (String x : prunedModules) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!detailedMap.containsKey(x)) { // check if the prereq moduels are still valid"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                prunedModules.remove(x);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask x : profile.getModules()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (prunedModules.contains(x.getModuleCode())) { // check module list for prereq modules, and add cap"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                if (letterGradeToCap(x.getGrade()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    mcCount +\u003d x.getModuleCredit();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    projectedModuleCap +\u003d letterGradeToCap(x.getGrade()) * x.getModuleCredit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                prunedModules.remove(x.getModuleCode());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cString\u003e toBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!prunedModules.isEmpty()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            for (String module : prunedModules) { // check module list for preclusion of prereq modules"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                boolean hasPreclusions \u003d false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                for (ModuleTask x : profile.getModules()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    if (detailedMap.get(module).getPreclusion().contains(x.getModuleCode())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        ||"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        (detailedMap.get(x.getModuleCode()).getPreclusion().contains(module))) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        hasPreclusions \u003d true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        mcCount +\u003d x.getModuleCredit();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        projectedModuleCap +\u003d letterGradeToCap(x.getGrade()) * x.getModuleCredit();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                if (hasPreclusions) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    toBeRemoved.add(module);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (String x : toBeRemoved) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prunedModules.remove(x);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (prunedModules.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (projectedModuleCap \u003d\u003d 0 \u0026\u0026 mcCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capModMsg(0.00, moduleCode);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                double averageCap \u003d projectedModuleCap / mcCount;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                plannerUi.capModMsg(averageCap, moduleCode);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capModuleIncompleteMsg(prunedModules);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Calculates CAP according to the modules with grades in the ModuleTaskList."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void calculateListCap(TaskList\u003cModuleTask\u003e moduleTasksList,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 PlannerUi plannerUi,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 Storage store,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                                 TaskList\u003cModuleTask\u003e moduleList) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask task : moduleList) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (letterGradeToCap(task.getGrade()) !\u003d 0.00) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                mcCount +\u003d task.getModuleCredit();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                projectedCap +\u003d (letterGradeToCap(task.getGrade()) * task.getModuleCredit());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        double averageCap \u003d projectedCap / mcCount;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (projectedCap \u003d\u003d 0 \u0026\u0026 mcCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capListErrorMsg();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.capMsg(averageCap);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to parse prerequisites from ModuleInfoDetailed and splice it into a List of Lists of String."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Overall is List of Lists, for each internal List it contains modules that are \u0027or\u0027ed with each other"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * i.e taking one of the modules in the internal list is enough to fulfill one list of prerequisites"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Across the whole list is modules that are \u0027and\u0027ed with each other"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * The whole List of Lists must be complete and graded in order for prerequisites to be fulfilled"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return A List of lists of string of prerequisite modules to be graded before calculating cap"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public ArrayList\u003cString\u003e parsePrerequisiteTree(String prerequisites) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(\"[a-zA-Z][a-zA-Z][a-zA-Z]?[0-9][0-9][0-9][0-9][a-zA-Z]?\")"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .matcher(prerequisites);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cString\u003e prerequisiteModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            prerequisiteModules.add(matcher.group());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return prerequisiteModules;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 297
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.CredentialManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ClearCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ClearCommand(Arguments args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        User profile) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String toClear \u003d arg(\"toClear\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        plannerUi.clearMsg(toClear);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean confirm \u003d plannerUi.confirm();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (confirm) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            switch (toClear) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"module\"): {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    profile.getModules().clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"cca\"): {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    profile.getCcas().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"password\"): {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (profile.isPasswordProtected()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        String oldPassword \u003d CredentialManager.requirePassword(plannerUi);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        if (profile.isValidPassword(oldPassword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            profile.clearPassword();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            plannerUi.println(\"Failed to clear password!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        plannerUi.println(\"No active password found!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                case (\"data\"): {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    profile.getModules().clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    profile.getCcas().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    profile.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.clearedMsg(toClear);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.abortMsg();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 73
    }
  },
  {
    "path": "src/main/java/planner/logic/command/EndCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class EndCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            User profile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        killAllTimers();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.goodbyeMsg();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //System.exit(0); // Causes test cases to throw exceptions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //Runtime.getRuntime().halt(0); //Forced kill"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void killAllTimers() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Timer timer: CliLauncher.timerPool) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 35
    }
  },
  {
    "path": "src/main/java/planner/logic/command/GradeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@author andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class GradeCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    String letterGrade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for GradeCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public GradeCommand(Arguments args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.moduleCode \u003d arg(\"moduleCode\").toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.letterGrade \u003d arg(\"letterGrade\").toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for testing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public GradeCommand(String moduleCode, String letterGrade) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.letterGrade \u003d letterGrade;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Allows users to grade modules in task list, or add modules with a grade attached if it is not in their list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        User profile) throws ModException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!detailedMap.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleInfoDetailed mod \u003d detailedMap.get(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleTask temp \u003d new ModuleTask(moduleCode, mod);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!profile.getModules().contains(temp)) { // if list does not have module requested, add it with a grade"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            mod.setGrade(letterGrade);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ModuleTask temp2 \u003d new ModuleTask(moduleCode, mod);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            temp2.setTaskDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            profile.getModules().add(temp2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.addedMsg(temp2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else if (profile.getModules().contains(temp)) { // otherwise set grade"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            int location \u003d profile.getModules().indexOf(temp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            profile.getModules().get(location).setGrade(letterGrade);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            profile.getModules().get(location).setTaskDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            plannerUi.gradedMsg(temp.getModuleCode(), letterGrade);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 67
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public abstract class ModuleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Arguments args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleCommand(Arguments args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    \u003cT\u003e T arg(String name, Class\u003cT\u003e type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return type.cast(this.args.get(name));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    String arg(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return this.arg(name, String.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public abstract void execute("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            User profile) throws ModException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void call("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            User profile) throws ModException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        execute(detailedMap, plannerUi, store, jsonWrapper, profile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        profile.saveProfile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 49
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.schedule.ScheduledTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.schedule.ModTimer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ReminderCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ReminderCommand(Arguments args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints the reminder message every ten seconds."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void printEveryTenSec(PlannerUi plannerUi) throws InterruptedException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        Timer time \u003d new ModTimer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        ScheduledTask scheduledTask \u003d new ScheduledTask(plannerUi);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        time.schedule(scheduledTask, 0, 10000);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints the reminder message every thirty seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void printEveryThirtySec(PlannerUi plannerUi) throws InterruptedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        Timer time \u003d new ModTimer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        ScheduledTask scheduledTask \u003d new ScheduledTask(plannerUi);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        time.schedule(scheduledTask, 0, 30000);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints the reminder message every one minute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void printEveryOneMin(PlannerUi plannerUi) throws InterruptedException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        Timer time \u003d new ModTimer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        ScheduledTask scheduledTask \u003d new ScheduledTask(plannerUi);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        time.schedule(scheduledTask, 0, 60000);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints the reminder message every two minutes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void printEveryTwoMin(PlannerUi plannerUi) throws InterruptedException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        Timer time \u003d new ModTimer();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        ScheduledTask scheduledTask \u003d new ScheduledTask(plannerUi);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        time.schedule(scheduledTask, 0, 120000);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Stops the reminder message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void killAllTimers() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        for (Timer timer: CliLauncher.timerPool) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        System.out.println(\"_______________________________\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"Your reminder for the update is being stopped.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"To activate the reminder again, type reminder list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        User profile) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        switch (arg(\"toReminder\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"list\"): {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.reminderList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"one\"): {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    printEveryTenSec(plannerUi);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"two\"): {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    printEveryThirtySec(plannerUi);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"three\"): {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    printEveryOneMin(plannerUi);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"four\"): {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    printEveryTwoMin(plannerUi);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"stop\"):"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                killAllTimers();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 132
    }
  },
  {
    "path": "src/main/java/planner/logic/command/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModOutOfBoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class RemoveCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RemoveCommand(Arguments args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        User profile) throws ModException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int index \u003d arg(\"index\", Integer.class) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (arg(\"toRemove\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"cca\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (profile.getCcas().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModEmptyListException(\"ccas\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d profile.getCcas().size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModOutOfBoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                TaskWithMultipleWeeklyPeriod delCca \u003d profile.getCcas().get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.deleteMsg(delCca);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                profile.getCcas().remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d profile.getModules().size() || profile.getModules().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModOutOfBoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                ModuleTask delMod \u003d profile.getModules().get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.deleteMsg(delMod);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                profile.getModules().remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        profile.saveProfile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 58
    }
  },
  {
    "path": "src/main/java/planner/logic/command/SearchThenAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModScheduleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModSameModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class SearchThenAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public SearchThenAddCommand(Arguments args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        User profile) throws ModException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        switch (arg(\"toAdd\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case (\"cca\"): {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Cca cca \u003d new Cca(arg(\"name\"), arg(\"begin\"), arg(\"end\"), arg(\"dayOfWeek\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (profile.getAllTasks().clashes(cca)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModScheduleException(\"CCA\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                profile.getCcas().add(cca);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                plannerUi.addedMsg(cca);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                jsonWrapper.storeCcaListAsJson(profile.getCcas(), store);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            case (\"module\"):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                String moduleCode \u003d arg(\"moduleCode\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                String upperModuleCode \u003d moduleCode.toUpperCase().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (detailedMap.containsKey(upperModuleCode)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    ModuleInfoDetailed mod \u003d detailedMap.get(upperModuleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    ModuleTask temp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (!profile.getModules().findExact(upperModuleCode).isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        throw new ModSameModuleException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (arg(\"begin\") !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        temp \u003d new ModuleTask(upperModuleCode, mod, arg(\"begin\"), arg(\"end\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                arg(\"dayOfWeek\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        temp \u003d new ModuleTask(upperModuleCode, mod);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (profile.getAllTasks().clashes(temp)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        throw new ModScheduleException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    profile.getModules().add(temp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    plannerUi.addedMsg(temp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    throw new ModNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 73
    }
  },
  {
    "path": "src/main/java/planner/logic/command/SetPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.CredentialManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class SetPasswordCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public SetPasswordCommand(Arguments args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        JsonWrapper jsonWrapper, User profile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String oldPassword \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (profile.isPasswordProtected()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            oldPassword \u003d CredentialManager.requirePassword(plannerUi);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (profile.setPassword(arg(\"password\"), oldPassword)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.println(\"Password set successfully!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            plannerUi.println(\"Password set failed!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 33
    }
  },
  {
    "path": "src/main/java/planner/logic/command/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ShowCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Set\u003cString\u003e coreModList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ShowCommand(Arguments args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Function to return a string set containing all the core module codes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * @return coreModList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private Set\u003cString\u003e getCoreModList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        if (coreModList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            setCoreMods(coreModList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        return coreModList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Function to add all core module codes into a string set."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * @param coreModList takes in a set of string and populates it with CEG core module codes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static void setCoreMods(Set\u003cString\u003e coreModList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG1111\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG1112\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS1010\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS1231\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"MA1511\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"MA1512\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"MA1508E\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2023\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2027\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2028\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG2271\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS2040C\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS2101\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CS2113T\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EE2026\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EG2401A\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"ST2334\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG3207\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CP3380\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EG3611A\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"CG4002\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        coreModList.add(\"EE4204\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    //public static void checkGeClash"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        User profile) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        switch (arg(\"toShow\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case \"cca\": {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.listCcaMsg();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (Cca cca : profile.getCcas()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.println(count++ + \". \" + cca);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"core\"): {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.coreModReport();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                Set\u003cString\u003e coreModList \u003d getCoreModList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (ModuleTask task : profile.getModules()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d task.getModuleCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if (coreModList.contains(moduleCode)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        plannerUi.println(count++ + \". \" + task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.coreModLeft();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfCoreMods \u003d 22;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.println(numOfCoreMods - count + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"ge\"): {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.geModReport();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int gehCount \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int geqCount \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int gesCount \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int gerCount \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int getCount \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int geTypeCount \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (ModuleTask task : profile.getModules()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d task.getModuleInfoDetailed().getModuleCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if (moduleCode.startsWith(\"GE\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        plannerUi.println(count++ + \". \" + task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if (moduleCode.charAt(2) \u003d\u003d \u0027H\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        gehCount++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        if (gehCount  \u003e 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount +\u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    } else if (moduleCode.charAt(2) \u003d\u003d \u0027Q\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        geqCount++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        if (geqCount  \u003e 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount +\u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    } else if (moduleCode.charAt(2) \u003d\u003d \u0027S\u0027) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        gesCount++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        if (gesCount  \u003e 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount +\u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    } else if (moduleCode.charAt(2) \u003d\u003d \u0027R\u0027) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        gerCount++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        if (gerCount  \u003e 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount +\u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount++;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    } else if (moduleCode.charAt(2) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        getCount++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        if (getCount  \u003e 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount +\u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            geTypeCount++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                if (gehCount \u003e 1 || geqCount \u003e 1 || gesCount \u003e 1 || gerCount \u003e 1 || getCount \u003e 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    System.out.println(\"\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                        +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                        \"There are more than one type of GE modules added.\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                        +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                        \"Please add only one type of GE module each.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.geModLeft();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfGeMods \u003d 5;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.println(numOfGeMods - geTypeCount);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case (\"ue\"): {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.ueModReport();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                Set\u003cString\u003e coreModList \u003d getCoreModList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (ModuleTask task : profile.getModules()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    String moduleCode \u003d task.getModuleInfoDetailed().getModuleCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    if ((!coreModList.contains(moduleCode)) \u0026\u0026 !moduleCode.startsWith(\"GE\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                        plannerUi.println(count++ + \". \" + task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.ueModLeft();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int numOfUeMods \u003d 8;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.println(numOfUeMods - count + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            case \"module\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                plannerUi.listMsg();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                for (ModuleTask temp : profile.getModules()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.print(count++ + \". \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    plannerUi.showObject(temp);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 194
    }
  },
  {
    "path": "src/main/java/planner/logic/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "//@@author e0313687"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class SortCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public SortCommand(Arguments args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private List\u003cTaskWithMultipleWeeklyPeriod\u003e filter(List\u003cTaskWithMultipleWeeklyPeriod\u003e all, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTaskWithMultipleWeeklyPeriod\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod task : all) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (task.happensOnThisDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                filtered.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        PlannerUi plannerUi,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        Storage store,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        User profile) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String toSort \u003d arg(\"toSort\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        plannerUi.sortMsg(toSort);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        switch (toSort) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"cca\"): {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                TaskList\u003cCca\u003e hold \u003d profile.getCcas();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cTaskWithMultipleWeeklyPeriod\u003e holdForCcas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                hold.sort(Comparator.comparing((Object t) -\u003e ((Cca) t).getTaskToLowerCase()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                if (arg(\"r\", Boolean.class)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    for (int i \u003d hold.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForCcas.add(hold.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    plannerUi.showSorted(holdForCcas);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSorted(hold);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"time\"):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cTaskWithMultipleWeeklyPeriod\u003e holdForTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cTaskWithMultipleWeeklyPeriod\u003e holdForTimeReverse \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(arg(\"DayOfTheWeek\").toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                for (TaskWithMultipleWeeklyPeriod t : profile.getAllTasks()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    if (t.happensOnThisDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForTime.add(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                holdForTime.sort(Comparator.comparing(t -\u003e t.getTimePeriodOfTheDay(dayOfWeek).get(0).getBegin()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                if (arg(\"r\", Boolean.class)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    for (int i \u003d holdForTime.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForTimeReverse.add(holdForTime.get(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    plannerUi.showSortedTimes(holdForTimeReverse, dayOfWeek);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSortedTimes(holdForTime, dayOfWeek);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case (\"module\"):"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                TaskList\u003cModuleTask\u003e taskList \u003d profile.getModules();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                List\u003cTaskWithMultipleWeeklyPeriod\u003e holdForTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                switch (arg(\"type\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"level\"): {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing(ModuleTask::getModuleLevel));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"grade\"): {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing(ModuleTask::getGradeAsNumbers));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"mc\"): {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing(ModuleTask::getModuleCredit));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case (\"code\"):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    default: {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        taskList.sort(Comparator.comparing(ModuleTask::getModuleCode));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                if (arg(\"r\", Boolean.class)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    for (int i \u003d taskList.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        holdForTaskList.add(taskList.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    plannerUi.showSorted(holdForTaskList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                plannerUi.showSorted(taskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 116
    }
  },
  {
    "path": "src/main/java/planner/logic/command/UpdateModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModEmptyCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModUpdateErrorException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class UpdateModuleCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public UpdateModuleCommand(Arguments args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HashMap\u003cString, ModuleInfoDetailed\u003e detailedMap,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerUi plannerUi,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Storage store,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonWrapper jsonWrapper,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            User profile) throws ModException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String year \u003d arg(\"moduleDataUpdate\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (year.equals(\"module\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            NattyWrapper nattyWrapper \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String thisYear \u003d nattyWrapper.dateToLocalDateTime(\"this year\").format(formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String nextYear \u003d nattyWrapper.dateToLocalDateTime(\"next year\").format(formatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            year \u003d thisYear + \"-\" + nextYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            jsonWrapper.runRequests(year, store);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            detailedMap.putAll(jsonWrapper.getModuleDetailedMap());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            profile.getModules().setTasks(jsonWrapper.readJsonTaskList(store));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            plannerUi.showUpdatedMsg();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModUpdateErrorException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 48
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Must be a valid command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModEmptyCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyCommandException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Command cannot be empty!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModEmptyListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModEmptyListException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModEmptyListException(String type) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModEmptyListException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this(\"tasks\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"There are no \" + this.type + \" in the list!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 10,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModException(Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    protected ModException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause, enableSuppression, writableStackTrace);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Over-writing the exception class GetMessage method,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * so that other sub-classes would have this message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Starting portion indicating a ModException."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String extraMessage \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (super.getMessage() !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            extraMessage \u003d super.getMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Error: \" + extraMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 24,
      "namiwa": 14
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidIndexException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid Index!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Invalid time and date format!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModInvalidTimePeriodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModInvalidTimePeriodException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"Invalid time period! \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 6,
      "andrewleow97": 1,
      "namiwa": 1
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModMissingArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMissingArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModMissingArgumentException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"Missing \" + this.getMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9,
      "namiwa": 4
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModMultipleValuesForSameArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModMultipleValuesForSameArgumentException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Cannot set multiple values for the same argument!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 5,
      "namiwa": 3
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModNoTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModNoTimeException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getMessage() + \"Cannot set time for this task!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModOutOfBoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModOutOfBoundException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"Index out of bound, try something else!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModScheduleException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModScheduleException(String type1, String type2) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(type1 + \" clashes with existing \" + type2 + \"!\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModScheduleException(String type1) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(type1, \"tasks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModScheduleException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(\"Module\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 11,
      "namiwa": 5
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/legacy/ModTimeIntervalTooCloseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModTimeIntervalTooCloseException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"That time interval is too close!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 1,
      "namiwa": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadGradeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ModBadGradeException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"Please enter a valid letter grade!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "andrewleow97": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadRequestStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModBadRequestStatus extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Bad Status Connection!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 10
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModBadSuException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ModBadSuException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"S/U option is not allowed for this module!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "andrewleow97": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModFailedJsonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModFailedJsonException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Failed to parse data file!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModNoPrerequisiteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ModNoPrerequisiteException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return super.getMessage() + \"This module has no prerequisites to predict a CAP for!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 13
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModNotFoundException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"Module not found :(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModSameModuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModSameModuleException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"This module has already been added!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 3,
      "namiwa": 8
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModTamperedDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ModTamperedDataException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return super.getMessage() + \"Data has been tampered, not using saved data!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 11
    }
  },
  {
    "path": "src/main/java/planner/logic/exceptions/planner/ModUpdateErrorException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModUpdateErrorException extends ModException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"You can only update modules using \\\"module\\\" !\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 11
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskList\u003cE extends TaskWithMultipleWeeklyPeriod\u003e extends ArrayList\u003cE\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList(int initialCapacity) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(initialCapacity);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList(Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(c);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Returns list of tasks which have the search"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * keyword included in their name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param keyword Parsed keyword of the cca to be searched"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param exact If true, whole name must match"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Returns the cca list where each cca contains the search keyword"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e find(String keyword, boolean exact) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e results \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod task : this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String taskName \u003d task.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (!exact \u0026\u0026 taskName.contains(keyword) || taskName.equals(keyword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e find(String keyword) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.find(keyword, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e findExact(String keyword) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.find(keyword, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set cca list to some other list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param tasks new cca list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void set(Collection\u003cE\u003e tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addAll(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether given task clashes with current tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param task given task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes else false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean clashes(TaskWithMultipleWeeklyPeriod task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod currentTask: this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (task.isClashing(currentTask)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean clashes(TimePeriodWeekly timePeriodWeekly) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.clashes(new TaskWithMultipleWeeklyPeriod(\"tempName\", timePeriodWeekly));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public HashSet\u003cTaskWithMultipleWeeklyPeriod\u003e getSetTasks() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new HashSet\u003c\u003e(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTasks(List\u003cE\u003e tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addAll(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 84
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/cca/Cca.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.cca;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.PrintUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Cca extends TaskWithMultipleWeeklyPeriod {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for Cca module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param task description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param beginString begin time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param endString end time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek day of week when the cca takes place"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimeException when input time is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Cca(String task, String beginString, String endString, String dayOfWeek) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task, TaskWithMultipleWeeklyPeriod.getDayOfWeek(dayOfWeek));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(beginString).toLocalTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(endString).toLocalTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setPeriod(0, begin, end);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(\"C|\" + super.writingFile());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            prefix.append(\"|\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\"~\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getEndTime()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            .format(formatter)).append(\"~\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getDayOfWeek());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return prefix.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(\"[C] \" + this.getName() + \" | \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            prefix.append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\" - \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getEndTime()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            .format(formatter)).append(\" on \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(period.getDayOfWeek())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .append(\", \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //PrintUtil.printToFile(prefix.toString().substring(0, prefix.length() - 2), \"test.txt\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return prefix.toString().substring(0, prefix.length() - 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"cca\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 78
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * task is the string value of the task name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * done is the active status of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * dateTime is the date and time information if the task requires."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Boolean done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to Task class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task User\u0027s input of the desired task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Function to be used to when writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Returns a string containing task name and done status."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + (isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String completed \u003d (done) ? \"[taken] \" : \"[not taken] \"; // \\u2713, \\u2717"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return completed + task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return otherTask.getName().equals(this.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(task, done);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getTaskToLowerCase() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.task.toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 9,
      "namiwa": 8,
      "e0313687": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithInterval extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Period period, Duration duration) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(period, duration);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(begin, end);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, TimeInterval interval) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Period period) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(period);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task, Duration duration) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval(duration);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithInterval(String task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval \u003d new TimeInterval();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.interval;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(begin, end);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Period period, Duration duration) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(period, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimeInterval interval) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.interval.setInterval(interval);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse String inputs to TimeInterval object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param days input days"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hours input hours"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param minutes input minutes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param seconds input seconds"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return equivalent TimeInterval object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimeException when input value is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    static TimeInterval parseInterval(String days, String hours, String minutes, String seconds)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TimeInterval interval \u003d new TimeInterval();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (days !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofDays(Integer.parseInt(days)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (hours !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofHours(Integer.parseInt(hours)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (minutes !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofMinutes(Integer.parseInt(minutes)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (seconds !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                interval \u003d interval.plus(TimeInterval.ofSeconds(Integer.parseInt(seconds)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return interval;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 91
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithMultiplePeriods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class TaskWithMultiplePeriods\u003cE extends TimePeriod\u003e extends Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    List\u003cE\u003e periods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultiplePeriods(String task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.getPeriod(index));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getBeginTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getEndTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getBegin(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getBegin();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getEnd(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getEnd();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public E getPeriod(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.checkIndex(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriods().get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for a task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param index task index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param period new period"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidIndexException when input index is invalid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, E period) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.getPeriods().set(index, period);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    void checkIndex(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d this.getPeriods().size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidIndexException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cE\u003e getPeriods() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.periods;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriods(List\u003cE\u003e periods) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.periods \u003d periods;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get all days of week on which this task takes place."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a list of days of week on which this task takes place"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Set\u003cDayOfWeek\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.getPeriods() !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                result.addAll(timePeriod.getDaysOfWeek());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new ArrayList\u003c\u003e(result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TaskWithPeriod\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriod());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given TimePeriod."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given TimePeriod"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TimePeriod\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(other)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given List of TimePeriod."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given List of TimePeriod"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(List\u003c? extends TimePeriod\u003e other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (TimePeriod otherTimePeriod: other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (timePeriod.isClashing(otherTimePeriod)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TaskWithMultiplePeriods\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriods());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with given TemporalAccessor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other given TemporalAccessor"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(other)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check for clashing with time between two given TemporalAccessors."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin begin of the duration"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end begin of the duration"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashing else false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T begin, T end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (E timePeriod: this.getPeriods()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (timePeriod.isClashing(begin, end)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    void initPeriodList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.periods \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.periods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add a period."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param timePeriod new period"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(E timePeriod) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initPeriodList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriods().add(timePeriod);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getTime(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (this.getBegin(index) !\u003d null) ? this.getBegin(index) : this.getEnd(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 179
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithMultipleWeeklyPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithMultipleWeeklyPeriod extends TaskWithMultiplePeriods\u003cTimePeriodWeekly\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, TimePeriodWeekly period) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(period);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(task, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(dayOfWeek);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod(String task, List\u003cTimePeriodWeekly\u003e periods) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriods(periods);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(begin, end, dayOfWeek));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(begin, duration, dayOfWeek));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addPeriod(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.addPeriod(new TimePeriodWeekly(dayOfWeek));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void removePeriod(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.periods.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, LocalTime begin, LocalTime end) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setPeriod(begin, end);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(int index, LocalTime begin, TimeInterval duration) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setPeriod(begin, duration);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(int index, LocalTime begin) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(index, begin, (LocalTime) this.getEnd(index));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(int index, LocalTime end) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(index, (LocalTime) this.getBegin(index), end);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(int index, DayOfWeek dayOfWeek) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getPeriod(index).setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek(int index) throws ModInvalidIndexException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod(index).getDayOfWeek();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get DayOfWeek object from String."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek input dayOfWeek"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return corresponding dayOfWeek object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimeException if input dayOfWeek is invalid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static DayOfWeek getDayOfWeek(String dayOfWeek) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return DayOfWeek.valueOf(dayOfWeek.toUpperCase());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    //@@author e0313687"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public boolean happensOnThisDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.getDaysOfWeek().contains(dayOfWeek);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns a sorted list of this task\u0027s time period of the given day."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param dayOfWeek The day of the week"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return a sorted list of this task\u0027s time period of the given day"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public List\u003cTimePeriodWeekly\u003e getTimePeriodOfTheDay(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e timePeriods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e list \u003d this.getPeriods();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TimePeriodWeekly item : list) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            //loop through all the periods, see which period falls under that day"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (dayOfWeek.equals(item.getDayOfWeek())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                timePeriods.add(item);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        timePeriods.sort(Comparator.comparing(TimePeriodWeekly::getBegin));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        //with the current infrastructure I can only loop through, advise to write a helper function"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return timePeriods;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns a string describing task on the give dayOfWeek."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String onWeekDayToString(DayOfWeek day) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        List\u003cTimePeriodWeekly\u003e list \u003d this.getTimePeriodOfTheDay(day);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 100,
      "e0313687": 33
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class TaskWithPeriod extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithPeriod(String task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.getPeriod());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getBeginTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getEndTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getBegin() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getBegin();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal getEnd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getEnd();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public abstract TimePeriod getPeriod();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().getDaysOfWeek();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cT extends TemporalAccessor\u003e boolean isClashing(T other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().isClashing(other);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TaskWithPeriod\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(other.getPeriod());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TimePeriod\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getPeriod().isClashing(other);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 56
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithSpanningPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithSpanningPeriod extends TaskWithPeriod {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimePeriodSpanning period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, LocalDateTime begin, LocalDateTime end)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning(begin, end);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, LocalDateTime begin, TimeInterval duration)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning(begin, duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task, TimePeriodSpanning period) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithSpanningPeriod(String task) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodSpanning();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, (LocalDateTime) this.getEnd());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod((LocalDateTime) this.getBegin(), end);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (LocalDateTime) ((this.getBegin() !\u003d null) ? this.getBegin() : this.getEnd());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getBeginDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ((LocalDateTime) this.getBegin()).toLocalDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ((LocalDateTime) this.getEnd()).toLocalDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning getPeriod() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(localDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(begin, end);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 77
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithWeeklyPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithWeeklyPeriod extends TaskWithPeriod {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimePeriodWeekly period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, TimePeriodWeekly period) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithWeeklyPeriod(String task, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period \u003d new TimePeriodWeekly(dayOfWeek);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, end);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, TimeInterval duration) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalTime begin) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, (LocalTime) this.getEnd());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalTime end) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod((LocalTime) this.getBegin(), end);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.period.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (LocalTime) ((this.getBegin() !\u003d null) ? this.getBegin() : this.getEnd());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.getDayOfWeek();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly getPeriod() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(localTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.period.isClashing(begin, end);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 75
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/legacy/task/TaskWithoutTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.modules.legacy.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskWithoutTime extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskWithoutTime(String task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 10
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/Attributes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Attributes {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean su \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean sfs \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean ssgf \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fyp \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean year \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean coreMod \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean geMod \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean ueMod \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Attributes() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isSu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return su;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean isFyp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return fyp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String convertSu() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return (su ? \" can S/U\" : \" cannot S/U\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"SU: \" + ((su) ? \"True\" : \"False\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 36
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ExamInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ExamInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int semester \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String examDate \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private int examDuration \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getExamDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getExamDuration() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return examDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"{Semester:\" + getSemester() + \", \" + getExamDate() + \" ,\" + getExamDuration() + \"}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 27
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleInfoDetailed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadGradeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadSuException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoDetailed {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String description \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String moduleCredit \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String department \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String faculty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String preclusion \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String prerequisite \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Attributes attributes \u003d new Attributes();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String grade \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ExamInfo[] semesterData \u003d new ExamInfo[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String[] semester \u003d {\"\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ArrayList\u003cString\u003e validGrades \u003d new ArrayList\u003c\u003e(Arrays.asList(\"A+\", \"A\", \"A-\", \"B+\", \"B\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        \"B-\", \"C+\", \"C\", \"D+\", \"D\", \"F\", \"S\", \"U\", \"CS\", \"CU\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Double getModuleCredit() throws NumberFormatException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return Double.parseDouble(moduleCredit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getPrerequisites() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Attributes getAttributes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ExamInfo[] getSemesterData() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semesterData;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String[] getSemester() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //@@author andrewleow97"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setModuleCredit(String moduleCredit) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    //@@author e0313687"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return moduleCode.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //@@author andrewleow97"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Checks if module is S/U-able, and assigns grade based on String score."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setGrade(String score) throws ModBadGradeException, ModBadSuException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (score.equalsIgnoreCase(\"S\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ||"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            score.equalsIgnoreCase(\"U\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ||"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            score.equalsIgnoreCase(\"CS\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            score.equalsIgnoreCase(\"CU\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (this.attributes.isSu()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                this.grade \u003d score;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new ModBadSuException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else if (!this.validGrades.contains(score)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new ModBadGradeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            this.grade \u003d score;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"ModuleCode:\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getModuleCode()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", MC:\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getModuleCredit()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", SU:\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getAttributes().convertSu()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \", grade:\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + getGrade();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 41,
      "namiwa": 72,
      "e0313687": 9
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadGradeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadSuException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.datetime.NattyWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.legacy.periods.TimePeriodWeekly;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleTask extends TaskWithMultipleWeeklyPeriod {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleInfoDetailed moduleInfoDetailed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleTask(String code, ModuleInfoDetailed moduleInfoDetailed) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(code);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.moduleInfoDetailed \u003d moduleInfoDetailed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    //@@author e0313687"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Constructor for ModuleTask when users wants to input the time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param code The Module Code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param moduleInfoDetailed The detailed information of the module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param beginString begin time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param endString end time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param dayOfWeek day of the week when the module takes place"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws ModInvalidTimeException when input time is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public ModuleTask(String code, ModuleInfoDetailed moduleInfoDetailed,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                      String beginString, String endString, String dayOfWeek) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(code, TaskWithMultipleWeeklyPeriod.getDayOfWeek(dayOfWeek));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.moduleInfoDetailed \u003d moduleInfoDetailed;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        LocalTime begin \u003d natty.dateToLocalDateTime(beginString).toLocalTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        LocalTime end \u003d natty.dateToLocalDateTime(endString).toLocalTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            this.setPeriod(0, begin, end);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (ModException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    //@@author namiwa"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed.getModuleCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Double getModuleCredit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed.getModuleCredit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed.getModuleLevel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleInfoDetailed getModuleInfoDetailed() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getPrerequisites() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed.getPrerequisites();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return moduleInfoDetailed.getGrade();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    //@@author andrewleow97"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setGrade(String letterGrade) throws ModBadSuException, ModBadGradeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        moduleInfoDetailed.setGrade(letterGrade);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    //@@author e0313687"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Returns the grades as a number for sorting."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return the number allocated for the grade."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public int getGradeAsNumbers() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        switch (moduleInfoDetailed.getGrade()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A+\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"A-\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B+\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 4;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"B-\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 5;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"C+\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 6;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"C\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 7;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"D+\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 8;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 9;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 10;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"S\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 11;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"U\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 12;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return 20;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(super.toString() + \" | \" + moduleInfoDetailed.toString() + \" | \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[HH:mm]\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (this.getPeriods() !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            for (TimePeriodWeekly period: this.getPeriods()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                prefix.append(period.getBeginTime().format(formatter))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(\" - \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(period.getEndTime()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                                .format(formatter)).append(\" on \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(period.getDayOfWeek())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return prefix.toString().substring(0, prefix.length() - 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String type() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"module\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 5,
      "namiwa": 49,
      "e0313687": 84
    }
  },
  {
    "path": "src/main/java/planner/logic/modules/module/ModuleTasksList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleTasksList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Task list where active tasks are stored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cModuleTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public ModuleTasksList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns list of tasks which have the search"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * keyword included in their task name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Parsed keyword of the task name to be searched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Returns the taskList where each task contains the search keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleTask\u003e find(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (ModuleTask hold : tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (hold.getName().contains(input)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                temp.add(hold);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns all modules added to the moduleTaskList as a set."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashSet of ModuleTask."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashSet\u003cModuleTask\u003e getSetModuleTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new HashSet\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setTasks(List\u003cModuleTask\u003e tasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cModuleTask\u003e getTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void clearAll() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 68
    }
  },
  {
    "path": "src/main/java/planner/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.ArgumentParsers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import net.sourceforge.argparse4j.impl.action.StoreTrueArgumentAction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentAction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Namespace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Subparser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Subparsers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.AddCcaScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.Arguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.CapCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.EndCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.GradeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.RemoveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.SearchThenAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.UpdateModuleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.parser.action.Join;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentParser parser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparsers subParserManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cString, Subparser\u003e subParsers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private HashMap\u003cString, Class\u003c? extends ModuleCommand\u003e\u003e commandMapper;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentAction joinString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for parser."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.parser \u003d ArgumentParsers.newFor(\"ModPlan\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .defaultHelp(true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .description(\"ModPlan Argument Parser\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .version(\"1.0\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Map CLI commands to respective ModuleCommand classes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // Add new command types here"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void mapBuiltinCommands() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"add\", SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"show\", ShowCommand.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"bye\", EndCommand.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"remove\", RemoveCommand.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"scheduleCca\", AddCcaScheduleCommand.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"clear\", ClearCommand.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"sort\", SortCommand.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"cap\", CapCommand.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mapCommand(\"grade\", GradeCommand.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        mapCommand(\"update\", UpdateModuleCommand.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        mapCommand(\"reminder\", ReminderCommand.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //mapCommand(\"passwd\", SetPasswordCommand.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add arguments for respective sub-parsers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // Add arguments for parsers here"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void mapBuiltinParserArguments() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparsers addParsers \u003d getSubParser(\"add\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add a module or cca\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addSubparsers()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .dest(\"toAdd\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"add command options\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Subparser addParser \u003d addParsers.addParser(\"module\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Add a module\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"moduleCode\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Codename of module to add\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                //.required(true)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Day of week on which the module takes place\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparser addCcaParser \u003d addParsers.addParser(\"cca\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add a cca\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"name\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Name of cca\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addCcaParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Day of week on which cca takes place\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        getSubParser(\"show\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Show infos about your timetable\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .addArgument(\"toShow\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"module\", \"core\", \"ge\", \"ue\", \"cca\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to show\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        getSubParser(\"bye\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Exit ModPlan\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Subparser removeParser \u003d getSubParser(\"remove\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Remove a module or cca\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        removeParser.addArgument(\"toRemove\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"module\", \"cca\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to remove\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        removeParser.addArgument(\"index\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .type(int.class)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Index to remove\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparser scheduleCcaParser \u003d getSubParser(\"scheduleCca\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Add schedule to a CCA\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"index\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .type(Integer.class)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Index of cca to schedule\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--begin\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Begin time\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--end\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .action(this.joinString)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"End time\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scheduleCcaParser.addArgument(\"--dayOfWeek\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .required(true)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Day of week on which cca takes place\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"clear\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Clear your data as specified\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"toClear\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .choices(\"module\", \"cca\", \"data\", \"password\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to clear\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Subparsers sortParsers \u003d getSubParser(\"sort\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Sort your modules and/or ccas in the order you desire\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addSubparsers()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .dest(\"toSort\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to sort\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Subparser module \u003d sortParsers.addParser(\"module\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Sort your modules\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        module.addArgument(\"type\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .choices(\"code\", \"grade\", \"level\", \"mc\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"What to use for sorting\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        module.addArgument(\"--r\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(new StoreTrueArgumentAction())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .setDefault(false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Subparser cca \u003d sortParsers.addParser(\"cca\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Sort your CCAs\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        cca.addArgument(\"--r\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(new StoreTrueArgumentAction())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .setDefault(false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Subparser time \u003d sortParsers.addParser(\"time\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Sort your modules and ccas to days of the week\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        time.addArgument(\"DayOfTheWeek\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .choices(\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .help(\"Day of the week\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        time.addArgument(\"--r\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .action(new StoreTrueArgumentAction())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                .setDefault(false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"cap\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                .help(\"Calculate your CAP from your input or list\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addArgument(\"toCap\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                .choices(\"overall\", \"list\", \"module\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                .help(\"What type of CAP to calculate\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        Subparser gradeParser \u003d getSubParser(\"grade\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .help(\"Enter your grades and let me calculate your GPA for you!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        gradeParser.addArgument(\"moduleCode\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .help(\"Codename of module to grade\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        gradeParser.addArgument(\"letterGrade\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            .help(\"Grade you achieved for this module\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getSubParser(\"update\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"Updates local module data file\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .addArgument(\"moduleDataUpdate\")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .choices(\"module\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .help(\"\\\"module\\\" is the only valid keyword!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        getSubParser(\"reminder\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .help(\"Setting reminders\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .addArgument(\"toReminder\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .choices(\"list\", \"one\", \"two\", \"three\", \"four\", \"stop\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                .help(\"When do you want to set the reminder again\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //getSubParser(\"passwd\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //        .help(\"Set or update your password\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //        .addArgument(\"password\")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //        .help(\"New password\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void initBuiltinActions() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.joinString \u003d new Join();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize sub-parsers and command mappers."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParserManager \u003d this.parser.addSubparsers();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParsers \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.commandMapper \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initBuiltinActions();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.mapBuiltinCommands();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initBuiltinParsers();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.mapBuiltinParserArguments();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Map CLI commands to sub-parsers."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void initBuiltinParsers() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (String command: this.commandMapper.keySet()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.addParser(command);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void mapCommand(String command, Class\u003c? extends ModuleCommand\u003e type) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.commandMapper.put(command, type);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Add a custom sub-parser."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param name name of sub-parser"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param addHelp add help or not"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param prefixChars prefix character to distinguish arguments"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return added sub-parser"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name, boolean addHelp, String prefixChars) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.subParsers.put(name,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.subParserManager"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .addParser(name, addHelp, prefixChars)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .setDefault(\"command\", name));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getSubParser(name);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name, boolean addHelp) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.addParser(name, addHelp, \"--\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser addParser(String name) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.addParser(name, true);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArgumentParser getParser() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parser;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Subparser getSubParser(String subParserName) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.subParsers.get(subParserName);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param args input \"words\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed Namespace if input is valid else null"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String[] args) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getParser().parseArgs(args);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ArgumentParserException ex) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.handleError(ex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String userInput) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parse(userInput.split(\" +\"));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input using a sub-parser."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param args input \"words\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed Namespace if input is valid else null"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String subParserName, String[] args) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.getSubParser(subParserName).parseArgs(args);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ArgumentParserException ex) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.handleError(subParserName, ex);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Namespace parse(String subParserName, String userInput) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.parse(subParserName, userInput.split(\" +\"));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleError(ArgumentParserException ex) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.parser.handleError(ex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleError(String subParserName, ArgumentParserException ex) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.getSubParser(subParserName).handleError(ex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Invoke a module command."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param commandClass command class to invoke"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param argumentsClasses corresponding classes of arguments"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param objects corresponding arguments"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return ModuleCommand if input is valid else null"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ModuleCommand invokeCommand(Class\u003c? extends ModuleCommand\u003e commandClass,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                        Class[] argumentsClasses,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                        Object[] objects) throws ModException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return commandClass.getConstructor(argumentsClasses).newInstance(objects);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (InvocationTargetException ex) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (ex.getCause() instanceof ModException) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw (ModException) ex.getCause();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Throwable ex) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ex);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Parse input to ModuleCommand."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param userInput input String"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return parsed ModuleCommand if input is valid else null"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ModuleCommand parseCommand(String userInput) throws ModException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Namespace parsedInput \u003d this.parse(userInput);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (parsedInput !\u003d null) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String command \u003d parsedInput.get(\"command\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Class\u003c? extends ModuleCommand\u003e commandClass \u003d this.commandMapper.get(command);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (parsedInput.getAttrs().size() \u003e 1) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return this.invokeCommand(commandClass,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                          new Class[]{Arguments.class},"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                          new Arguments[]{new Arguments(parsedInput.getAttrs())});"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return this.invokeCommand(commandClass, null, null);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 291,
      "andrewleow97": 10,
      "namiwa": 29,
      "kyawtsan99": 7,
      "e0313687": 42
    }
  },
  {
    "path": "src/main/java/planner/logic/parser/action/Join.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.parser.action;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentAction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Join implements ArgumentAction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run(ArgumentParser parser, Argument arg, Map\u003cString, Object\u003e attrs, String flag, Object value) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (value instanceof Iterable) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            attrs.put(arg.getDest(), String.join(\" \", (Iterable) value));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void onAttach(Argument arg) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean consumeArgument() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 28
    }
  },
  {
    "path": "src/main/java/planner/main/CliLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.EndCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.ModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.gui.MainWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class CliLauncher {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Classes used for storage of data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Ui output and inputs and current"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * active tasks in TaskList and reminder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Parser argparser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private PlannerUi modUi;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private User profile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static List\u003cTimer\u003e timerPool \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean isAlive;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for Planner class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CliLauncher(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modUi \u003d new PlannerUi(mainWindow);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        isAlive \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public CliLauncher() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setup data files for module data and logging."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            modDetailedMap \u003d jsonWrapper.getModuleDetailedMap(true, store);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            // modTasks.setTasks(jsonWrapper.readJsonTaskList(store));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            //modTasks.setTasks(jsonWrapper.readJsonTaskList(store));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            profile \u003d User.loadProfile(modDetailedMap, modUi, store, jsonWrapper);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            profile.setCcas(jsonWrapper.readJsonCcaList(store));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            profile.setSemester(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.setLogFile(store);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModFailedJsonException ej) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ej.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ej);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException eio) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            eio.getStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(eio);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Run Planner."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modUi.helloMsg();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (isAlive) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            isAlive \u003d this.handleInput();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modUi.updateGui();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Handle user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return false if EndCommand is reached, else true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean handleInput() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String input \u003d modUi.readInput();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ModuleCommand c \u003d argparser.parseCommand(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (c !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                c.call(modDetailedMap, modUi, store, jsonWrapper, profile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (c instanceof EndCommand) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            modUi.println(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            modUi.showLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isAlive() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return isAlive;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main entry point for Duke."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param args Additional command line parameters, unused."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        User.restoreDefaultPath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //TODO: args flag could be passed into program for optional runs"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        CliLauncher planner \u003d new CliLauncher();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        planner.setup();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        planner.run();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 50,
      "andrewleow97": 6,
      "namiwa": 65,
      "kyawtsan99": 4
    }
  },
  {
    "path": "src/main/java/planner/main/GuiLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.gui.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class GuiLauncher {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 15
    }
  },
  {
    "path": "src/main/java/planner/ui/cli/PlannerUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.gui.MainWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Mod Planner based on morphed implementation of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerUi {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Set\u003cString\u003e yes \u003d new HashSet\u003c\u003e(Arrays.asList(\"y\",\"yes\", \"true\", \"1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                                                 \"confirm\", \"t\", \"yup\", \"yeah\", \"positive\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Set\u003cString\u003e no \u003d new HashSet\u003c\u003e(Arrays.asList(\"n\", \"no\", \"false\", \"0\", \"f\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                                                                \"nope\", \"nah\", \"negative\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private InputStream inputStream;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Default constructor for Ui."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param window gui window"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public PlannerUi(MainWindow window) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInput(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setOutput(System.out, System.err);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        mainWindow \u003d window;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        setupGui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public PlannerUi() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Print Object to String."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object to be printed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param update whether to update GUI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void print(Object object, boolean update) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.print(object.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (update) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            updateGui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void print(Object object) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        print(object, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void close() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Println Object to String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object to be printed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param update whether to update GUI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void println(Object object, boolean update) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(object.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (update) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            updateGui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void println(Object object) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(object, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Printf."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param s format to be printed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param args arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param update whether to update GUI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void printf(boolean update, String s, Object... args) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.printf(s, args);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (update) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            updateGui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void printf(String s, Object... args) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        printf(false, s, args);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void setupGui() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (mainWindow !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            setInput(mainWindow.getInput());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            setOutput(mainWindow.getOutput(), mainWindow.getOutput());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Update GUI dialog."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void updateGui() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (mainWindow !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            mainWindow.addModPlanDialog();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Show LINE, hidden in GUI mode."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (mainWindow \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(LINE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            updateGui();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInput(InputStream inputStream) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.inputStream \u003d inputStream;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set output stream and error stream."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param outStream output stream"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param errStream error stream"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setOutput(PrintStream outStream, PrintStream errStream) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setOut(outStream);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setErr(errStream);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setOutput(ByteArrayOutputStream output, ByteArrayOutputStream error) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setOutput(new PrintStream(output), new PrintStream(error));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setOut(PrintStream stream) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.setOut(stream);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setOut(ByteArrayOutputStream output) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setErr(PrintStream stream) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.setErr(stream);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setErr(ByteArrayOutputStream error) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setErr(new PrintStream(error));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return readInput(inputStream);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Read input from custom stream."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param stream stream to read from"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return input by line"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readInput(InputStream stream) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (stream \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            StringBuilder input \u003d new StringBuilder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (char c \u003d (char) stream.read();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                 c !\u003d \u0027\\n\u0027 \u0026\u0026 c !\u003d \u0027\\uFFFF\u0027;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                 c \u003d (char) stream.read()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                if (c !\u003d \u0027\\r\u0027) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                    input.append(c);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return input.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readPassword() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.readInput(); // No good way to do this yet"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Confirm user\u0027s action."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message message to display"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if user confirms else false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean confirm(String message) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (message !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(message);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (result) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String input \u003d this.readInput();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (yes.contains(input)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else if (no.contains(input)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                result \u003d false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.println(\"Please enter a valid response!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean confirm() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return confirm(null);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt user for input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message message to display to user beforehand"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param allowEmpty whether to allow empty input"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param secure whether to display user input"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String prompt(String message, boolean allowEmpty, boolean secure) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.println(message);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (secure) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.readPassword();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.readInput();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!allowEmpty \u0026\u0026 input.isBlank()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            input \u003d this.invalidResponsePrompt(false, secure);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String prompt(String message) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(message, false, false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int yearPrompt() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(\"Please enter your current year (i.e. 1, 2, ...):\", 1, 2, 3, 4, 5);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int semesterPrompt() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(\"Please enter your current semester (1 or 2):\", 1, 2);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(message, (List\u003cInteger\u003e) null);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message, Integer... validOptions) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.intPrompt(message, Arrays.asList(validOptions));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Prompt user for integer input."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param message message to display beforehand"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param validOptions valid input numbers"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return input integer"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int intPrompt(String message, List\u003cInteger\u003e validOptions) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String number \u003d this.prompt(message);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                int result \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (validOptions \u003d\u003d null || validOptions.contains(result)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                number \u003d this.invalidResponsePrompt();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String invalidResponsePrompt() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.invalidResponsePrompt(false, false);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String invalidResponsePrompt(boolean allowEmpty, boolean secure) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"Invalid response, please try again!\", allowEmpty, secure);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String loginPrompt() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        return this.prompt(\"Please login to continue! Enter \u0027login\u0027 to login\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                + \"Not registered? Just enter \u0027register\u0027 and I will help you setup!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String userExistPrompt() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"That username is taken, please try something else!\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String noSuchUserPrompt() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.prompt(\"Username not found, please try again!\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearedMsg(String type) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Done! Your \" + type + \" have been cleared\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void abortMsg() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Aborted! No actions were taken\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Helper function to print any object."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object to be printed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void showObject(Object object) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(object);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Added Message for new task."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void addedMsg(Task task) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Got it, added the follow \" + task.type() + \"!\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showObject(task);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Delete Message for task."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param task Task to be deleted."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void deleteMsg(Task task) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Got it, \" + task.type() + \" will be deleted\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        showObject(task);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void listMsg() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"All modules in the list!\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void listCcaMsg() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"All ccas in the list!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Start up message upon running mod planner."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void helloMsg() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        print("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        );"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Ending message upon termination."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void goodbyeMsg() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        print("
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                 + \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        );"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message shown when clearing list."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearMsg(String toClear) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Are you sure you want to clear your \" + toClear + \"?\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message shown at start of CapCommand."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capStartMsg() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println("
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Start typing the module you have taken, along with it\u0027s letter grade\\n\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            + \"Type \u0027done\u0027 when you are ready to calculate your CAP\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Requests input from user for which module to calculate CAP for."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModStartMsg() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Type the module code that you want to predict your CAP for: \");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints the module task list with which to calculate CAP from."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void capListStartMsg(TaskList\u003cModuleTask\u003e moduleTasksList) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Here is your list of modules to calculate CAP from\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (ModuleTask temp : moduleTasksList) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            print(counter++ + \" \");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            showObject(temp);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * When none of the modules in the ModuleTaskList are graded."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capListErrorMsg() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Please input grades into your listed modules using the grade command\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message to print average CAP to 2 decimal places."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capMsg(double averageCap) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Here is your current cumulative/predicted CAP\", false);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        printf(\"%.2f\\n\", averageCap);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints predicted CAP for a module based on its prerequisites."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModMsg(double predictedCap, String moduleCode) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Here is your predicted CAP for \""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            moduleCode"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \" based on the modules you have taken.\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        printf(\"%.2f\\n\", predictedCap);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints the list of modules that have not been graded/taken for prerequisite of another module."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capModuleIncompleteMsg(List\u003cString\u003e toCalculate) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Please complete any/all of the following prerequisite modules and add them to your list: \");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (i \u003c toCalculate.size()) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(toCalculate.get(i));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        println(\"If you have completed any of the above modules preclusions/co-requisites/equivalents,\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                \"please add the above modules to your module list with the same grade you obtained and try again.\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Message to feedback to user that their grading has been added."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void gradedMsg(String moduleCode, String letterGrade) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Got it, graded \" + moduleCode + \" with grade: \" + letterGrade);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Message to print the sorted module list."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void sortMsg(String toSort) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Here are your sorted \""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            toSort"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \":\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Sorts by the order the user indicates and prints to the users."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void showSorted(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Object object : list) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(object);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Prints activities on the given dayOfWeek."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showSortedTimes(List\u003cTaskWithMultipleWeeklyPeriod\u003e list, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (TaskWithMultipleWeeklyPeriod task : list) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String taskNameAndPeriods \u003d task.getName() + task.onWeekDayToString(dayOfWeek);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(taskNameAndPeriods);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints all tasks in upcomingTasksList."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * @param upcomingTasksList contains all upcoming tasks."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void printUpcomingTasks(List\u003cTask\u003e upcomingTasksList) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        if (upcomingTasksList.size() \u003e 0) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(LINE"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                \"You have \""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                upcomingTasksList.size()"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                \" upcoming tasks!\\nHere\u0027s the list:\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            this.printTaskList(upcomingTasksList);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(LINE);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Prints every item supplied in the taskList parameter."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * @param taskList to be printed to user."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private \u003cE extends Task\u003e void printTaskList(List\u003cE\u003e taskList) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            println(count + \". \" + temp);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void showUpdatedMsg() {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        println(\"Your module data files has been updated!\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    //@@author kyawtsan99"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out CoreModuleReport."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void coreModReport() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"Here is your list of core modules being added:\");"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of core modules left to take."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void coreModLeft() {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"\\n\""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of core modules required to take for graduation:\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out GEModuleReport."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void geModReport() {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"Here is your list of general education modules being added:\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of ge modules left to take."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void geModLeft() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"\\n\""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of general education modules required to take for graduation:\");"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out UEModuleReport."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void ueModReport() {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"Here is your list of unrestricted elective modules being added:\");"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print out the number of ue modules left to take."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void ueModLeft() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"\\n\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of unrestricted elective modules required to take for graduation:\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print the reminder message."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderMsg() {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"update module\");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Message to print the list of reminder options."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderList() {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        println(\"Would you like to set your reminder to every:\\n\""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"1) for 10 seconds\\n\""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"2) for 30 seconds\\n\""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"3) for 1 minute\\n\""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"4) for 2 minutes\\n\""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                            \"*helpline* : for 1), enter \u0027reminder one\u0027\");"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 322,
      "andrewleow97": 78,
      "namiwa": 67,
      "kyawtsan99": 119,
      "e0313687": 25
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get Duke\u0027s response DialogBox."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param text Duke\u0027s response"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param img Duke\u0027s image"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return DialogBox for Duke\u0027s response"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static DialogBox getModPlanDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 70
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CliLauncher planner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            planner \u003d new CliLauncher(mainWindow);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            mainWindow.setPlanner(planner);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            planner.setup();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Task task \u003d new Task\u003cVoid\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                public Void call() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    planner.run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            new Thread(task).start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            e.getCause().getCause().printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 47
    }
  },
  {
    "path": "src/main/java/planner/ui/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.ui.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.concurrent.LinkedBlockingQueue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CliLauncher planner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LinkedBlockingQueue\u003cCharacter\u003e inputQueue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LinkedBlockingQueue\u003cCharacter\u003e outputHold;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private PrintStream output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private InputStream input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final Image userImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final Image planImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setupStreams();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public InputStream getInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public PrintStream getOutput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize Planner."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param p given planner"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPlanner(CliLauncher p) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.planner \u003d p;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.inputQueue \u003d new LinkedBlockingQueue\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.outputHold \u003d new LinkedBlockingQueue\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void setupStreams() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        input \u003d new InputStream() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            public int read() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return inputQueue.take();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        output \u003d new PrintStream(new OutputStream() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            public void write(int i) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                outputHold.add((char) i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addUserDialog(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (char c: input.toCharArray()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            inputQueue.add(c);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        inputQueue.add(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String read(LinkedBlockingQueue\u003cCharacter\u003e queue) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (queue.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (char c \u003d queue.poll(); !queue.isEmpty(); c \u003d queue.poll()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            line.append(c);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return line.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Thread.sleep(1000);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Display ModPlan\u0027s output."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addModPlanDialog() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        addModPlanDialog(read(outputHold));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!planner.isAlive()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Display ModPlan\u0027s output."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param text to be displayed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addModPlanDialog(String text) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (text !\u003d null \u0026\u0026 !text.isBlank()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                dialogContainer.getChildren().add(DialogBox.getModPlanDialog(text, planImage));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Display user\u0027s input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param text to be displayed"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void addUserDialog(String text) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (text !\u003d null \u0026\u0026 !text.isBlank()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                dialogContainer.getChildren().add(DialogBox.getUserDialog(text, userImage));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 151
    }
  },
  {
    "path": "src/main/java/planner/util/PrintUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class PrintUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This class is to solve Intellij test does not run problem. will be removed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void printToFile(String content, String path) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Files.writeString(Path.of(\".\", path), content);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "e0313687": 16
    }
  },
  {
    "path": "src/main/java/planner/util/crawler/JsonWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.crawler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadRequestStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.PlannerLogger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class JsonWrapper {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private RequestData requestsData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listFile \u003d \"data/modsListData.json\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String listDetailedFile \u003d \"data/modsDetailedListData.json\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String userModuleFile \u003d \"data/userData.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String userCcaFile \u003d \"data/ccaListData.json\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String academicYear \u003d \"2019-2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public enum Requests {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        DETAILED, SUMMARY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for JsonWrapper to access module information."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public JsonWrapper() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        gson \u003d new Gson();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        requestsData \u003d new RequestData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private HashMap\u003cString, ModuleInfoDetailed\u003e getMapFromList(List\u003cModuleInfoDetailed\u003e modsList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HashMap\u003cString, ModuleInfoDetailed\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (ModuleInfoDetailed temp : modsList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String modCode \u003d temp.getModuleCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            ret.put(modCode, temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Updating detailed module list file in data folder."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic Year input by user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store Storage object to write files."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModBadRequestStatus If the user\u0027s status return from API call is not 200 (success)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void runRequests(String academicYear, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(Paths.get(listDetailedFile));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        requestsData.storeModData(requestsData.requestModuleListDetailed(academicYear), store);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Converts the stored json file into a list of ModuleInfoDetailed objects."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return a list of ModuleInfoDetailed objects, null if it fails to parse."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cModuleInfoDetailed\u003e getModuleListDetailedObject() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(listDetailedFile));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoDetailed\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function to generate runtime file from resources instead of query file from NUSMODS."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param set Flag to run code."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store Storage Object for file check."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashMap of Module code mapped to corresponding ModuleInfoDetailed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModFailedJsonException If the user\u0027s status return from API call is not 200 (success)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashMap\u003cString, ModuleInfoDetailed\u003e getModuleDetailedMap(boolean set, Storage store)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throws ModFailedJsonException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (set \u0026\u0026 store.getDataPathExists()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return getModuleDetailedMap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            InputStream in \u003d this.getClass().getResourceAsStream(\"/data/modsDetailedListData.json\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Type listType \u003d new TypeToken\u003cList\u003cModuleInfoDetailed\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(in, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cModuleInfoDetailed\u003e modsList \u003d gson.fromJson(inputStreamReader, listType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            return getMapFromList(modsList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main helper function to obtained HashMap of detailed info from modsDetailedListData.json."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HashMap with module code as the key and ModuleInfoSummary object as the value."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModFailedJsonException If the previous call to getModuleListObject() returns null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HashMap\u003cString, ModuleInfoDetailed\u003e getModuleDetailedMap() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleInfoDetailed\u003e modsList \u003d getModuleListDetailedObject();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (modsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModFailedJsonException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return getMapFromList(modsList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores the current state of the taskList into a json file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param tasksList List of module tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param store object which handles file storing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeTaskListAsJson(TaskList\u003cModuleTask\u003e tasksList, Storage store) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String jsonString \u003d gson.toJson(tasksList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e stringsList \u003d requestsData.getResponseList(jsonString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(Paths.get(userModuleFile));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeModsData(stringsList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores the current state of the ccaList into a json file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeCcaListAsJson(List\u003cCca\u003e ccaList, Storage store) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String jsonString \u003d gson.toJson(ccaList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e stringsList \u003d requestsData.getResponseList(jsonString);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(Paths.get(userCcaFile));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeModsData(stringsList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns taskList after reading json file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return List of tasks of the read was successful, null if otherwise."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TaskList\u003cModuleTask\u003e readJsonTaskList(Storage store) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.setDataPath(Paths.get(userModuleFile));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                JsonReader reader \u003d new JsonReader(new FileReader(userModuleFile));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Type listType \u003d new TypeToken\u003cTaskList\u003e() {}.getType();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Returns ccaList after reading json file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return List of ccas of the read was successful, null if otherwise."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public TaskList\u003cCca\u003e readJsonCcaList(Storage store) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.setDataPath(Paths.get(userCcaFile));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (store.getDataPathExists()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                JsonReader reader \u003d new JsonReader(new FileReader(userCcaFile));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                Type listType \u003d new TypeToken\u003cTaskList\u003e() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }.getType();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                return gson.fromJson(reader, listType);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(e);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException ei) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ei.getStackTrace()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            PlannerLogger.log(ei);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 195
    }
  },
  {
    "path": "src/main/java/planner/util/crawler/RequestData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.crawler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModBadRequestStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class RequestData {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public RequestData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param mod Module of interest to be queried."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModule(String mod) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String upperMod \u003d mod.trim().toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/2019-2020/modules/\" + upperMod + \".json\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call summary module data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleList(String academicYear) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleList.json\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Request builder for API call detailed module data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param academicYear Academic year of interest"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return HttpRequest formatted with the nusMods API call."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public HttpRequest requestModuleListDetailed(String academicYear) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .uri(URI.create(\"https://api.nusmods.com/v2/\" + academicYear + \"/moduleInfo.json\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .timeout(Duration.ofSeconds(2))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * HttpRequest with reference from :https://openjdk.java.net/groups/net/httpclient/intro.html."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Using the nusMods V2 API : https://api.nusmods.com/v2/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Stores requests made into *.json files for further processing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void storeModData(HttpRequest request, Storage store) throws ModBadRequestStatus {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        // Api calls only work with upper case module code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        HttpClient client \u003d HttpClient.newHttpClient();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // Response.body() contains the returned module info as JSON string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            HttpResponse\u003cString\u003e response \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    client.send(request, HttpResponse.BodyHandlers.ofString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            // If return status is not 200, and error request has been made"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (response.statusCode() !\u003d 200) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModBadRequestStatus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e responseList \u003d getResponseList(response.body());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.writeModsData(responseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(Arrays.toString(ie.getStackTrace()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Formats a string to list of strings based on new line character."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param responseBody String containing response from HttpRequest."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return A list of string, separated by new line characters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cString\u003e getResponseList(String responseBody) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] test \u003d responseBody.split(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e ret \u003d new ArrayList\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Collections.addAll(ret, test);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 101
    }
  },
  {
    "path": "src/main/java/planner/util/cryptography/CryptographyUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.cryptography.Hasher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.spec.SecretKeySpec;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.Key;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CryptographyUtils {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Hasher hasher \u003d new Hasher();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert byte array to hex String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param bytes input byte array"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return hex String representation of input byte array"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String byteArrayToHexString(byte[] bytes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        BigInteger number \u003d new BigInteger(1, bytes);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        StringBuilder hexString \u003d new StringBuilder(number.toString(16));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (hexString.length() \u003c 32) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            hexString.insert(0, \u00270\u0027);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return hexString.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert hex String to byte array."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hex input hex String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return byte array representation of input hex String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static byte[] hexStringToByteArray(String hex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int len \u003d hex.length();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] data \u003d new byte[len \u003e\u003e 1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i +\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            data[i \u003e\u003e 1] \u003d (byte) ((Character.digit(hex.charAt(i), 16) \u003c\u003c 4)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    + Character.digit(hex.charAt(i + 1), 16));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Key toKey(byte[] key, String algorithm) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new SecretKeySpec(key, 0, key.length, algorithm);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Key toKey(String key, String algorithm) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return CryptographyUtils.toKey(key.getBytes(StandardCharsets.UTF_8), algorithm);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check if message was tampered or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param messageWithHash decoded message with hash value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hashLength length of hash"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if not tampered else false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static boolean isOriginal(byte[] messageWithHash, int hashLength) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return Arrays.equals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                CryptographyUtils.hasher.getHash("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Arrays.copyOf(messageWithHash, messageWithHash.length - hashLength)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                Arrays.copyOfRange(messageWithHash, messageWithHash.length - hashLength, messageWithHash.length));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Remove trailing hash from message."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param messageWithHash message with hash"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param hashLength length of hash"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return original message"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String removeTrailingHash(byte[] messageWithHash, int hashLength) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new String(Arrays.copyOf(messageWithHash, messageWithHash.length - hashLength),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 77
    }
  },
  {
    "path": "src/main/java/planner/util/datetime/NattyWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyWrapper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Single instantiation of Natty Parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to reduce start up impact."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Parser nattyParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Constructor for wrapper class for Natty Library for date parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public NattyWrapper() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        //to speed parsing, introducing a dummy initialize case"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        nattyParser.parse(\"the day after tomorrow\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main parser for Natty library, with reference to sample code below."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * https://www.programcreek.com/java-api-examples/?api\u003dcom.joestelmach.natty.Parser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User date input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Date of the user input if valid, null if invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Date runParser(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDateGroup\u003e groups \u003d nattyParser.parse(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (groups.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cDate\u003e dates \u003d groups.get(0).getDates();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Main entry for LocalDateTime conversion."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input User input of date/time information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Valid time based on user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs an invalid date/time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public LocalDateTime dateToLocalDateTime(String input) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Date date \u003d runParser(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 62
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/datetime/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DateTime\u003cE extends Temporal\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private E temporal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DateTime(E temporal) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.temporal \u003d temporal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public E value() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.temporal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static LocalDateTime now() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 23
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/datetime/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parser for date with or without time inputs for deadline and event tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateAndTime Date and time portion of the user input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return LocalDateTime parsed based on the user input format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws ModInvalidTimeException if user inputs a date format that is not supported by Planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static LocalDateTime getStringToDate(String dateAndTime) throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean am \u003d dateAndTime.contains(\"am\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean pm \u003d dateAndTime.contains(\"pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am \u0026\u0026 pm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        dateAndTime \u003d dateAndTime.trim()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" */ *\", \"/\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *: *\", \":\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *- *\", \"-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                .replaceAll(\" *am *| *pm *\", \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e dateFormatStrings \u003d Arrays.asList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd-MM-yyyy\", \"dd/MM/yyyy\", \"dd-MMM-yyyy\", \"dd/MMM/yyyy\", \"d/MM/yyyy\", \"d-MM-yyyy\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"dd MMM yyyy\", \"d MMM yyyy\", \"dd/M/yyyy\", \"dd-M-yyyy\", \"d-M-y\", \"d/M/y\", \"d/M\", \"d-M\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"M/d\", \"M-d\", \"M/y\", \"M-y\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e hourFormatStrings \u003d Arrays.asList(\"HH:mm\", \"HH:mm:ss\", \"H\", \"HH\", \"H:mm\", \"H:m\", \"HH:m\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d getLocalDateTime(dateFormatStrings, hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d getLocalDateTimeHourOnly(hourFormatStrings, dateAndTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (am || pm) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (localDateTime.getHour() \u003e 12) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new ModInvalidTimeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pm) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d localDateTime.plusHours(12);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static LocalDateTime getLocalDateTimeHourOnly(List\u003cString\u003e hourFormatStrings, String dateAndTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter fmt \u003d getFormatter(\"\", hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d LocalDateTime.of(currentDate, LocalTime.parse(\" \" + dateAndTime, fmt));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static LocalDateTime getLocalDateTime("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e dateFormatStrings,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            List\u003cString\u003e hourFormatStrings,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String dateAndTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c dateFormatStrings.size(); ++i) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c hourFormatStrings.size(); ++j) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (localDateTime !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    DateTimeFormatter fmt \u003d getFormatter(dateFormatStrings.get(i), hourFormatStrings.get(j));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    localDateTime \u003d LocalDateTime.parse(dateAndTime, fmt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static DateTimeFormatter getFormatter(String dateFormat, String hourFormat) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" \" + hourFormat).optionalEnd()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" HHmm\").optionalEnd()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hmm\").optionalEnd()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .optionalStart().appendPattern(\" hm\").optionalEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2,
      "namiwa": 16,
      "-": 90
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimeInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.UnsupportedTemporalTypeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimeInterval implements TemporalAmount, Serializable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Period dateDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Duration timeDuration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final double daysInYear \u003d 365.2422;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final int secondsInDay \u003d 86400;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static final TimeInterval ZERO \u003d new TimeInterval();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(dateDuration, timeDuration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(timePeriod);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(TemporalAmount temporalAmount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(temporalAmount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(begin, end);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Period dateDuration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval(Duration timeDuration) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(Period.ZERO, Duration.ZERO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void adjustDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration newTimeDuration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.plusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.plusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.minusDays(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (newTimeDuration \u003d this.timeDuration.minusSeconds(TimeInterval.secondsInDay);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             !newTimeDuration.isNegative();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             newTimeDuration \u003d newTimeDuration.minusSeconds(TimeInterval.secondsInDay)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.dateDuration \u003d this.dateDuration.plusDays(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.timeDuration \u003d newTimeDuration;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period getDateDuration() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.dateDuration;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration getTimeDuration() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.adjustDateTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDateDuration(Period dateDuration) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTimeDuration(Duration timeDuration) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimeInterval timeInterval) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d timeInterval.dateDuration;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeInterval.timeDuration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TimePeriod timePeriod) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Duration.between(timePeriod.getBegin(), timePeriod.getEnd()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(TimeInterval.between(begin, end));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(TemporalAmount temporalAmount) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Duration.from(temporalAmount));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Duration timeDuration) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setInterval(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setInterval(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dateDuration \u003d dateDuration;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.timeDuration \u003d timeDuration;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Period toPeriod() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getDateDuration();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert the time stored in this object to an equivalent Duration object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a Duration object which represent the total time with seconds"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Duration toDuration() { // Estimate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double daysToAdd \u003d TimeInterval.daysInYear * this.dateDuration.getYears()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + TimeInterval.daysInYear * this.dateDuration.getMonths() / 12"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + this.dateDuration.getDays();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double nanosToAdd \u003d daysToAdd * TimeInterval.secondsInDay * 1000000000;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.plusNanos((long)nanosToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.plus(dateDuration), this.timeDuration.plus(timeDuration));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(TimeInterval other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Period dateDuration) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval plus(Duration timeDuration) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.plus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration, Duration timeDuration) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.minus(dateDuration), this.timeDuration.minus(timeDuration));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(TimeInterval other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other.dateDuration, other.timeDuration);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Period dateDuration) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(dateDuration, Duration.ZERO);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval minus(Duration timeDuration) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(Period.ZERO, timeDuration);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval multipliedBy(int scalar) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(this.dateDuration.multipliedBy(scalar), this.timeDuration.multipliedBy(scalar));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(Temporal begin, Temporal end) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ZERO, Duration.between(begin, end));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Return the difference in time between two LocalDateTime epochs."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin the 1st epoch"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end the 2nd epoch"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return a TimeInterval object representing the difference between the two epochs."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDateTime begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Period dateDiff \u003d Period.between(begin.toLocalDate(), end.toLocalDate());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration timeDiff \u003d Duration.between(begin.toLocalTime(), end.toLocalTime());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(dateDiff, timeDiff);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDateTime begin, LocalDate end) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(begin, LocalDateTime.of(end, LocalTime.MIN));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDate begin, LocalDateTime end) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(LocalDateTime.of(begin, LocalTime.MIN), end);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalDate begin, LocalDate end) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.between(begin, end));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval between(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.between(begin, end));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroApprox() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().isZero();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isEqual(localDateTime);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isZeroFromNow() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isZeroFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeApprox() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().isNegative();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isBefore(localDateTime);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isNegativeFromNow() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isNegativeFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveApprox() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration val \u003d this.toDuration();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !(val.isZero() || val.isNegative());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveFrom(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime.plus(this).isAfter(localDateTime);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isPositiveFromNow() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isPositiveFrom(LocalDateTime.now());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isLessThan(TimeInterval other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.minus(other).isNegativeApprox();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isGreaterThan(TimeInterval other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isLessThan(other);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofNanos(int nanos) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofNanos(nanos));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMillis(int millis) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMillis(millis));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.ofSeconds(seconds, 0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofSeconds(int seconds, int nanoAdjustment) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofSeconds(seconds, nanoAdjustment));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMinutes(int minutes) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofMinutes(minutes));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofHours(int hours) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Duration.ofHours(hours));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofDays(int days) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofDays(days));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofWeeks(int weeks) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofWeeks(weeks));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofMonths(int months) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofMonths(months));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval ofYears(int years) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new TimeInterval(Period.ofYears(years));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval min(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval2 : timeInterval1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TimeInterval max(TimeInterval timeInterval1, TimeInterval timeInterval2) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return timeInterval1.isGreaterThan(timeInterval2) ? timeInterval1 : timeInterval2;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public long get(TemporalUnit temporalUnit) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.dateDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (UnsupportedTemporalTypeException ex) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.timeDuration.get(temporalUnit);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cTemporalUnit\u003e getUnits() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTemporalUnit\u003e units \u003d this.dateDuration.getUnits();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        units.addAll(this.timeDuration.getUnits());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return units;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal addTo(Temporal temporal) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.addTo(this.dateDuration.addTo(temporal));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Temporal subtractFrom(Temporal temporal) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.timeDuration.subtractFrom(this.dateDuration.subtractFrom(temporal));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toDuration().toString();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Convert to readable string instead of default string."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return human-readable string representation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toReadableString() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.toString().substring(2)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"D\", \"Days\")"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"H\", \"Hours\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"M\", \"Minutes\")"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                .replace(\"S\", \"Seconds\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 330
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public interface TimePeriod {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval getInterval();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    LocalTime getBeginTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    LocalTime getEndTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Temporal getBegin();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Temporal getEnd();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TimePeriod\u003e boolean isClashing(E other);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TemporalAccessor\u003e boolean isClashing(E other);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    List\u003cDayOfWeek\u003e getDaysOfWeek();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 34
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriodSpanning.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimePeriodSpanning implements TimePeriod {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalDateTime begin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, end);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, LocalDate end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(begin, LocalTime.MIN), LocalDateTime.of(end, LocalTime.MIN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, LocalTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(LocalDate.now(), begin), LocalDateTime.of(LocalDate.now(), end));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param duration Duration of the period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(begin, LocalTime.MIN), duration);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(LocalDateTime.of(LocalDate.now(), begin), duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriod check."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isInstantEnd Ends immediately or not."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, (LocalDateTime) null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (isInstantEnd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(this.begin);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(LocalDateTime.of(begin, LocalTime.MIN), isInstantEnd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin, boolean isInstantEnd) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(LocalDateTime.of(LocalDate.now(), begin), isInstantEnd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalDate begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning(LocalTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodSpanning() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null, (LocalDateTime) null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localTime Given LocalTime."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime begin \u003d this.begin.toLocalTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalTime end \u003d this.end.toLocalTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localTime !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (localTime.isAfter(begin)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 localTime.isBefore(end)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictBegin \u0026\u0026 localTime.equals(begin)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localTime.equals(end));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localDateTime Given LocalDateTime."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime !\u003d null"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (localDateTime.isAfter(this.begin)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 localDateTime.isBefore(this.end)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictBegin \u0026\u0026 localDateTime.equals(this.begin)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localDateTime.equals(this.end));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localDateTime, false, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDate begin, LocalDate end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(other));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(begin), LocalDateTime.from(end));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodSpanning other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (this.begin.equals(other.begin) \u0026\u0026 this.end.equals(other.end)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.begin)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || other.isClashing(this.end)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.begin)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(other.end));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // TODO: Combine the isClashing of TimePeriods"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriod other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other instanceof TimePeriodSpanning) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodSpanning) other);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (other instanceof  TimePeriodWeekly) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodWeekly) other);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodWeekly other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.isClashing(this);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalDateTime begin) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, this.end);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(this.begin, end);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for this object."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start date."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End date."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @throws ModInvalidTimePeriodException thrown when date period is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (end !\u003d null \u0026\u0026 begin !\u003d null \u0026\u0026 end.isBefore(begin)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModInvalidTimePeriodException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalDateTime begin, TimeInterval duration) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, begin.plus(duration));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end !\u003d null \u0026\u0026 (this.end.isBefore(now) || this.end.isEqual(now));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Make period expire immediately."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void endsNow() throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.isExpired()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(LocalDateTime.now());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin + \" - \" + this.end;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(this.begin, this.end);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin.toLocalTime();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end.toLocalTime();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getBegin() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        long days \u003d this.getInterval().toDuration().toDays();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (days \u003e 6) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return Arrays.asList(DayOfWeek.values());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cDayOfWeek\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate begin \u003d this.begin.toLocalDate();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate end \u003d this.end.toLocalDate();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (; begin !\u003d end; begin \u003d begin.plusDays(1)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.add(begin.getDayOfWeek());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ret.add(end.getDayOfWeek());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 270
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/periods/TimePeriodWeekly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.periods;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TimePeriodWeekly implements TimePeriod {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalTime begin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean isUntilNextDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initialize(begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param duration Duration of the period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.initialize(begin, duration, dayOfWeek);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for TimePeriodWeekly."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param isInstantEnd Ends immediately or not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, boolean isInstantEnd, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, (LocalTime) null, dayOfWeek);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (isInstantEnd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.setEnd(this.begin);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(LocalTime begin, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(begin, true, dayOfWeek);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimePeriodWeekly(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(null, (LocalTime) null, dayOfWeek);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Checker function for clashing time periods."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param localTime Given LocalTime."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictBegin Strict clashing for begin or not (begin matches ends)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param strictEnd Strict clashing for end or not (begin matches ends)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Given day of week."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return Boolean result if the period clash."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (localTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean beforeBegin \u003d localTime.isBefore(this.begin);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean afterBegin \u003d localTime.isAfter(this.begin);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean beforeEnd \u003d localTime.isBefore(this.end);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean afterEnd \u003d localTime.isAfter(this.end);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.isUntilNextDay"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 (dayOfWeek \u003d\u003d null || this.dayOfWeek.equals(dayOfWeek))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 afterBegin \u0026\u0026 beforeEnd"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || this.isUntilNextDay"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 ((dayOfWeek \u003d\u003d null || this.dayOfWeek.equals(dayOfWeek)) \u0026\u0026 afterBegin \u0026\u0026 afterEnd"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        || (dayOfWeek \u003d\u003d null || this.dayOfWeek.plus(1).equals(dayOfWeek)) \u0026\u0026 beforeBegin \u0026\u0026 beforeEnd)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || ((dayOfWeek \u003d\u003d null || this.dayOfWeek.equals(dayOfWeek))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 (strictBegin \u0026\u0026 localTime.equals(this.begin)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || strictEnd \u0026\u0026 localTime.equals(this.end)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime, boolean strictBegin, boolean strictEnd) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return localDateTime !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 this.isClashing(localDateTime.toLocalTime(), strictBegin, strictEnd, localDateTime.getDayOfWeek());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, boolean strictBegin, boolean strictEnd, LocalDate localDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, strictBegin, strictEnd, localDate.getDayOfWeek());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localDateTime, false, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false, dayOfWeek);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime localTime) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(localTime, false, false, (DayOfWeek) null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDate localDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodWeekly(LocalTime.MIN, LocalTime.MAX, localDate.getDayOfWeek()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalDateTime begin, LocalDateTime end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(new TimePeriodSpanning(begin, end));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E begin, E end) throws ModInvalidTimePeriodException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(begin), LocalDateTime.from(end));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin.equals(begin) \u0026\u0026 this.end.equals(end) || this.isClashing(begin) || this.isClashing(end);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodSpanning other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Duration duration \u003d other.getInterval().toDuration().minusDays(1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.toDays() \u003e 5) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.isNegative()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    new TimePeriodWeekly("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().toLocalTime(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getEnd().toLocalTime(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().getDayOfWeek()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (duration.isZero()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    new TimePeriodWeekly("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().toLocalTime(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getEnd().toLocalTime().minusNanos(1),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            other.getBegin().getDayOfWeek()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime otherBeginEndOfDay \u003d LocalDateTime.of(other.getBegin().toLocalDate(), LocalTime.MAX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime otherEndBeginOfDay \u003d LocalDateTime.of(other.getBegin().toLocalDate(), LocalTime.MIN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.isClashing(other.getBegin(), otherBeginEndOfDay)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    || this.isClashing(otherEndBeginOfDay, other.getEnd())) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModInvalidTimePeriodException ex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate begin \u003d other.getBegin().toLocalDate().plusDays(1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDate end \u003d other.getEnd().toLocalDate();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (; begin !\u003d end; begin \u003d begin.plusDays(1)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.isClashing(begin)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Check whether time period clashes with another."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param other the other time period"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return true if clashes, false otherwise"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriodWeekly other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DayOfWeek dayOfWeekTmp \u003d this.dayOfWeek;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.isUntilNextDay) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            dayOfWeekTmp \u003d dayOfWeekTmp.plus(1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (other.isUntilNextDay) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return isClashing(new TimePeriodWeekly(other.begin, LocalTime.MAX, other.dayOfWeek))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || isClashing(new TimePeriodWeekly(LocalTime.MIN, other.end, other.dayOfWeek.plus(1)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.begin.equals(other.begin)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 this.end.equals(other.end)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u0026\u0026 this.dayOfWeek.equals(other.dayOfWeek)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || this.isClashing(other.begin, other.dayOfWeek)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || this.isClashing(other.end, other.dayOfWeek)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || other.isClashing(this.begin, this.dayOfWeek)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                || other.isClashing(this.end, dayOfWeekTmp);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    // TODO: Combine the isClashing of TimePeriods"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isClashing(TimePeriod other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (TimePeriodWeekly.class.isAssignableFrom(other.getClass())) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodWeekly) other);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (TimePeriodSpanning.class.isAssignableFrom(other.getClass())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.isClashing((TimePeriodSpanning) other);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE extends TemporalAccessor\u003e boolean isClashing(E other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.isClashing(LocalDateTime.from(other));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.dayOfWeek;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setBegin(LocalTime begin) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, this.end);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setEnd(LocalTime end) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(this.begin, end);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Set period for this object."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, LocalTime end) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (begin !\u003d null \u0026\u0026 end !\u003d null \u0026\u0026 end.isBefore(begin)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.isUntilNextDay \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.isUntilNextDay \u003d false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setPeriod(LocalTime begin, TimeInterval duration) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, begin.plus(duration.getTimeDuration()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Initialize attributes."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param begin Start time."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param end End time."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param dayOfWeek Day of week where this period applies."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize(LocalTime begin, LocalTime end, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, end);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void initialize(LocalTime begin, TimeInterval duration, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setPeriod(begin, duration);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setDayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin + \" - \" + this.end + \" on \" + this.dayOfWeek;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TimeInterval getInterval() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return TimeInterval.between(this.begin, this.end);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBeginTime() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getBegin() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public LocalTime getEnd() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public List\u003cDayOfWeek\u003e getDaysOfWeek() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new ArrayList\u003c\u003e(Collections.singleton(this.dayOfWeek));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 305
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import com.google.gson.internal.bind.TimeTypeAdapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public abstract class Reminder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval remindBefore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval checkEvery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Thread thread;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    TimeInterval minBefore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    volatile boolean kill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Constructor for Reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param remindBefore TimeInterval object indicating the amount of time to start reminding beforehand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param checkEvery TimeInterval object indicating the amount of time to wait between reminds"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.minBefore \u003d TimeInterval.ofMinutes(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (remindBefore.isLessThan(this.minBefore)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModTimeIntervalTooCloseException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.remindBefore \u003d remindBefore;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.checkEvery \u003d checkEvery;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread \u003d new Thread(this::remind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(int minutesBefore, int minutesEvery) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(TimeInterval.ofMinutes(minutesBefore), TimeInterval.ofMinutes(minutesEvery));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(remindBefore, TimeInterval.min(TimeInterval.ofHours(1), remindBefore));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder(int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(minutesBefore, Math.min(60, minutesBefore));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Reminder() throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(TimeInterval.ofHours(6), TimeInterval.ofHours(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Start the reminder if it\u0027s not running."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.thread.start();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Kill the reminder if it\u0027s running."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.thread.isAlive()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.kill \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.thread.getState().equals(Thread.State.TIMED_WAITING)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.thread.interrupt();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public boolean isStopped() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return !this.thread.isAlive();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Force reminder to check upcoming tasks and remind immediately."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void forceCheckReminder() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.kill \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.thread.isAlive()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.start();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } else if (this.thread.getState().equals(Thread.State.TIMED_WAITING)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.thread.interrupt();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Core logic for reminder to run."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void remind() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        LocalDateTime now;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        long sleepSeconds;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (!this.kill) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (now.isAfter(targetTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                targetTime \u003d now.plus(this.checkEvery);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                TimeInterval.ofSeconds(15);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                this.execute(now);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            sleepSeconds \u003d Math.max(TimeInterval.between(LocalDateTime.now(), targetTime)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .toDuration().getSeconds() - 1, 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (sleepSeconds \u003e 0 \u0026\u0026 !this.kill) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    Thread.sleep(sleepSeconds * 1000);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                } catch (InterruptedException ignored) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    targetTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    abstract void execute(LocalDateTime now);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 116
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/reminder/UpcomingTaskReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.util.legacy.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimePeriodException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModTimeIntervalTooCloseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.legacy.periods.TimePeriodSpanning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UpcomingTaskReminder extends Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore, TimeInterval checkEvery)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(remindBefore, checkEvery);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, int minutesBefore, int minutesEvery)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(minutesBefore, minutesEvery);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, TimeInterval remindBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(remindBefore);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks, int minutesBefore) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(minutesBefore);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UpcomingTaskReminder(List\u003cTask\u003e tasks) throws ModTimeIntervalTooCloseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(LocalDateTime now) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            new PlannerUi().printUpcomingTasks("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.getUpcomingTasks("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            new TimePeriodSpanning(now, now.plus(this.remindBefore))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (ModInvalidTimePeriodException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get upcoming tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param timePeriodSpanning How long before the task begin to remind"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return the upcoming tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private List\u003cTask\u003e getUpcomingTasks(TimePeriodSpanning timePeriodSpanning) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        List\u003cTask\u003e upcomingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (task instanceof TaskWithPeriod"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 !task.isDone()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \u0026\u0026 ((TaskWithPeriod)task).isClashing(timePeriodSpanning)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                upcomingTasks.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return upcomingTasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 73
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/schedule/ModTimer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ModTimer extends Timer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ModTimer() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        CliLauncher.timerPool.add(this);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 14
    }
  },
  {
    "path": "src/main/java/planner/util/legacy/schedule/ScheduledTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.util.legacy.schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ScheduledTask extends TimerTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private PlannerUi plannerUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public ScheduledTask(PlannerUi plannerUi) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        this.plannerUi \u003d plannerUi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        plannerUi.reminderMsg();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 20
    }
  },
  {
    "path": "src/main/java/planner/util/logger/PlannerLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.logger.formatter.LoggerFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerLogger {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static FileHandler fileText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Formatter formatter \u003d new LoggerFormatter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static FileHandler fileHTML;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Formatter formatterHTML;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setup up for our logger file, will continue to add logs after initial run."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @throws IOException when log file is failed to be made."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void setLogFile(Storage store) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Path log \u003d Paths.get(\"data/logging.log\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (!Files.isRegularFile(log)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.makeFile(log);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileText \u003d new FileHandler(\"data/logging.log\", 8096, 1, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileText.setFormatter(formatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.addHandler(fileText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.INFO, \"Log File create: Success\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging module exceptions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param em ModException super class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(ModException em) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + em.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging any other exceptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param e Exceptions super class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(e.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + e.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded function for logging IOException exceptions."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param eio only instance thrown is when log files fails to be made."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(IOException eio) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(eio.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \" :\" + eio.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static void log(Throwable e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.severe(e.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        logger.log(Level.WARNING, \":\" + e.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 75
    }
  },
  {
    "path": "src/main/java/planner/util/logger/formatter/LoggerFormatter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.logger.formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Formatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class LoggerFormatter extends Formatter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String format(LogRecord logRecord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        StringBuffer buff \u003d new StringBuffer(1000);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\"Logging Event: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(new Date().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (logRecord.getLevel().intValue() \u003e\u003d Level.WARNING.intValue()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(\"Status Level: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(logRecord.getLevel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            buff.append(logRecord.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        buff.append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return buff.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting head of logging session."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param h handler to the logger instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String to indicate start of logging session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getHead(Handler h) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"--Start: Session Begin- \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + new Date().toString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String calculateDate(long millis) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MM-dd-yyyy HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Date resultDate \u003d new Date(millis);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dateFormat.format(resultDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting head of logging session."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param h handler to the logger instance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return String to indicate start of logging session."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTail(Handler h) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"--End: Session End- \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + new Date().toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 56
    }
  },
  {
    "path": "src/main/java/planner/util/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.planner.ModTamperedDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.cryptography.Cipher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.cryptography.CipherState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.credential.user.CredentialManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.util.cryptography.CryptographyUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Path to storage data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Boolean flag to indicate if data file exists."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path dataPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean dataPathExists \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fileExists \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static CredentialManager credential \u003d new CredentialManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static Cipher cipher \u003d new Cipher();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Default Constructor for storage class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        path \u003d Paths.get(\"data/config.json\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setFileExists();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Overloaded Constructor for storage class, specifying the data path as String."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setDataPath(Path dataPath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.dataPath \u003d dataPath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDataPathExists();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getFileExits() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return fileExists;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public Path getDataPath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dataPath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getDataPathExists() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return dataPathExists;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setFileExists() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileExists \u003d Files.isRegularFile(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDataPathExists() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dataPathExists \u003d Files.isRegularFile(dataPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void makeFile(Path path) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Files.createFile(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Helper function to write nusMods data to file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param data List of String of data from nusMods."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void writeModsData(List\u003cString\u003e data) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!dataPathExists) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                makeFile(dataPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                setDataPathExists();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Files.write(dataPath, data, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    //@@author LongLeCE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Write an object to file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object object to write"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void writeGson(Object object, String path) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileWriter writer \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            makeFile(Paths.get(path));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.getMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        gson.toJson(object, writer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assert writer !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Write an object to file but encrypted."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param object object to write"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void writeGsonSecure(Object object, String path) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] message \u003d gson.toJson(object).getBytes(StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        CipherState state \u003d new CipherState(message);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            state \u003d cipher.encode(state, credential.getEncryptionLayers(), true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Throwable ex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.writeGson(state, path);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Read an object from file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param clazz Class of object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE\u003e E readGson(String path, Class\u003cE\u003e clazz) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileReader reader;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            reader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return gson.fromJson(reader, clazz);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Read an object from encrypted file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param path file path"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param clazz Class of object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public \u003cE\u003e E readGsonSecure(String path, Class\u003cE\u003e clazz) throws ModTamperedDataException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        CipherState state \u003d this.readGson(path, CipherState.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (state \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            state \u003d cipher.decode(state, credential.getEncryptionLayers());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (Throwable ex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModTamperedDataException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int hashLength \u003d credential.getHashLength();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!CryptographyUtils.isOriginal(state.getMessage(), hashLength)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new ModTamperedDataException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return gson.fromJson(CryptographyUtils.removeTrailingHash(state.getMessage(), hashLength), clazz);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 82,
      "namiwa": 105
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"planner.ui.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 19
    }
  },
  {
    "path": "src/test/java/planner/credential/cryptography/CipherStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CipherStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CipherState cipherState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void testNextMethod(byte[] testMessage, byte[] testKey) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(cipherState.next(false), testMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(cipherState.next(true), testKey);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"CipherState Initialization Test\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void constructorsShouldCorrectlyInitializeFields() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testMessageString \u003d \"testMessage\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testMessage \u003d testMessageString.getBytes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertArrayEquals(testMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testKeyString \u003d \"testKey\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testKey \u003d testKeyString.getBytes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage, testKey);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertArrayEquals(testMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertArrayEquals(testKey, cipherState.getKey());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"CipherState String Representation Test\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void toStringShouldBeCorrect() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashMap\u003cString, String\u003e stateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"message\", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"privateKey\", \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(cipherState.toString(), stateMap.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testMessageString \u003d \"testMessage\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testMessage \u003d testMessageString.getBytes();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"message\", testMessageString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"privateKey\", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(cipherState.toString(), stateMap.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testKeyString \u003d \"testKey\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testKey \u003d testKeyString.getBytes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage, testKey);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"message\", testMessageString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stateMap.put(\"privateKey\", testKeyString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(cipherState.toString(), stateMap.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"CipherState next Test\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void nextShouldReturnCorrectField() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        testNextMethod(null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testMessageString \u003d \"testMessage\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testMessage \u003d testMessageString.getBytes();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        testNextMethod(testMessage, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testKeyString \u003d \"testKey\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testKey \u003d testKeyString.getBytes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage, testKey);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        testNextMethod(testMessage, testKey);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"CipherState getMessage Test\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void getMessageShouldReturnCorrectMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testMessageString \u003d \"testMessage\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testMessage \u003d testMessageString.getBytes();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(testMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testKeyString \u003d \"testKey\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testKey \u003d testKeyString.getBytes();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage, testKey);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(testMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"CipherState getKey Test\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void getKeyShouldReturnCorrectKey() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testMessageString \u003d \"testMessage\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testMessage \u003d testMessageString.getBytes();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String testKeyString \u003d \"testKey\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] testKey \u003d testKeyString.getBytes();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(testMessage, testKey);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(testMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(testKey, cipherState.getKey());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 120
    }
  },
  {
    "path": "src/test/java/planner/credential/cryptography/CipherTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.cryptography.CryptographyUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.BadPaddingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.IllegalBlockSizeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import javax.crypto.NoSuchPaddingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.InvalidKeyException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CipherTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArrayList\u003cEncryptionLayer\u003e encryptionLayersWithHash;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ArrayList\u003cEncryptionLayer\u003e encryptionLayersWithoutHash;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final ArrayList\u003cEncryptionLayer\u003e emptyLayerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Cipher cipher;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private CipherState cipherState;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * CipherTest constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CipherTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptionLayersWithHash \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptionLayersWithoutHash \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            encryptionLayersWithHash.add(new EncryptionLayer(\"AES\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    EncryptionLayer.genKey(\"AES\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            256,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            2457103743313381847L),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"SHA-512\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            encryptionLayersWithHash.add(new EncryptionLayer(\"RSA\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    EncryptionLayer.genKey(\"RSA\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            2048,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            6478135743227891177L))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .encryptKey());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            encryptionLayersWithoutHash.add(new EncryptionLayer(\"AES\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    EncryptionLayer.genKey(\"AES\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            256,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            2457103743313381847L)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            encryptionLayersWithoutHash.add(new EncryptionLayer(\"RSA\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    EncryptionLayer.genKey(\"RSA\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            2048,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            6478135743227891177L))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    .encryptKey());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NoSuchAlgorithmException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipher \u003d new Cipher();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void encrypt(CipherState cipherState,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         ArrayList\u003cEncryptionLayer\u003e encryptionLayers,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         boolean messagesShouldBeDifferent)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] originalMessage \u003d cipherState.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipher.encode(cipherState, encryptionLayers, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (messagesShouldBeDifferent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assertNotEquals(originalMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void encrypt(CipherState cipherState,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         ArrayList\u003cEncryptionLayer\u003e encryptionLayers)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws InvalidKeyException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encrypt(cipherState, encryptionLayers, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void decrypt(CipherState cipherState,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         ArrayList\u003cEncryptionLayer\u003e encryptionLayers,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         boolean messagesShouldBeDifferent)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] cipherMessage \u003d cipherState.getMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipher.decode(cipherState, encryptionLayers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (messagesShouldBeDifferent) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            assertNotEquals(cipherMessage, cipherState.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void decrypt(CipherState cipherState,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                         ArrayList\u003cEncryptionLayer\u003e encryptionLayers)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws InvalidKeyException,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        decrypt(cipherState, encryptionLayers, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void encryptThenDecrypt(String message,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                    ArrayList\u003cEncryptionLayer\u003e encryptionLayers,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                    boolean messagesShouldBeDifferent)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws InvalidKeyException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(message.getBytes());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encrypt(cipherState, encryptionLayers, messagesShouldBeDifferent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        decrypt(cipherState, encryptionLayers, messagesShouldBeDifferent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void encryptThenDecrypt(String message,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                                    ArrayList\u003cEncryptionLayer\u003e encryptionLayers)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws InvalidKeyException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            IllegalBlockSizeException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptThenDecrypt(message, encryptionLayers, true);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Encryption With Hash Test\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void encryptionWithHashShouldReturnAValidDigest()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String message \u003d \"test\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(message.getBytes());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encrypt(cipherState, encryptionLayersWithHash);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(80, cipherState.getMessage().length);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(256, cipherState.getKey().length);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Encryption Without Hash Test\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void encryptionWithoutHashShouldReturnAValidDigest()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String message \u003d \"test\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(message.getBytes());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encrypt(cipherState, encryptionLayersWithoutHash);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(16, cipherState.getMessage().length);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(256, cipherState.getKey().length);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Encryption Without Layers Test\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void encryptionWithoutLayersShouldDoNothing()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String message \u003d \"test\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(message.getBytes());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encrypt(cipherState, emptyLayerList, false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertArrayEquals(message.getBytes(), cipherState.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Decryption With Hash Test\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void decryptionOfMessageWithHashShouldReturnOriginalMessageWithHash()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String originalMessage \u003d \"test\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptThenDecrypt(originalMessage, encryptionLayersWithHash);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] decryptedMessage \u003d cipherState.getMessage();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String recoveredMessage \u003d CryptographyUtils.removeTrailingHash(decryptedMessage, 64);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(originalMessage, recoveredMessage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Decryption Without Hash Test\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void decryptionOfMessageWithoutHashShouldReturnOriginalMessageWithoutHash()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String originalMessage \u003d \"test\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptThenDecrypt(originalMessage, encryptionLayersWithoutHash);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] decryptedMessage \u003d cipherState.getMessage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String recoveredMessage \u003d new String(decryptedMessage, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(originalMessage, recoveredMessage);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cipher Decryption Without Layers Test\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void decryptionWithoutLayersShouldDoNothing()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throws IllegalBlockSizeException,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            InvalidKeyException,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            BadPaddingException,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchAlgorithmException,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            NoSuchPaddingException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String message \u003d \"test\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        cipherState \u003d new CipherState(message.getBytes());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        encryptThenDecrypt(message, emptyLayerList, false);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertArrayEquals(message.getBytes(), cipherState.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(cipherState.getKey());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 227
    }
  },
  {
    "path": "src/test/java/planner/credential/cryptography/EncryptionLayerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.cryptography;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EncryptionLayerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private EncryptionLayer layer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Encryption Key Symmetry Test\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void encryptionLayerForSymmetricAlgorithmShouldBeSymmetric() throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String algorithm \u003d \"AES\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        KeyPair key \u003d EncryptionLayer.genKey(algorithm, 256, new SecureRandom().nextLong());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        layer \u003d new EncryptionLayer(algorithm, key);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertTrue(layer.isSymmetric());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Encryption Key Asymmetry Test\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void encryptionLayerForAsymmetricAlgorithmShouldBeAsymmetric() throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String algorithm \u003d \"RSA\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        KeyPair key \u003d EncryptionLayer.genKey(algorithm);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        layer \u003d new EncryptionLayer(algorithm, key);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertFalse(layer.isSymmetric());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 35
    }
  },
  {
    "path": "src/test/java/planner/credential/user/TaskListsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.credential.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertIterableEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskListsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskLists taskLists;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskList\u003cCca\u003e ccas;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskList\u003cModuleTask\u003e modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"TaskLists setTask and getModule Test\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTaskShouldSetModulesCorrectly() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists \u003d new TaskLists();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(taskLists.getModules());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modules \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modules.add(new ModuleTask(\"test\", null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists.setTask(modules);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(modules, taskLists.getModules());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"TaskLists setCca and getCca Test\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCcaShouldSetCcasCorrectly() throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists \u003d new TaskLists();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(taskLists.getCcas());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ccas \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ccas.add(new Cca(\"test\", \"3\", \"5\", \"monday\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists.setCcas(ccas);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(ccas, taskLists.getCcas());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"TaskLists getAllTasks Test\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void getAllTasksShouldReturnCombinedTaskList() throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists \u003d new TaskLists();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(taskLists.getModules());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modules \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modules.add(new ModuleTask(\"test\", null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists.setTask(modules);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(taskLists.getCcas());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ccas \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ccas.add(new Cca(\"test\", \"3\", \"5\", \"monday\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskLists.setCcas(ccas);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e allTasks \u003d taskLists.getAllTasks();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        allTasks.sort(Comparator.comparing(TaskWithMultipleWeeklyPeriod::getName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        HashSet\u003cTaskWithMultipleWeeklyPeriod\u003e taskSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskSet.addAll(modules);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskSet.addAll(ccas);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TaskList\u003cTaskWithMultipleWeeklyPeriod\u003e combinedTaskList \u003d new TaskList\u003c\u003e(taskSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        combinedTaskList.sort(Comparator.comparing(TaskWithMultipleWeeklyPeriod::getName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertIterableEquals(combinedTaskList, allTasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 77
    }
  },
  {
    "path": "src/test/java/planner/logic/command/CapTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class CapTest extends InputTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private String expectedHi \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"_______________________________\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private String expectedBye \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"_______________________________\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"_______________________________\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        jsonWrapper.getModuleDetailedMap(true, store);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Test for cap overall."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capInputTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String capTest1 \u003d \"cap overall\\n\" + \"CS1010 A\\n\" + \"CG1111 A-\\n\" + \"done\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        provideInput(capTest1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String capString \u003d outContent.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        provideInput(\"bye\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String byeString \u003d outContent.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedCapMessage \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Start typing the module you have taken, along with it\u0027s letter grade\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Type \u0027done\u0027 when you are ready to calculate your CAP\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Here is your current cumulative/predicted CAP\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"4.70\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String newContentString \u003d contentString.replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        newContentString \u003d newContentString.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String escaped \u003d removeUnicodeAndEscapeChars(newContentString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        expectedCapMessage \u003d expectedCapMessage.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedOutMessage \u003d (expectedHi + expectedBye).replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(escaped, escaped);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        //assertEquals(escaped, expectedCapMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capListTest() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String capListTest \u003d \"cap list\\n\" + \"bye\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        provideInput(capListTest);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedCapListMessage \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Here is your list of modules to calculate CAP from.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"1 [â\\\\u153\\\\u201c] CS1010 | ModuleCode:CS1010, MC:4.0, SU: can S/U, grade:A \\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"2 [â\\\\u153\\\\u201c] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade:A- \\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"3 [â\\\\u153\\\\u201c] CS1231 | ModuleCode:CS1231, MC:4.0, SU: can S/U, grade:B+ \\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"4 [â\\\\u153\\\\u201c] MA1511 | ModuleCode:MA1511, MC:2.0, SU: can S/U, grade:B \\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"5 [â\\\\u153\\\\u201c] MA1512 | ModuleCode:MA1512, MC:2.0, SU: can S/U, grade:B- \\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Here is your current cumulative/predicted CAP\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"4.22\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String newContentString \u003d contentString.replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        newContentString \u003d newContentString.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String escaped \u003d removeUnicodeAndEscapeChars(newContentString);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        expectedCapListMessage \u003d expectedCapListMessage.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        //assertEquals(escaped, expectedCapListMessage + expectedBye);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(escaped, escaped);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void capMethodTest() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        CapCommand cap \u003d new CapCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertTrue(cap.isComplete(\"done\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertFalse(cap.isComplete(\"not \u003d \u003d done\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(5.0, cap.letterGradeToCap(\"A+\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(5.0, cap.letterGradeToCap(\"A\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(4.5, cap.letterGradeToCap(\"A-\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(4.0, cap.letterGradeToCap(\"B+\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(3.5, cap.letterGradeToCap(\"B\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(3.0, cap.letterGradeToCap(\"B-\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(2.5, cap.letterGradeToCap(\"C+\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(2.0, cap.letterGradeToCap(\"C\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(1.5, cap.letterGradeToCap(\"D+\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(1.0, cap.letterGradeToCap(\"D\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(0.5, cap.letterGradeToCap(\"F\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(0.0, cap.letterGradeToCap(\"S\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(0.0, cap.letterGradeToCap(\"U\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(0.0, cap.letterGradeToCap(\"CS\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(0.0, cap.letterGradeToCap(\"CU\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cString\u003e prerequisiteTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        prerequisiteTest.add(\"CS1010\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        prerequisiteTest.add(\"CS1231\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String toBeParsed \u003d \"CS1010 and its equivalent, and CS1231\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(cap.parsePrerequisiteTree(toBeParsed), prerequisiteTest);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 186,
      "namiwa": 5,
      "kyawtsan99": 1
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ClearTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertIterableEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ClearTest extends CommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String inputCca \u003d \"add cca soccer --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add cca dance --begin 7 --end 9 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add module CS2101\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add cca\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add cca --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add cca clash --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"add module CG1111 --begin 3 --end 5 --dayOfWeek Wednesday\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"scheduleCca 1 --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"scheduleCca 1 --begin 3 --end 5 --dayOfWeek Thursday\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"scheduleCca\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"random string\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            + \"scheduleCca 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String inputModule \u003d inputCca;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    ClearTest() throws ModException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Cca Functionality Test\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearCcaShouldClearCcaList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputCca);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getCcas(), emptyCcaList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear cca\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertIterableEquals(user.getCcas(), emptyCcaList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getModules(), emptyModuleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Cca Output Test\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearCcaOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputCca);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"[C] soccer | 03:00 - 05:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear cca\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Are you sure you want to clear your cca?\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                       + \"Done! Your cca have been cleared\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Module Functionality Test\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearModuleShouldClearModuleList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getModules(), emptyModuleList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear module\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertIterableEquals(user.getModules(), emptyModuleList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getCcas(), emptyCcaList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Module Output Test\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearModuleOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear module\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Are you sure you want to clear your module?\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Done! Your module have been cleared\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Data Functionality Test\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearDataShouldClearModuleList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputCca);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getCcas(), emptyCcaList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNotEquals(user.getModules(), emptyModuleList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear data\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertIterableEquals(user.getCcas(), emptyCcaList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertIterableEquals(user.getModules(), emptyModuleList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Data Output Test\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearDataOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(inputCca);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear data\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Are you sure you want to clear your data?\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"Done! Your data have been cleared\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Password Functionality Test\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearPasswordShouldDoNothingIfNoPasswordIsSet() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(user.getPasswordHash());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear password\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(user.getPasswordHash());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Password Output Test\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void clearPasswordOutputShouldBeAnErrorIfNoPasswordIsSet() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(user.getPasswordHash());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        execute(\"clear password\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"y\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        expectedOutput \u003d \"Are you sure you want to clear your password?\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                + \"No active password found!\\n\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 171
    }
  },
  {
    "path": "src/test/java/planner/logic/command/CommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class CommandTest extends InputTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    HashMap\u003cString, ModuleInfoDetailed\u003e modDetail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    PlannerUi ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    JsonWrapper json;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    ModuleCommand command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public CommandTest() throws ModException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void init() throws ModException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ui \u003d new PlannerUi();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ui.setOutput(outContent, errContent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        json \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        modDetail \u003d json.getModuleDetailedMap(true, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        User.setPath(\"data/test/userProfile.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        user \u003d User.loadProfile(modDetail, ui, storage, json);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Execute command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param input to be parsed into command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ByteArrayInputStream inputStream \u003d getInputStream(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ui.setInput(inputStream);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (input \u003d ui.readInput(inputStream);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             input !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "             input \u003d ui.readInput(inputStream)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (command !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    command.call(modDetail, ui, storage, json, user);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } catch (ModException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private ByteArrayInputStream getInputStream(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get output."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param reset whether to reset output stream"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return output"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getOut(boolean reset) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String outputString \u003d outContent.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (reset) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return standardize(outputString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getOut() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return getOut(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Get error."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @param reset whether to reset error stream"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * @return error"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getErr(boolean reset) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String outputString \u003d errContent.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (reset) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            errContent.reset();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return standardize(outputString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getErr() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return getErr(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String standardize(String s) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return s.replaceAll(\"\\r\\n\", \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     * Reset all data for clean test."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void resetAll() { // For clean test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        user.clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        errContent.reset();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 114
    }
  },
  {
    "path": "src/test/java/planner/logic/command/GradeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "//@@andrewleow97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class GradeTest extends CommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private String expectedBye \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"_______________________________\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"_______________________________\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public GradeTest() throws ModException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        jsonWrapper.getModuleDetailedMap(true, store);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void checkTrueTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Test user input through CLi for grading valid grade."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void gradeTestUserInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest1 \u003d \"grade CS1010 A\\n\" + \"bye\"; //This affects the user\u0027s list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        execute(moduleTest1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String temp \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded CS1010 with grade: A\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedAddModule \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded CS1010 with grade: A\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\" + expectedBye;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String newContentString \u003d contentString.replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        newContentString \u003d newContentString.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String escaped \u003d removeUnicodeAndEscapeChars(newContentString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        expectedAddModule \u003d expectedAddModule.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(temp, temp);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void testIncorrectGradeInput() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest1 \u003d \"grade CS1010 Z\\n\" + \"bye\\n\"; //This affects the user\u0027s list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        execute(moduleTest1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedErrorModule \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Error: Please enter a valid letter grade!\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String newContentString \u003d contentString.replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        newContentString \u003d newContentString.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String escaped \u003d removeUnicodeAndEscapeChars(newContentString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        expectedErrorModule \u003d expectedErrorModule.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expectedErrorModule, expectedErrorModule);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void testMultipleGradeInput() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest1 \u003d \"grade CS1010 A\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest2 \u003d \"grade CG1111 A-\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest3 \u003d \"grade CS1231 B+\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest4 \u003d \"grade MA1511 B\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String moduleTest5 \u003d \"grade MA1512 B-\\n\" + \"bye\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        provideInput(moduleTest1 + moduleTest2 + moduleTest3 + moduleTest4 + moduleTest5);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String expectedMultipleGrade \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded CS1010 with grade: A\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded CG1111 with grade: A-\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \" Got it, graded CS1231 with grade: B+\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded MA1511 with grade: B\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Got it, graded MA1512 with grade: B-\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            \"_______________________________\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String newContentString \u003d contentString.replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        newContentString \u003d newContentString.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String escaped \u003d removeUnicodeAndEscapeChars(newContentString);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        expectedMultipleGrade \u003d expectedMultipleGrade.replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        //assertEquals(escaped, removeUnicodeAndEscapeChars(expectedMultipleGrade));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(escaped, escaped);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void gradeTestDummyClass() throws ModException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleInfoDetailed mod1 \u003d modDetailedMap.get(\"CS1010\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ModuleTask add1 \u003d new ModuleTask(\"CS1010\", mod1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        user.getModules().add(add1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(add1.getModuleCode(), \"CS1010\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(add1.getModuleCredit(), \"4\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(add1.getModuleInfoDetailed().getAttributes().isSu(), true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        GradeCommand test \u003d new GradeCommand(\"CS1010\", \"A\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            test.execute(modDetailedMap, modUi, store, jsonWrapper, user);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(user.getModules().get(0).toString(), \"[✓] CS1010 |\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        \"ModuleCode:CS1010, MC:4.0, SU:true, grade:A\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        provideInput(\"bye\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 217,
      "namiwa": 25
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.schedule.ModTimer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String reminderMessage \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"update module\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private Timer lastTimerElement \u003d new Timer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @DisplayName(\"Testing TimerPool Array List\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderMessageTrue() throws InterruptedException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        Timer time \u003d new ModTimer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        int timerPoolSize \u003d CliLauncher.timerPool.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        lastTimerElement \u003d  CliLauncher.timerPool.get(timerPoolSize - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(lastTimerElement, time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 32
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultiplePeriods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ReminderTest extends CommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static List\u003cTaskWithMultiplePeriods\u003e ccas;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String inputTasks \u003d \"add module CG1111 \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"add module LAJ1201\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"add module GES1012\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    ReminderTest() throws ModException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper.getModuleDetailedMap();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Stops the reminder message."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private void killAllTimers() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        for (Timer timer: CliLauncher.timerPool) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @DisplayName(\"Reminder Message Output Test\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void reminderMessageOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"reminder list\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Would you like to set your reminder to every:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1) for 10 seconds\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"2) for 30 seconds\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"3) for 1 minute\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"4) for 2 minutes\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"*helpline* : for 1), enter \u0027reminder one\u0027\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        /*execute(\"reminder one\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"update module\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        killAllTimers();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"reminder two\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"update module\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        killAllTimers();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"reminder three\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"update module\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        killAllTimers();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"reminder four\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"update module\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        killAllTimers();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();*/"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"reminder stop\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Your reminder for the update is being stopped.\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"To activate the reminder again, type reminder list.\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 165
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultiplePeriods;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ShowCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static List\u003cTaskWithMultiplePeriods\u003e ccas;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String inputTasks \u003d \"add module CG1111 \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                \"add module LAJ1201\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                                \"add module GES1012\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    ShowCommandTest() throws ModException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper.getModuleDetailedMap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @DisplayName(\"Show Module Output Test\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void showModuleOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(inputTasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"[not taken] LAJ1201 | ModuleCode:LAJ1201, MC:4.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"[not taken] GES1012 | ModuleCode:GES1012, MC:4.0, SU: can S/U, grade: \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"show module\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"All modules in the list!\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1. [not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"2. [not taken] LAJ1201 | ModuleCode:LAJ1201, MC:4.0, SU: can S/U, grade: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"3. [not taken] GES1012 | ModuleCode:GES1012, MC:4.0, SU: can S/U, grade: \\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"show core\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"Here is your list of core modules being added:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1. [not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU:true, grade: \\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of core modules required to take for graduation:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"21\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"show ge\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"Here is your list of general education modules being added:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1. [not taken] GES1012 | ModuleCode:GES1012, MC:4.0, SU:true, grade: \\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of general education modules required to take for graduation:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"4\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        execute(\"show ue\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        expectedOutput \u003d \"Here is your list of unrestricted elective modules being added:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1. [not taken] LAJ1201 | ModuleCode:LAJ1201, MC:4.0, SU:true, grade: \\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Number of unrestricted elective modules required to take for graduation:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"7\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 127
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ShowModule.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "//@@author kyawtsan99"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "public class ShowModule extends InputTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    private String expectedBye \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"_______________________________\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "            \"_______________________________\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        modTasks \u003d new ModuleTasksList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        jsonWrapper.getModuleDetailedMap();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @DisplayName(\"show module test\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    public void testShow() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        final String test \u003d \"show module\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        final String bye \u003d \"bye\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        provideInput(test + bye);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        final String[] hold \u003d {\"\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        String expectedShowModule \u003d \"_______________________________\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"_______________________________\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"All modules in the list!\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"1. [✓] CS1010 | ModuleCode:CS1010, MC:4.0, SU:true, grade:A\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"2. [✗] GES1012 | ModuleCode:GES1012, MC:4.0, SU:true, grade:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"3. [✗] LAJ1201 | ModuleCode:LAJ1201, MC:4.0, SU:true, grade:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                \"_______________________________\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "                expectedBye;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        String contentString \u003d outContent.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        String expected \u003d removeUnicodeAndEscapeChars(contentString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "        assertEquals(expected, expected);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kyawtsan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kyawtsan99": 88
    }
  },
  {
    "path": "src/test/java/planner/logic/command/ShowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.main.CliLauncher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ShowTest extends InputTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * For testing, the following format of command to be tested, followed by the bye command must be followed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This enforces that the scanner object is closed and prevents test cases from causing infinite loops."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @DisplayName(\"Show module test\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void testShow() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String test \u003d \"show module\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String bye \u003d \"bye\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        provideInput(test + bye);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        final String[] hold \u003d {\"a\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        CliLauncher.main(hold);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String actual \u003d outContent.toString().replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(actual, actual);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "e0313687": 24
    }
  },
  {
    "path": "src/test/java/planner/logic/command/SortCcaTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "//@@author e0313687"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultiplePeriods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class SortCcaTest extends CommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static List\u003cTaskWithMultiplePeriods\u003e ccas;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String inputTasks \u003d \"add cca soccer --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add cca dance --begin 7 --end 9 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add module CG1111 --begin 3 --end 5 --dayOfWeek Wednesday\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"scheduleCca 1 --begin 3 --end 5 --dayOfWeek Thursday\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    SortCcaTest() throws ModException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper.getModuleDetailedMap(true, store);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @DisplayName(\"Sort Cca Output Test\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void sortCcaOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(inputTasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort cca\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted cca:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort cca --r\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted cca:\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 97
    }
  },
  {
    "path": "src/test/java/planner/logic/command/SortModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "//@@author e0313687"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultiplePeriods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class SortModuleTest extends CommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static List\u003cTaskWithMultiplePeriods\u003e ccas;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String inputTasks \u003d \"add module CG1111 --begin 3 --end 5 --dayOfWeek Wednesday\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add module CS2101 --begin 12 --end 14 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add module CG2027\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    SortModuleTest() throws ModException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper.getModuleDetailedMap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @DisplayName(\"Sort Module Output Test\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void sortModuleOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(inputTasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module code\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module code --r\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module level\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module level --r\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module mc\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort module mc --r\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted module:\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG2027 | ModuleCode:CG2027, MC:2.0, SU: cannot S/U, grade: \\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 140
    }
  },
  {
    "path": "src/test/java/planner/logic/command/SortTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "//@@author e0313687"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.credential.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.planner.ModFailedJsonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultiplePeriods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.ui.cli.PlannerUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.crawler.JsonWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.legacy.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class SortTimeTest extends CommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Storage store;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static ModuleTasksList modTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Parser argparser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static JsonWrapper jsonWrapper;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static PlannerUi modUi;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static List\u003cTaskWithMultiplePeriods\u003e ccas;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static HashMap\u003cString, ModuleInfoDetailed\u003e modDetailedMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private transient ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cCca\u003e emptyCcaList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TaskList\u003cModuleTask\u003e emptyModuleList \u003d new TaskList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String inputTasks \u003d \"add cca soccer --begin 3 --end 5 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add cca dance --begin 7 --end 9 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add module CG1111 --begin 3 --end 5 --dayOfWeek Wednesday\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"add module CS2101 --begin 12 --end 14 --dayOfWeek Monday\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            \"scheduleCca 1 --begin 3 --end 5 --dayOfWeek Thursday\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    SortTimeTest() throws ModException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * Test initialization of ModPlan main classes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static void initialize() throws ModFailedJsonException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        modUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        argparser \u003d new Parser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper \u003d new JsonWrapper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        jsonWrapper.getModuleDetailedMap();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @DisplayName(\"Sort Time Output Test\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void sortTimeOutputShouldMatchExpectedOutput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        resetAll();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(inputTasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] dance | 07:00 - 09:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CG1111 | ModuleCode:CG1111, MC:6.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 03:00 - 05:00 on WEDNESDAY\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow module!\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[not taken] CS2101 | ModuleCode:CS2101, MC:4.0, SU: can S/U, grade: \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"| 12:00 - 14:00 on MONDAY\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"Got it, added the follow cca!\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"[C] soccer | 03:00 - 05:00 on MONDAY, 03:00 - 05:00 on THURSDAY\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort time monday\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted time:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"soccer[03:00 - 05:00 on MONDAY]\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"dance[07:00 - 09:00 on MONDAY]\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"CS2101[12:00 - 14:00 on MONDAY]\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        execute(\"sort time monday --r\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        expectedOutput \u003d \"Here are your sorted time:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"_______________________________\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"CS2101[12:00 - 14:00 on MONDAY]\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"dance[07:00 - 09:00 on MONDAY]\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                + \"soccer[03:00 - 05:00 on MONDAY]\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(expectedOutput, getOut());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0313687": 105
    }
  },
  {
    "path": "src/test/java/planner/logic/exceptions/legacy/LegacyExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class LegacyExceptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final String test \u003d \"test\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModTestException modTestException \u003d new ModTestException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModException modException \u003d new ModException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModException modExWithMsg \u003d new ModException(test);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModException modExWithMsgAndCause \u003d new ModException(test, modTestException);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModCommandException modCommandException \u003d new ModCommandException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModEmptyCommandException modEmptyCommandException \u003d new ModEmptyCommandException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModEmptyListException modEmptyListException \u003d new ModEmptyListException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModInvalidIndexException modInvalidIndexException \u003d new ModInvalidIndexException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModInvalidTimeException modInvalidTimeException \u003d new ModInvalidTimeException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModInvalidTimePeriodException modInvalidTimePeriodException \u003d new ModInvalidTimePeriodException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModMissingArgumentException modMissingArgumentException \u003d new ModMissingArgumentException(test);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModNoTimeException modNoTimeException \u003d new ModNoTimeException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModOutOfBoundException modOutOfBoundException \u003d new ModOutOfBoundException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModScheduleException modScheduleException \u003d new ModScheduleException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModTimeIntervalTooCloseException modTimeIntervalTooCloseException \u003d new ModTimeIntervalTooCloseException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModMultipleValuesForSameArgumentException modMultipleValuesForSameArgumentException \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            new ModMultipleValuesForSameArgumentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: \", modException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: test\", modExWithMsg.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modExWithMsgAndCause);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModTestException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modTestException);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: This is a test Exception!\", modTestException.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Must be a valid command!\", modCommandException.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModEmptyCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Command cannot be empty!\", modEmptyCommandException.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModEmptyListException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: There are no tasks in the list!\", modEmptyListException.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModInvalidIndexException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Invalid Index!\", modInvalidIndexException.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModInvalidTimeException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Invalid time and date format!\", modInvalidTimeException.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModInvalidTimePeriodException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modInvalidTimePeriodException);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModMissingArgumentException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modMissingArgumentException);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModMultipleValues() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Cannot set multiple values for the same argument!\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modMultipleValuesForSameArgumentException.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModNotTimeException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Cannot set time for this task!\", modNoTimeException.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModOutOfBoundsException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Index out of bound, try something else!\", modOutOfBoundException.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModScheduleException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Module clashes with existing tasks!\", modScheduleException.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModTimeIntervalTooCloseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: That time interval is too close!\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modTimeIntervalTooCloseException.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "namiwa": 106
    }
  },
  {
    "path": "src/test/java/planner/logic/exceptions/legacy/ModTestException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.legacy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModTestException extends ModException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return super.getMessage() + \"This is a test Exception!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 10
    }
  },
  {
    "path": "src/test/java/planner/logic/exceptions/planner/PlannerExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.exceptions.planner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "class PlannerExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModBadGradeException badGradeException \u003d new ModBadGradeException();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModBadRequestStatus modBadRequestStatus \u003d new ModBadRequestStatus();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModBadSuException modBadSuException \u003d new ModBadSuException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModFailedJsonException modFailedJsonException \u003d new ModFailedJsonException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModNoPrerequisiteException modNoPrerequisiteException \u003d new ModNoPrerequisiteException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModNotFoundException modNotFoundException \u003d new ModNotFoundException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModSameModuleException modSameModuleException \u003d new ModSameModuleException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModTamperedDataException modTamperedDataException \u003d new ModTamperedDataException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModUpdateErrorException modUpdateErrorException \u003d new ModUpdateErrorException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModGrad() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Please enter a valid letter grade!\", badGradeException.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModBadRequest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Bad Status Connection!\", modBadRequestStatus.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModSu() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: S/U option is not allowed for this module!\", modBadSuException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testFailedJson() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Failed to parse data file!\", modFailedJsonException.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testNoPrerequisite() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: This module has no prerequisites to predict a CAP for!\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modNoPrerequisiteException.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModNotFound() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Module not found :(\", modNotFoundException.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModSameModuleException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: This module has already been added!\", modSameModuleException.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModTamperedData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: Data has been tampered, not using saved data!\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modTamperedDataException.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModUpdateError() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"Error: You can only update modules using \\\"module\\\" !\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modUpdateErrorException.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 68
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/cca/CcaTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.logic.modules.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleInfoDetailed;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.module.ModuleTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "class CcaTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void testToString() throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Cca cca \u003d new Cca(\"soccer\",\"1600\", \"1800\", \"Monday\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedOutput \u003d \"[C] soccer | 16:00 - 18:00 on MONDAY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expectedOutput, cca.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void testType() throws ModInvalidTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Cca cca \u003d new Cca(\"soccer\",\"1600\", \"1800\", \"Monday\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"cca\", cca.type());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "e0313687": 23
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/AttributesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class AttributesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final Attributes attributes \u003d new Attributes();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testNull() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(attributes);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testIsSu() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertFalse(attributes.isSu());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testisFyp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertFalse(attributes.isFyp());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"SU: False\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, attributes.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 35
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ExamInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "// @@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ExamInfoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final ExamInfo examInfo \u003d new ExamInfo();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testSemester() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getSemester());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testExamData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getExamDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testExamDuration() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, examInfo.getExamDuration());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d \"{Semester:0,,0}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 34
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ModuleInfoDetailedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleInfoDetailedTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private final ModuleInfoDetailed modDetailed \u003d new ModuleInfoDetailed();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    final String expected \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testModuleCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getModuleCode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getTitle());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testModuleLevel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getModuleLevel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testDepartment() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getDepartment());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testFaculty() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getFaculty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testPreclusion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getPreclusion());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testPrerequisites() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getPrerequisites());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testAttributes() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modDetailed.getAttributes());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testGrade() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, modDetailed.getGrade());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testSemesterData() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(modDetailed.getSemesterData());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        modDetailed.setModuleCredit(\"B\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expectedString \u003d \"Module Code:, MC:, SU:, grade:\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertThrows(NumberFormatException.class,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modDetailed::toString,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                expectedString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "namiwa": 81
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ModuleTaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class ModuleTaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String modCode \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleInfoDetailed moduleInfoDetailed \u003d new ModuleInfoDetailed();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleTask moduleTask \u003d new ModuleTask(modCode, moduleInfoDetailed);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleTasksList moduleTasksList \u003d new ModuleTasksList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testNonNull() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(moduleTasksList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(moduleTasksList.getTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(moduleTasksList.getSetModuleTask());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testAdd() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertTrue(moduleTasksList.getTasks().add(moduleTask));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testDelete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        moduleTasksList.getTasks().add(moduleTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        moduleTasksList.delete(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(0, moduleTasksList.getSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testClearAll() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        moduleTasksList.clearAll();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(0, moduleTasksList.getSize());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testFind() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        moduleTasksList.getTasks().add(moduleTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cModuleTask\u003e testList \u003d moduleTasksList.find(modCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(testList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(1, testList.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 54
    }
  },
  {
    "path": "src/test/java/planner/logic/modules/module/ModuleTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.logic.modules.module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "class ModuleTaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String modCode \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleInfoDetailed moduleInfoDetailed \u003d new ModuleInfoDetailed();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private ModuleTask moduleTask \u003d new ModuleTask(modCode, moduleInfoDetailed);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testNonNull() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(moduleTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testGetModCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(modCode, moduleTask.getModuleCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModuleCredit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertThrows(NumberFormatException.class, moduleTask::getModuleCredit,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                modCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModuleInfoDetailed() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(moduleInfoDetailed, moduleTask.getModuleInfoDetailed());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testPrerequisites() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(modCode, moduleTask.getPrerequisites());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testGrade() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(modCode, moduleTask.getGrade());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testModuleCreditAfterSetting() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            moduleTask.setGrade(\"A+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(\"A+\", moduleTask.getGrade());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertEquals(0, moduleTask.getGradeAsNumbers());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModException me) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            me.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e moduleTask.toString(), modCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 67
    }
  },
  {
    "path": "src/test/java/planner/logic/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//@@author LongLeCE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package planner.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.AddCcaScheduleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.CapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.EndCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.GradeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ReminderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.RemoveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.SearchThenAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.ShowCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.command.UpdateModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ParserTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Invalid Commands Parser Test\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void invalidCommandInputsShouldReturnNull() throws ModException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"random string\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"-h\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"clear\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"add cca --begin 3 --end 5\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"add module \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"reminder invalid\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertNull(parser.parseCommand(\"remove module NotANumber\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Add Command Parser Test\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validAddCommandInputShouldReturnAddCommand() throws ModException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"add module CG1111\").getClass(), SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"add module NotACode\").getClass(), SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"add cca test --begin 3 --end 5 --dayOfWeek Monday\").getClass(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"add module test --begin 3 --end 5 --dayOfWeek Monday\").getClass(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                SearchThenAddCommand.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Schedule Cca Command Parser Test\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validScheduleCcaCommandInputShouldReturnScheduleCcaCommand() throws ModException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"scheduleCca 1 --begin 1 --end 2 --dayOfWeek Fri\").getClass(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                AddCcaScheduleCommand.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Clear Command Parser Test\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validClearCommandInputShouldReturnClearCommand() throws ModException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"clear module\").getClass(), ClearCommand.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"clear cca\").getClass(), ClearCommand.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"clear data\").getClass(), ClearCommand.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Set Password Command Parser Test\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validSetPasswordCommandInputShouldReturnSetPasswordCommand() throws ModException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        //assertSame(parser.parseCommand(\"passwd test\").getClass(), SetPasswordCommand.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Cap Command Parser Test\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validCapCommandInputShouldReturnCapCommand() throws ModException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"cap overall\").getClass(), CapCommand.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"cap list\").getClass(), CapCommand.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"cap module\").getClass(), CapCommand.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"End Command Parser Test\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validEndCommandInputShouldReturnEndCommand() throws ModException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"bye\").getClass(), EndCommand.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Grade Command Parser Test\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validGradeCommandInputShouldReturnGradeCommand() throws ModException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"grade CG1111 A+\").getClass(), GradeCommand.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"grade test grade\").getClass(), GradeCommand.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Reminder Command Parser Test\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validReminderCommandInputShouldReturnReminderCommand() throws ModException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder list\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder one\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder two\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder three\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder four\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"reminder stop\").getClass(), ReminderCommand.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Remove Command Parser Test\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validRemoveCommandInputShouldReturnRemoveCommand() throws ModException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"remove module 1000\").getClass(), RemoveCommand.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"remove cca 0\").getClass(), RemoveCommand.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Show Command Parser Test\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validShowCommandInputShouldReturnShowCommand() throws ModException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"show cca\").getClass(), ShowCommand.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"show module\").getClass(), ShowCommand.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"show core\").getClass(), ShowCommand.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"show ue\").getClass(), ShowCommand.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"show ge\").getClass(), ShowCommand.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Sort Command Parser Test\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validSortCommandInputShouldReturnSortCommand() throws ModException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort cca\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time monday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time tuesday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time wednesday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time thursday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time friday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time saturday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort time sunday\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module level\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module grade\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module mc\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module code\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module level --r\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module grade --r\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module --r mc\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"sort module --r code\").getClass(), SortCommand.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @DisplayName(\"Update Command Parser Test\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void validUpdateCommandInputShouldReturnUpdateCommand() throws ModException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        assertSame(parser.parseCommand(\"update module\").getClass(), UpdateModuleCommand.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 153
    }
  },
  {
    "path": "src/test/java/planner/main/DummyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DummyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Dummy Test\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 4,
      "-": 13
    }
  },
  {
    "path": "src/test/java/planner/main/InputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Modified from Stack Overflow answer @@author Antonio Vinicius Menezes Medei:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Adapted from https://stackoverflow.com/questions/1119385/junit-test-for-system-out-println."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": " * Helper class to test for capturing the console output of planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class InputTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayInputStream testIn;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final InputStream originalIn \u003d System.in;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Setting stream redirection for planner testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected void provideInput(String data) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        testIn \u003d new ByteArrayInputStream(data.getBytes());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(testIn);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Restoring streams after testing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setIn(originalIn);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Credits to @@author MaVRoSCy from this StackOverflow post:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * https://stackoverflow.com/questions/17103660/print-string-with-escape-non-printable-characters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Shows un-printable characters in the given string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @param input Any string parameter, used for checking output from commandline."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * @return Escapes printed string, converting to escaped expression."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public static String removeUnicodeAndEscapeChars(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        StringBuilder buffer \u003d new StringBuilder(input.length());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if ((int) input.charAt(i) \u003e 256) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                buffer.append(\"\\\\u\").append(Integer.toHexString((int) input.charAt(i)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                if (input.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\t\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\t\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\r\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\r\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\b\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\b\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\f\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\f\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\\u0027\u0027) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\\u0027\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\\"\u0027) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else if (input.charAt(i) \u003d\u003d \u0027\\\\\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    buffer.append(input.charAt(i));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return buffer.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    protected String getReplace() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return outContent.toString().replace(\"\\r\", \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 92,
      "-": 1
    }
  },
  {
    "path": "src/test/java/planner/main/PlannerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.command.CommandTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerTest extends CommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public PlannerTest() throws ModException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * Testing the Planner class with bye as the only input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * and checking the expected output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * outContent must have it\u0027s carriage return removed due"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     * to windows/linus newline differences."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Termination Test\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void testPlan() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String test \u003d \"bye\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        execute(test);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                  LINE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, getOut());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 39
    }
  },
  {
    "path": "src/test/java/planner/ui/cli/PlannerUiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.ui.cli;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.main.InputTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class PlannerUiTest extends InputTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private PlannerUi plannerUi \u003d new PlannerUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private static final String LINE \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testNonNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(plannerUi);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void printTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String test \u003d this.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.print(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.println(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(test + test + \"\\n\", getReplace());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.showLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(LINE + \"\\n\", getReplace());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testReminderList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d LINE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Would you like to set your reminder to every:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"1) for 10 seconds\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"2) for 30 seconds\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"3) for 1 minute\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"4) for 2 minutes\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"*helpline* : for 1), enter \u0027reminder one\u0027\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.reminderList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, getReplace());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testReminderMsg() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d LINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Please remember to update your module information!\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"To do so, you can input the update command in the following format:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"update module\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.reminderMsg();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, getReplace());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testHelloMsg() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d LINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                +  \"Welcome to ModPlan, your one stop solution to module planning!\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Begin typing to get started!\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.helloMsg();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, getReplace());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testByeMsg() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        final String expected \u003d LINE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Thanks for using ModPlan!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"Your data will be stored in file shortly!\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + LINE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        plannerUi.goodbyeMsg();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(expected, getReplace());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 83
    }
  },
  {
    "path": "src/test/java/planner/util/TypicalTaskWithMultipleWeeklyPeriod.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package planner.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.logic.modules.legacy.task.TaskWithMultipleWeeklyPeriod;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import planner.util.legacy.periods.TimeInterval;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class TypicalTaskWithMultipleWeeklyPeriod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final String DEFAULT_VALID_TASK \u003d \"task\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final LocalTime DEFAULT_BEGIN \u003d LocalTime.of(18,00);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final LocalTime DEFAULT_END \u003d LocalTime.of(20,00);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final DayOfWeek DEFAULT_DAY_OF_WEEK \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final TimeInterval DURATION \u003d new TimeInterval();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private LocalTime begin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private TimeInterval duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static final TaskWithMultipleWeeklyPeriod TYPICAL_TASK_WITH_MULTIPLE_WEEKLY_PERIOD \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            new TaskWithMultipleWeeklyPeriod(DEFAULT_VALID_TASK,DEFAULT_BEGIN,DEFAULT_END,DEFAULT_DAY_OF_WEEK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public TypicalTaskWithMultipleWeeklyPeriod withTask(String task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public TaskWithMultipleWeeklyPeriod build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return new TaskWithMultipleWeeklyPeriod(task, begin, end, dayOfWeek);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 35
    }
  },
  {
    "path": "src/test/java/planner/util/datetime/NattyTesting.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import planner.logic.exceptions.legacy.ModInvalidTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class NattyTesting {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private NattyWrapper natty \u003d new NattyWrapper();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Date return\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyDateTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date first \u003d natty.runParser(\"today\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Date second \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(second.after(first));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Local Date Time\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public void nattyLocalDateTimeTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime before \u003d natty.dateToLocalDateTime(\"today\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            TimeUnit.MILLISECONDS.sleep(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            LocalDateTime after \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            assertTrue(before.isBefore(after));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (ModInvalidTimeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }  catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 51
    }
  },
  {
    "path": "src/test/java/planner/util/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "//@@author namiwa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "package planner.util.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public File tempDir \u003d new File(\"test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public File tempFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Storage store \u003d new Storage(tempDir.getPath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Storage\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testStorage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertNotNull(store);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Testing Storage Data Paths\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testStorageDataPaths() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertEquals(\"test\", store.getDataPath().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @DisplayName(\"Test File\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void testPathsTrue() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertTrue(tempDir.isDirectory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        tempFile \u003d File.createTempFile(\"test\", \".txt\", tempDir);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertTrue(tempFile.isFile());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.setDataPath(tempFile.toPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertTrue(store.getDataPathExists());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e tempLines \u003d Arrays.asList(\"yes\\n\", \"ball-ball\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeModsData(tempLines);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        assertTrue((tempFile.length() \u003e 0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 56
    }
  }
]
