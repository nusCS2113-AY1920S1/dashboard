[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.base\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/EventSpace.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class EventSpace extends Facility {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected EventSpace(String roomCode, int Capacity) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        super(roomCode, Capacity);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 6
    }
  },
  {
    "path": "src/main/java/Facility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class Facility {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String roomCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected ArrayList \u003cItems\u003e inventory; //convert to 2d array"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected int capacity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected Facility(String roomCode, int capacity) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.roomCode \u003d roomCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * To add a new item into the room\u0027s inventory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param item the new entry"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param amount the quantity of the item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected void addInventory(String item, int amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Items entry \u003d new Items(item, amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        inventory.add(entry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * To edit the inventory of the room"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param item to edit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param amount new quantity of item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected void editInventory(String item, int amount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c inventory.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if (inventory.get(i).name.contains(item)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                inventory.get(i).amount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                System.out.println(\"This place now has:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                System.out.println((i + 1) + \". \" + inventory.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            System.out.println(\"No items match your search!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 52
    }
  },
  {
    "path": "src/main/java/Items.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class Items {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    int amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    Items(String name, int amount) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String toString() { return (this.name + \" : \" + this.amount);}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 13
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Launcher{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import control.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.BookingConstants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * A GUI for control.Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Duke duke \u003d new Duke(BookingConstants.FILENAME, Constants.ROOMFILENAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.setTitle(\"Hall Booker\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "AmosChan97": 33
    }
  },
  {
    "path": "src/main/java/booking/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected LocalDateTime dateTimeStart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected LocalDateTime dateTimeEnd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Facility.booking.Booking constructor to make booking"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param username      the requestor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomcode      the specific room code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param description   what you are going to use the room for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param dateTimeStart when you are booking the facility"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param dateTimeEnd   when your booked period ends"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public Booking(String username, String roomcode, String description, String dateTimeStart, String dateTimeEnd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.venue \u003d roomcode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterEnd \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d LocalDateTime.parse(dateTimeStart, formatterStart);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeEnd \u003d LocalDateTime.parse(dateTimeEnd, formatterEnd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.name \u003d username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.status \u003d \"P\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public Booking (String roomcode, String username, String description, long atStart, long atEnd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.venue \u003d  roomcode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Instant instantStart \u003d Instant.ofEpochMilli(atStart);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Instant instantEnd \u003d Instant.ofEpochMilli(atEnd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d instantStart.atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeEnd \u003d instantEnd.atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Facility.booking.Booking constructor to generate booking entry from file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param username the requestor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomcode the venue"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param description for what use"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param atStart start date and time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param atEnd end date and time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param status request status"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public Booking(String username, String roomcode, String description, String atStart, String atEnd, String status) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.venue \u003d roomcode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Instant instantStart \u003d Instant.ofEpochMilli(Long.parseLong(atStart));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Instant instantEnd \u003d Instant.ofEpochMilli(Long.parseLong(atEnd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d instantStart.atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeEnd \u003d instantEnd.atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.name \u003d username;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * String version of the booking entry."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @return booking entry string version"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterEnd \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return name + \" \" + venue + \" \" + dateTimeStart.format(formatterStart) + \" to \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                + dateTimeEnd.format(formatterEnd) + \" \" +  status;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Version of entry to be stored in file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return this.name + \" | \" + this.venue + \" | \" + this.description + \" | \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                + this.dateTimeStart.getLong(ChronoField.EPOCH_DAY) + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                + this.dateTimeEnd.getLong(ChronoField.EPOCH_DAY) + \" | \" + this.status + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public LocalDateTime getDateTimeStart() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return this.dateTimeStart;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public LocalDateTime getDateTimeEnd() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return this.dateTimeEnd;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void setDescription(String newDescription) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void setStatus(String newstatus) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.status \u003d newstatus;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 107,
      "AmosChan97": 9
    }
  },
  {
    "path": "src/main/java/booking/BookingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.BookingConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class BookingList extends ArrayList\u003cBooking\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Create booking list from text file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param loader strings from text file containing booking info"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException if file format incorrect"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public BookingList(ArrayList\u003cString\u003e loader) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (String line : loader) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            String[] splitStr \u003d line.split(\" \\\\| \", 6);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            this.add(new Booking(splitStr[BookingConstants.USERNAME],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    splitStr[BookingConstants.VENUE], splitStr[BookingConstants.DESCRIPTION],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    splitStr[BookingConstants.TIMESTART], splitStr[BookingConstants.TIMEEND],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    splitStr[BookingConstants.STATUS]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public BookingList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * To check if a request with the same place and time slot has already been made."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param bookinglist the list of requests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomcode the room in question"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param timeStart the starting time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param timeEnd the ending time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @return if there is already a request with that venue and time slot"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static boolean checkBooking(BookingList bookinglist, String roomcode, String timeStart, String timeEnd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        DateTimeFormatter formatterEnd \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(timeStart, formatterStart);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.parse(timeEnd, formatterEnd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c bookinglist.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if (bookinglist.get(i).venue \u003d\u003d roomcode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                if ((bookinglist.get(i).dateTimeStart.isBefore(startTime)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        || bookinglist.get(i).dateTimeStart.isEqual(startTime))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        \u0026\u0026 (bookinglist.get(i).dateTimeEnd.isAfter(endTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        || bookinglist.get(i).dateTimeEnd.isEqual(endTime))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 50,
      "zkchang97": 2,
      "AmosChan97": 6
    }
  },
  {
    "path": "src/main/java/command/AddBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class AddBookingCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] datetime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String timeStart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private String room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@author Alex-Teo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Create new booking request."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * format is add NAME DESCRIPTION /at ROOM_CODE /from DATE TIMESTART /to TIMEEND"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException when entry is incorrect"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public AddBookingCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitStr.length \u003c\u003d 8) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please create your booking with the following format: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                   + \"name, description, roomcode, date and time\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!input.contains(\" /from \")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"Please add the date and time for your booking\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!input.contains(\" /to \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"Please add the end time of your booking\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        String temp \u003d input.substring(4); // name description /at roomcode /from dd/mm/yyyy hhmm /to dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitC \u003d temp.split(\" /at \", 2); //splitC[] \u003d {name, description, roomcode, dd/mm/yyyy hhmm /to dd/mm/yyyy hhmm)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitC.length \u003c 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please create your booking with the following format: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"description, roomcode, date and time\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitE \u003d splitC[0].split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.name \u003d splitE[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.description \u003d splitE[1]; // description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitD \u003d splitC[1].split(\" /from \", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.room \u003d splitD[0]; // roomcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.datetime \u003d splitD[1].split(\" /to \", 2); // datetime[] \u003d {dd/mm/yyyy hhmm, dd/mm/yyyy hhmm}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.timeStart \u003d datetime[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Executes the command to add a room to the system."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomList room list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param bookingList bookings list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param bookingstorage booking storage in command execution"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomstorage room storage in command execution"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param user current user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException if a clash in booking is found"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException if input entry is incorrect"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        Storage roomstorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Booking newBooking \u003d new Booking(name, room, description, timeStart, datetime[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean clash \u003d BookingList.checkBooking(bookingList, room, timeStart, datetime[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (clash) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! This slot is already filled, please choose another vacant one\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        bookingList.add(newBooking);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        bookingstorage.saveToFile(bookingList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this request:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                + newBooking.toString() + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                + \"Now there are \" + bookingList.size() + \" request(s) in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 83,
      "AmosChan97": 5
    }
  },
  {
    "path": "src/main/java/command/AddRoomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.AddRoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class AddRoomCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String roomcode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String[] datesplit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String timeslot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ zkchang97"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Creates a new room entry in the list of rooms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Format is addroom ROOMCODE /date DD/MM/YYYY /timeslot HH:MM AM/PM to HH:MM AM/PM"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException when format is incorrect"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public AddRoomCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"Please enter the following to add a room:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                    + \"addroom ROOMCODE /date DATE /timeslot TIMESLOT.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                    + \"DATE format: DD/MM/YYYY.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                    + \"TIMESLOT format: HH:MM AM/PM to HH:MM AM/PM.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (!input.contains(\" /date \")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"Please enter correct date for the room.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (!input.contains(\" /timeslot \")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"Please enter a timeslot for the room.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        // addroom ROOMCODE /date DATE /timeslot TIMESLOT"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        String tempAR \u003d input.substring(8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        splitC \u003d tempAR.split(\" /date \", 2); // splitC[] \u003d {ROOMCODE, DATE /timeslot TIMESLOT}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.roomcode \u003d splitC[0]; // ROOMCODE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.datesplit \u003d splitC[1].split(\" /timeslot \", 2); // datesplit[] \u003d\u003d {DATE, TIMESLOT}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.date \u003d datesplit[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.timeslot \u003d datesplit[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Executes the command to add a room to the system."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomList room list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param bookingList bookings list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param bookingstorage booking storage in command execution"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomstorage room storage in command execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param user current user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @throws IOException if input entry is incorrect"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                        Storage roomstorage, User user) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        AddRoom addroom \u003d new AddRoom(roomcode, date, timeslot);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        roomList.add(addroom);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        roomstorage.saveToFile(roomList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        ui.addToOutput(\"Got it, I\u0027ve added this room.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            + addroom.toString() + \"\\n\" + \"Now you have \" + roomList.size() + \" room(s) in the list.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 10,
      "zkchang97": 60
    }
  },
  {
    "path": "src/main/java/command/ApproveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class ApproveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String roomcode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private LocalDateTime dateTimeStart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String datetimeStartString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@author Alex-Teo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Approve a request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * format is approve name roomcode date time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException when entry is incorrect"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public ApproveCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitStr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please create the booking you want to edit with the following format: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"name, roomcode, start date and time\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitC \u003d input.split(\" \", 5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        name \u003d splitC[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        roomcode \u003d splitC[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!RoomList.checkRoom(roomcode,\"data\\\\roomlist.txt\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \"OOPS!!! This room doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        datetimeStartString \u003d splitC[3] + \" \" + splitC[4];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d LocalDateTime.parse(datetimeStartString, formatterStart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        Storage roomstorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (Booking i: bookingList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if ((i.getVenue() \u003d\u003d roomcode) \u0026\u0026 (i.getDateTimeStart() \u003d\u003d dateTimeStart) \u0026\u0026 (i.getName() \u003d\u003d name)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                i.setStatus(\"A\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                ui.addToOutput(\"This request has been approved!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                bookingstorage.saveToFile(bookingList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 62
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * command.Command to exit control.Duke programme."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * If \"bye\" is entered."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingList task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingStorage handles read write of text file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if IOException found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if control.Duke specific exception found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingStorage, Storage roomStorage, User user) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 2,
      "-": 22,
      "AmosChan97": 6
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import control.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class from which all Commands are the extended from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute command logic."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingList bookings list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingStorage handles read write of text file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param user Current user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if control.Duke specific exception found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if IO exception found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomlist, BookingList bookingList, Ui ui, Storage bookingStorage, Storage roomStorage, User user)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if date-time input is in valid format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTime date and time for some tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true is input is valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static boolean isValidDateTime(String dateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d  new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTimeFormat.parse(dateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected static boolean isAdd (String dateTime, TaskList tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d  new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if (tasks.get(i).toString().contains(dateTime)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 13,
      "zkchang97": 3,
      "-": 43,
      "AmosChan97": 7
    }
  },
  {
    "path": "src/main/java/command/CreateAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class CreateAccountCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ AmirAzhar"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Create new Account for user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * format is create email password username usertype"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public CreateAccountCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        File membersFile \u003d new File(\"data\\\\members.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        membersFile.createNewFile(); //if file already exists, won\u0027t create"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \" OOPS!!! Please create your account with the following format: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"email, password, username, usertype\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitC \u003d input.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (Login.checkExistence(splitC[1],\"data\\\\members.txt\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \"OOPS!!! There is already an account registered under that email!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!splitC[1].contains(\"@u.nus.edu\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \" OOPS!!! Please create an account using your NUS email ending with \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"@u.nus.edu\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitC[2].matches(\"[0-9]+\") || splitC[2].matches(\"[a-z]+\") || splitC[2].matches(\"[A-Z]+\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \"OOPS!!! Your password must contain at least \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"one alphabet, one number and no special characters!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(BookingList bookingList, Ui ui, Storage bookingStorage, User user)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        User newUser \u003d new User(splitC[1], splitC[2], splitC[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(\"data\\\\members.txt\", true));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.write(newUser.toWriteFile());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.newLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Your account has been successfully created!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 24,
      "AmosChan97": 1,
      "AmirAzhar": 33
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Booking deletedBooking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ AmosChan97"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Deletes a booking from the booking list based on the index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param input raw user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if no index is entered or index is not an integer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public DeleteCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (splitStr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please add the index for the booking you want to delete\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        input \u003d input.substring(7);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index should be a number\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void execute(RoomList roomlist, BookingList bookingList, Ui ui, Storage bookingStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        Storage roomStorage, User user) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (index \u003c 0 || index \u003e bookingList.size() - 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"OOPS!!! You have entered an index that is out of bounds\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        deletedBooking \u003d bookingList.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        bookingList.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            bookingStorage.saveToFile(bookingList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"OOPS!!! An error occurred while deleting your booking!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"This booking has been successfully removed:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + deletedBooking.toString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \"\\nYou now have \" + bookingList.size() + \" bookings in your list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "-": 20,
      "AmosChan97": 33
    }
  },
  {
    "path": "src/main/java/command/EditBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class EditBookingCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String roomcode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private LocalDateTime dateTimeStart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String datetimeStartString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@author Alex-Teo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Edit the description of a booking request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * format: edit roomcode Start date and time description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException when format not allowed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException when entry is incorrect"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public EditBookingCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitStr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please create the booking you want to edit with the following format: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"name, roomcode, start date and time, description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitC \u003d input.split(\" \", 6);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        name \u003d splitC[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        roomcode \u003d splitC[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!RoomList.checkRoom(roomcode,\"data\\\\roomlist.txt\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \"OOPS!!! This room doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        datetimeStartString \u003d splitC[3] + \" \" + splitC[4];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d LocalDateTime.parse(datetimeStartString, formatterStart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        Storage roomstorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (Booking i: bookingList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if ((i.getVenue() \u003d\u003d roomcode) \u0026\u0026 (i.getDateTimeStart() \u003d\u003d dateTimeStart) \u0026\u0026 (i.getName() \u003d\u003d name)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                i.setDescription(splitC[4]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                ui.addToOutput(\"The description of this request has been changed!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                bookingstorage.saveToFile(bookingList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 62
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ AmosChan97"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Prints to the UI a list containing all bookings made."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param roomList list of rooms"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingList bookings list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingStorage handles read write of bookings list file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param roomStorage handles read write of room list file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param user Current user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if there are no bookings"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        Storage roomStorage, User user) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (bookingList.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"OOPS! There are no bookings in your list\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Here are the bookings: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (int i \u003d 0; i \u003c bookingList.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(i + 1 + \". \" + bookingList.get(i).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 3,
      "-": 11,
      "AmosChan97": 20
    }
  },
  {
    "path": "src/main/java/command/ListRoomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class ListRoomCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ zkchang97"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Executes the command to list the rooms in the text file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomList list of rooms"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param bookingList bookings list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param bookingstorage booking storage in command execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomstorage room storage in command execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param user Current user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage, Storage roomstorage, User user) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (roomList.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"The room list is empty. Please add a room.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        ui.addToOutput(\"Here are the rooms in the room list: \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        for (int i \u003d 0; i \u003c roomList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            ui.addToOutput(i + 1 + \". \" + roomList.get(i).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 4,
      "zkchang97": 34
    }
  },
  {
    "path": "src/main/java/command/LoginCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class LoginCommand extends Command{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ AmirAzhar"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * User login"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public  LoginCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        File membersFile \u003d new File(\"data\\\\members.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        membersFile.createNewFile(); //if file already exists, won\u0027t create"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please login with NUS email and password\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitL \u003d input.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!splitL[1].contains(\"@u.nus.edu\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please use your NUS email, ending with u.nus.edu, for login!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingStorage, Storage roomStorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean isVerified \u003d Login.verifyLogin(splitL[1], splitL[2], \"data\\\\members.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (isVerified) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            Login.setCurrentUser(splitL[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"You have successfully logged in!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"\\u2639 OOPS!!! You have entered your email/password incorrectly.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 3,
      "AmosChan97": 10,
      "AmirAzhar": 36
    }
  },
  {
    "path": "src/main/java/command/LogoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@ AmirAzhar"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * User logout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input    from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public LogoutCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (Login.getCurrentUser().equals(\" \"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            throw new DukeException(\"You are not currently logged in!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingStorage, Storage roomStorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        Login.setCurrentUser(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        ui.addToOutput(\"You have succesfully logged out!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "AmirAzhar": 35
    }
  },
  {
    "path": "src/main/java/command/RejectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class RejectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String roomcode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private LocalDateTime dateTimeStart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private String datetimeStartString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    //@@author Alex-Teo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Approve a request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * format is reject name roomcode date time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException when entry is incorrect"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public RejectCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (splitStr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please create the booking you want to edit with the following format: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                    + \"name, roomcode, start date and time\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        splitC \u003d input.split(\" \", 5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        name \u003d splitC[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        roomcode \u003d splitC[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!RoomList.checkRoom(roomcode,\"data\\\\roomlist.txt\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            throw new DukeException(Constants.UNHAPPY + \"OOPS!!! This room doesn\u0027t exist!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        datetimeStartString \u003d splitC[3] + \" \" + splitC[4];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        DateTimeFormatter formatterStart \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTimeStart \u003d LocalDateTime.parse(datetimeStartString, formatterStart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void execute(RoomList roomList, BookingList bookingList, Ui ui, Storage bookingstorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                        Storage roomstorage, User user) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (Booking i: bookingList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if ((i.getVenue() \u003d\u003d roomcode) \u0026\u0026 (i.getDateTimeStart() \u003d\u003d dateTimeStart) \u0026\u0026 (i.getName() \u003d\u003d name)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                i.setStatus(\"R\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                ui.addToOutput(\"This request has been approved!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                bookingstorage.saveToFile(bookingList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 62
    }
  },
  {
    "path": "src/main/java/control/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package control;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.Room;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import storage.BookingConstants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.Guest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Main control.Duke class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * control.Duke is a chatbot that manage tasks for the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Storage bookingStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    private RoomList roomList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private Storage roomStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Constructor for control.Duke"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param bookingListFile path of text file containing bookings list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Duke(String bookingListFile, String roomListFile) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        user \u003d new Guest(\"guest\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        bookingStorage \u003d new Storage(bookingListFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        roomStorage \u003d new Storage(roomListFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            roomList \u003d new RoomList(roomStorage.load());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (FileNotFoundException | DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            bookingList \u003d new BookingList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     *  Main control.Duke logic run here"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ui.showUserInput(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, user.getLoginStatus());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                c.execute(roomList, bookingList, ui, bookingStorage, roomStorage, user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            } catch (DukeException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Main function of control.Duke"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param args input from command line"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        new Duke(BookingConstants.FILENAME, Constants.ROOMFILENAME).run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.setOutput(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Command c \u003d Parser.parse(input, user.getLoginStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            c.execute(roomList, bookingList, ui, bookingStorage, roomStorage, user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            System.out.println(ui.getOutput());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return ui.getOutput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (DukeException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 8,
      "zkchang97": 6,
      "AmosChan97": 70,
      "-": 4,
      "AmirAzhar": 2
    }
  },
  {
    "path": "src/main/java/control/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package control;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.AddRoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Parse input and execute respective user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Converts user input into commands for control.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if user enters wrong input format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static Command parse(String input, boolean loginStatus) throws DukeException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String[] splitStr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        switch (splitStr[0]) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"login\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new LoginCommand(input, splitStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"logout\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new LogoutCommand(input, splitStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"create\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new CreateAccountCommand(input, splitStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            return new AddBookingCommand(input, splitStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        case \"addroom\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            return new AddRoomCommand(input, splitStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        case \"listroom\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            return new ListRoomCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            return new EditBookingCommand(input, splitStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        case \"approve\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            return new ApproveCommand(input, splitStr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        case \"reject\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            return new RejectCommand(input, splitStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new DeleteCommand(input, splitStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 8,
      "zkchang97": 6,
      "AmosChan97": 28,
      "AmirAzhar": 9
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * control.Duke Exception class for exceptions unique to control.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message, Throwable throwable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, throwable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/room/AddRoom.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class AddRoom {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected String roomcode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    private String timeslot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Public constructor, returns the details of the room to be added."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomcode Room code"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param date Available booking date of the room"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param timeslot Available booking time slot of the room"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public AddRoom(String roomcode, String date, String timeslot) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.roomcode \u003d roomcode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.timeslot \u003d timeslot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Returns the format written into the room list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @return returns the statement and symbols as shown in room list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return (\"[RM]\" + this.roomcode + \" date: \" + this.date + \" timeslot: \" + this.timeslot);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Returns the format written into the text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @return returns the statement and symbols as shown in the text file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return (\"RM | \" + this.roomcode + \" | \" + this.date + \" | \" + this.timeslot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Getter, returns room code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @return the room code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String getRoomcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return this.roomcode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 43
    }
  },
  {
    "path": "src/main/java/room/Room.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public abstract class Room {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected String roomcode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected boolean isBooked;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected Date dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public Room(String roomcode) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.roomcode \u003d roomcode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.isBooked \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return (isBooked ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public void markAsBooked() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.isBooked \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        System.out.println(\"Nice! The room is now booked!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        System.out.println(\"    \" + this.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return \"[ \" + this.getStatusIcon() + \"] \" + this.roomcode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return this.roomcode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 36
    }
  },
  {
    "path": "src/main/java/room/RoomList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class RoomList extends ArrayList\u003cAddRoom\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Creates room list from text file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param loader Strings from text file containing room list info"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public RoomList(ArrayList\u003cString\u003e loader) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        for (String line : loader) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            String[] splitStr \u003d line.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            this.add(new AddRoom(splitStr[Constants.ROOMCODE],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                    splitStr[Constants.ROOMDATE], splitStr[Constants.ROOMTIMESLOT]));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Public constructor in Duke.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public RoomList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Checks if a room to be added is already present in the room list file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param roomcode Room code of the target room"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param filePath Directory of the text file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @return if the room already exists in the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @throws IOException if the input is in the wrong format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static boolean checkRoom(String roomcode,String filePath) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if(line.equals(roomcode))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 18,
      "zkchang97": 35
    }
  },
  {
    "path": "src/main/java/storage/BookingConstants.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class BookingConstants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final String FILENAME \u003d \"data\\\\bookingslist.txt\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int USERNAME \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int VENUE \u003d 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int TIMESTART \u003d 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int TIMEEND \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final int STATUS \u003d 5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 11
    }
  },
  {
    "path": "src/main/java/storage/Constants.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains project-wide constants."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final String FILENAME \u003d \"data\\\\duke.txt\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final String ROOMFILENAME \u003d \"data\\\\roomlist.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TYPE \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int ISDONE \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final int ISBOOKED \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final int ROOMCODE \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIME \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int NEEDS \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIMESTART \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIMEEND \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final int ROOMDATE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public static final int ROOMTIMESLOT \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static final String UNHAPPY \u003d \"☹\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "zkchang97": 6,
      "-": 7,
      "AmosChan97": 7
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.AddRoom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.RoomList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import room.Room;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.BookingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles read and write to text file to contain task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Text file to read or write."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private File fileToRead;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        fileToRead \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convert contents of text file to task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Tasklist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException if file not found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanFile \u003d new Scanner(fileToRead);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e textLoaded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        while (scanFile.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d scanFile.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            textLoaded.add(line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return textLoaded;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Save task list to text file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException for IO exception"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(fileToRead);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task i : tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            toWrite +\u003d i.toWriteFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        fileOutputStream.write(toWrite.getBytes());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public void saveToFile(BookingList bookingList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(fileToRead);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (Booking i : bookingList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            toWrite +\u003d i.toWriteFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        fileOutputStream.write(toWrite.getBytes());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public void saveToFile(RoomList roomList) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(fileToRead);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        for (AddRoom i : roomList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            toWrite +\u003d i.toWriteFile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        fileOutputStream.write(toWrite.getBytes());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 12,
      "zkchang97": 13,
      "-": 56,
      "AmosChan97": 2
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tasks which have a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists the task name and stores the deadline in Date format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Deadline Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task descriprtion"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by task deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Deadline Constructor from text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description of deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param date deadline date and time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Deadline(String i, String description, String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTime \u003d new Date(Long.parseLong(date));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String formatted for text file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"D | \" + boolToInt + \" | \" + this.description + \" | \" + this.dateTime.getTime() + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTime(Date newDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTime \u003d newDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "AmosChan97": 8
    }
  },
  {
    "path": "src/main/java/task/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected String after;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public DoAfter(String description, String after) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public DoAfter(String i, String description, String after) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return \"[DA]\" + super.toString() + \" (after: \" + this.after + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"DA | \" + boolToInt + \" | \" + this.description + \" | \" + this.after +  \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 20,
      "AmosChan97": 11
    }
  },
  {
    "path": "src/main/java/task/DoWithinPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "public class DoWithinPeriod extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * task.DoWithinPeriod constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param Period1 earliest date task can be completed by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param Period2 task should be completed by then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public DoWithinPeriod(String description, String Period1, String Period2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.start \u003d Period1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.end \u003d Period2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public DoWithinPeriod(String isDone, String description, String start, String end) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.isDone \u003d isDone.equals(\"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        return \"[DW]\" + super.toString() + \" (from: \" + start + \" til \" + end + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        return \"DW | \" + boolToInt + \" | \" + this.description + \" | \" + this.start + \" | \" + this.end + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wyinnnn": 40
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Events are tasks with a start and end time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected Date dateTimeStart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected Date dateTimeEnd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Event Constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atStart task time start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atEnd task time end"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Event(String description, String atStart, String atEnd) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.dateTimeStart \u003d sdf.parse(atStart);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.dateTimeEnd \u003d sdf.parse(atEnd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Event Constructor from text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description of event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atStart event date and time start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atEnd event date and time end"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Event(String i, String description, String atStart, String atEnd) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeStart \u003d new Date(Long.parseLong(atStart));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeEnd \u003d new Date(Long.parseLong(atEnd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTimeStart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \" to \" + dateTimeEnd + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeStart;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTimeStart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeStart;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTimeEnd() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeEnd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return \"E | \" + boolToInt + \" | \" + this.description + \" | \" + this.dateTimeStart.getTime() + \" | \" //saved as long"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + this.dateTimeEnd.getTime() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTimeStart(Date newDateTimeStart) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeStart \u003d newDateTimeStart;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTimeEnd(Date newDateTimeEnd) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeEnd \u003d newDateTimeEnd;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "-": 45,
      "AmosChan97": 37
    }
  },
  {
    "path": "src/main/java/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String needs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.FixedDuration constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param needs time needed to finish task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String needs) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public FixedDuration(String isDone, String description, String needs) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.isDone \u003d isDone.equals(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[F]\" + super.toString() + \" (needs: \" + this.needs + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"F | \" + boolToInt + \" | \" + this.description + \" | \" + this.needs + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "AmosChan97": 8
    }
  },
  {
    "path": "src/main/java/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * Tasks which have a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * Lists the task name and stores the deadline in Date format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Recurring task which will add a new task when the previous task is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param by task deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Recurring(String description, String by, String frequency) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Make a recurring task when reading from storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description of recurring task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param by dateTime of recurring task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param snooze isSnooze status"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param frequency of recurrence"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Recurring(String i, String description, String by, String snooze, String frequency) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return \"[R]\" + \" [\" + frequency + \"] \" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @return String formatted for text file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"R | \"  + boolToInt + \" | \" + this.description + \" | \" + this.by + \" | \" + frequency + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getFreq(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 6,
      "AmirAzhar": 77
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Class from which task. To do, task.Deadline and task.Event are extended from."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected String frequency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create task with a description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get status icon."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String status icon of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        System.out.println(\"    \" + this.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * check if task description contains a certain string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s string to find"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if description contains string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description.contains(s);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that will be stored in text file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description of recurring task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param dateTime of recurring task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param frequency of recurrence"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Recurring recreate(String description, String dateTime, String frequency) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return new Recurring(description, dateTime, frequency);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getFreq() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 3,
      "-": 57,
      "AmosChan97": 9,
      "AmirAzhar": 23
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create tasklist from text file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param loader strings from text file containing task info"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if file format incorrect"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e loader) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : loader) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] splitStr \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            switch (splitStr[Constants.TYPE]) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Todo(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION]));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Event(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIMESTART], splitStr[Constants.TIMEEND]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Deadline(splitStr[Constants.ISDONE],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.DESCRIPTION], splitStr[Constants.TIME]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new FixedDuration(splitStr[Constants.ISDONE],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.DESCRIPTION], splitStr[Constants.NEEDS]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"R\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Recurring(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIME], splitStr[4], splitStr[5]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"DA\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new DoAfter(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIME]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            case \"DW\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new DoWithinPeriod(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIMESTART], splitStr[Constants.TIMEEND]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"File format incorrect\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wyinnnn": 1,
      "-": 32,
      "AmosChan97": 23
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Todo Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor from text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Todo(String i, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"T | \" + boolToInt + \" | \" + this.description + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "AmosChan97": 2
    }
  },
  {
    "path": "src/main/java/ui/AnchorPaneNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class AnchorPaneNode extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    // Date associated with this pane"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create a anchor pane node. Date is not assigned in the constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param children children of the anchor pane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public AnchorPaneNode(Node... children) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Add action handler for mouse clicked"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.setOnMouseClicked(e -\u003e System.out.println(\"This pane\u0027s date is: \" + date));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 33
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 61
    }
  },
  {
    "path": "src/main/java/ui/FullCalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class FullCalendarView {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ArrayList\u003cAnchorPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create a calendar view"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param yearMonth year month to create the calendar of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public FullCalendarView(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setPrefSize(600, 400);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                AnchorPaneNode ap \u003d new AnchorPaneNode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ap.setPrefSize(200,200);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                calendar.add(ap,j,i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Days of the week labels"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Text[] dayNames \u003d new Text[]{ new Text(\"Sunday\"), new Text(\"Monday\"), new Text(\"Tuesday\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                new Text(\"Wednesday\"), new Text(\"Thursday\"), new Text(\"Friday\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                new Text(\"Saturday\") };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        GridPane dayLabels \u003d new GridPane();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dayLabels.setPrefWidth(600);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Integer col \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (Text txt : dayNames) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setPrefSize(200, 10);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setBottomAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            dayLabels.add(ap, col++, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create calendarTitle and buttons to change current month"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendarTitle \u003d new Text();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Button previousMonth \u003d new Button(\"\u003c\u003c\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        previousMonth.setOnAction(e -\u003e previousMonth());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Button nextMonth \u003d new Button(\"\u003e\u003e\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        nextMonth.setOnAction(e -\u003e nextMonth());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        HBox titleBar \u003d new HBox(previousMonth, calendarTitle, nextMonth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        titleBar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Populate calendar with the appropriate day numbers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(yearMonth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create the calendar view"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        view \u003d new VBox(titleBar, dayLabels, calendar);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Set the days of the calendar to correspond to the appropriate date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param yearMonth year and month of month to render"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void populateCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\") ) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Populate the calendar with day numbers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (AnchorPaneNode ap : allCalendarDays) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ap.getChildren().remove(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setDate(calendarDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setTopAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setLeftAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Change the title of the calendar"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public ArrayList\u003cAnchorPaneNode\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cAnchorPaneNode\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 124
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import control.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Controller for ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private AnchorPane calendarPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeCat.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getDukeDialog(ui.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendarPane.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                new FullCalendarView(YearMonth.now()).getView()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing control.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 66
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * To deal with user interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setOutput(\":( OOPS!!! File path not found. Creating directory /data/data.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void addToOutput(String string) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        output +\u003d string + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void showUserInput(String string) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getUserDialog(string, userImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show Welcome message on programme start."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setOutput(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void indent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setOutput(String text) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        output \u003d text;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "AmosChan97": 34
    }
  },
  {
    "path": "src/main/java/user/Guest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Guest extends User{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Guest(String username) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(username);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.userType \u003d \"G\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.email \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.password \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 10
    }
  },
  {
    "path": "src/main/java/user/Login.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class Login {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private static String currentUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * verfiyLogin verifies if the email and password input by user is a registered account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param email for login"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param password for login"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param filePath of members login and user info"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws FileNotFoundException when file to refer to is not found"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static boolean verifyLogin(String email, String password, String filePath) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String tempEmail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String tempPassword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String[] parts \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            tempEmail \u003d parts[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            tempPassword \u003d parts[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            if (email.trim().equals(tempEmail.trim()) \u0026\u0026 password.trim().equals(tempPassword.trim())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                setCurrentUser(tempEmail);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static String getCurrentUser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static void setCurrentUser(String email) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        currentUser \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * checkExistance checks if the email supplied exists in the user list or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param email email input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param filePath the file we are referring to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @return boolean value \"found\" if email ca be already found in system"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @throws IOException when line read error occurs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static boolean checkExistence(String email,String filePath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String[] parts \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if(parts[0].trim().equals(email.trim())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public static boolean checkUsername(String username, String filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean exists \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            String[] parts \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if(!parts[0].trim().equals(username.trim())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                exists \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return exists;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static User getUser(String username, String filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        boolean exists \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            String[] parts \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (parts[0].trim().equals(username.trim())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                User validUser \u003d new User(parts[0], parts[1], parts[2]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                setCurrentUser(parts[0]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                return validUser;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return new Guest(\"guest\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 29,
      "AmosChan97": 18,
      "AmirAzhar": 62
    }
  },
  {
    "path": "src/main/java/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String userType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected boolean loginStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param email NUS email (xxx@u.nus.edu)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param password alphanumerical with no special characters"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param username preferably name of the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public User(String email, String password, String username){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public User(String username, String userType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public User (String username) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return email + \" | \" + password + \" | \" + username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return loginStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setLoginStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        loginStatus \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 8,
      "AmosChan97": 13,
      "AmirAzhar": 25
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"1100.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.6\" prefHeight\u003d\"600.0\" prefWidth\u003d\"1200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                  \u003cAnchorPane fx:id\u003d\"calendarPane\" layoutX\u003d\"235.0\" layoutY\u003d\"120.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"30.0\" AnchorPane.rightAnchor\u003d\"30.0\" AnchorPane.topAnchor\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                            \u003cVBox fx:id\u003d\"dialogContainer\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 33
    }
  },
  {
    "path": "src/test/java/AddBookingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import booking.Booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class AddBookingTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    void testAddBooking() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        String user \u003d \"Bob\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String room \u003d \"room4\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String description \u003d \" study\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String dateTimeStart \u003d \"22/12/2019 1100\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String timeEnd \u003d \"22/12/2019 1200\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        User temp \u003d new User(\"dummy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Booking newBooking \u003d new Booking(user, room, description, dateTimeStart, timeEnd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        assertEquals(newBooking.toString(), \"Bob room4 22/12/2019 1100 to 22/12/2019 1200 P\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 3,
      "AmosChan97": 16
    }
  },
  {
    "path": "src/test/java/DoAfterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import task.DoAfter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class DoAfterTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    void doAfter() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        DoAfter doafter \u003d new DoAfter(\"eat\", \"2 hours\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        assertEquals(doafter.toString(), \"[DA][✘] [A] eat (after: 2 hours)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 12
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    void testEvent() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Event event \u003d new Event(\"dinner\", \"28/9/2019 1800\", \"28/9/2019 2000\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                \"[E][✘] dinner (at: Sat Sep 28 18:00:00 SGT 2019 to Sat Sep 28 20:00:00 SGT 2019)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 5,
      "-": 9
    }
  }
]
