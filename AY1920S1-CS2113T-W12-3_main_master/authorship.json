[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.base\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class Booking /*extends Facility*/ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected int pax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * Facility.Booking constructor to make booking"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param roomcode the specific room code"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param timing when you are booking the facility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     * @param people how many people you are accommodating"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public Booking (String roomcode, String timing, String people) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.venue \u003d roomcode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.pax \u003d Integer.parseInt(people);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/mm/yyyy HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(timing, formatter); //add start time and end time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/mm/yyyy HH:mm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return venue + \" \" + dateTime.format(formatter) + \" \" + pax;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 34
    }
  },
  {
    "path": "src/main/java/EventSpace.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class EventSpace extends Facility {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected EventSpace(String roomCode, int Capacity) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        super(roomCode, Capacity);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 6
    }
  },
  {
    "path": "src/main/java/Facility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class Facility {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String roomCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected String Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected ArrayList \u003cItems\u003e inventory; //convert to 2d array"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected int capacity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected Facility(String roomCode, int capacity) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.roomCode \u003d roomCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected void addInventory(String item, int amount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        Items entry \u003d new Items(item, amount);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        inventory.add(entry);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected void editInventory(String item, int amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c inventory.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if (inventory.get(i).name.contains(item)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                inventory.get(i).amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                System.out.println(\"This place now has:\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                System.out.println((i + 1) + \". \" + inventory.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            //ui.showString(\"No items match your search!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            System.out.println(\"No items match your search!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 43
    }
  },
  {
    "path": "src/main/java/Items.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class Items {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    int amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    Items(String name, int amount) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    public String toString() { return (this.name + \" : \" + this.amount);}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 13
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Launcher{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import control.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * A GUI for control.Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Duke duke \u003d new Duke(Constants.FILENAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.setTitle(\"Hall Booker\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 33
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * command.Command to exit control.Duke programme."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If \"bye\" is entered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage handles read write of text file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if IOException found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if control.Duke specific exception found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "AmosChan97": 2
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class from which all Commands are the extended from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute command logic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage handles read write of text file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if control.Duke specific exception found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if IO exception found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if date-time input is in valid format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTime date and time for some tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true is input is valid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static boolean isValidDateTime(String dateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d  new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTimeFormat.parse(dateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    protected static boolean isAdd (String dateTime, TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d  new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            if (tasks.get(i).toString().contains(dateTime)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 12,
      "-": 45,
      "AmosChan97": 3
    }
  },
  {
    "path": "src/main/java/command/CreateAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class CreateAccountCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * Create new Account for user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public  CreateAccountCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        File membersFile \u003d new File(\"data\\\\members.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        membersFile.createNewFile(); //if file already exists, won\u0027t create"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (splitStr.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please create your account with the following format: email, password, username, usertype\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitC \u003d input.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if(Login.checkExistence(splitC[1],\"data\\\\members.txt\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! There is already an account registered under that email!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!splitC[1].contains(\"@u.nus.edu\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please create an account using your NUS email ending with @u.nus.edu\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (splitC[2].matches(\"[0-9]+\") || splitC[2].matches(\"[a-z]+\") || splitC[2].matches(\"[A-Z]+\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Your password must contain at least one alphabet, one number and no special characters!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!splitC[4].contains(\"A\") \u0026\u0026 !splitC[4].contains(\"R\") \u0026\u0026 !splitC[4].contains(\"C\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Your userType can only be one of the following: A (Admin), R (Resident) or C (Club Head)!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        User newUser \u003d new User(splitC[1], splitC[2], splitC[3], splitC[4]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(\"data\\\\members.txt\", true));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.write(newUser.toWriteFile());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.newLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Your account has been successfully created!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 6,
      "AmirAzhar": 41
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to interpret task.Deadline command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * String array to contain the parts of the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    String[] splitD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for task.Deadline command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input raw user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr string array containing the individual words from user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if user input does not follow correct format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlineCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String tempD \u003d input.substring(9);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tempD.contains(\" /by \")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please add a deadline for the task.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitD \u003d tempD.split(\" /by \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidDateTime(splitD[1])) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw  new DukeException(\"Please enter correct date time format: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage handles read write of text file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException for IO exception"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline deadline \u003d new Deadline(splitD[0], splitD[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + deadline.toString() + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "AmosChan97": 3
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int num;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Command to delete a task from task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add the index of the task you want to remove\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.num \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Run the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage handles read write of text file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException for control.Duke specific exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if IO exception found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.num \u003c 1 || this.num \u003e tasks.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That task is not in your list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                + tasks.get(this.num - 1).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(this.num - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "AmosChan97": 3
    }
  },
  {
    "path": "src/main/java/command/DoAfterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import task.DoAfter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": " * Command to add new DoAfter tasks to task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    String[] splitD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * Creates new To Do to be done after a specific task/time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param input input from user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param splitStr tokenized input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @throws DukeException if description is empty or format not followed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public DoAfterCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of todo cannot be empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        String tempD \u003d input.substring(8);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        if (!tempD.contains(\" /after \")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a time for the task.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.splitD \u003d tempD.split(\" /after \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param tasks task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @param storage handles read write of text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        DoAfter after \u003d new DoAfter(splitD[0], splitD[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        tasks.add(after);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                after.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "                \"Now you have \" + tasks.size() + \" task(s) in the list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 48,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/command/DoWithinPeriodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import task.DoWithinPeriod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": " * command.Command to add period for task to be completed within."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "public class DoWithinPeriodCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String[] doWithin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String[] periods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * Create new To Do with fixed duration."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @throws DukeException if description empty or format not followed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public DoWithinPeriodCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of todo with duration cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        String tempD \u003d input.substring(8);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        if (!tempD.contains(\" /period \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a period for the task to be completed within.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        if (!tempD.contains(\" /til \")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter task period correctly: \u003cdate_1\u003e /til \u003cdate_2\u003e \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.doWithin \u003d tempD.split(\" /period \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.periods \u003d doWithin[1].split(\"/til\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        DoWithinPeriod duration \u003d new DoWithinPeriod(doWithin[0], periods[0], periods[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        tasks.add(duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "                + duration.toString() + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" task(s) in the list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wyinnnn": 51,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * command.Command to mark task as done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int num;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add the index of the task you have completed\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (num \u003c 1 || num \u003e tasks.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That task is not in your list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.get(num - 1).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (tasks.get(num - 1).toString().contains(\"[R]\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String tempDesc \u003d tasks.get(num - 1).getDesc();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String tempFreq \u003d tasks.get(num - 1).getFreq();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            Date originalDate \u003d tasks.get(num - 1).getBy();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            SimpleDateFormat sdfDate \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            if (tempFreq.equals(\"DAY\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.setTime(originalDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Date newDate \u003d c.getTime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                String strDate \u003d sdfDate.format(newDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Recurring recurring \u003d tasks.get(num - 1).recreate(tempDesc, strDate, tempFreq);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                tasks.add(recurring);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            } else if (tempFreq.equals(\"WEEK\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.setTime(originalDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.add(Calendar.WEEK_OF_YEAR, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Date newDate \u003d c.getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                String strDate \u003d sdfDate.format(newDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Recurring recurring \u003d tasks.get(num - 1).recreate(tempDesc, strDate, tempFreq);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                tasks.add(recurring);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            } else if (tempFreq.equals(\"MONTH\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.setTime(originalDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                c.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Date newDate \u003d c.getTime();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                String strDate \u003d sdfDate.format(newDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                Recurring recurring \u003d tasks.get(num - 1).recreate(tempDesc, strDate, tempFreq);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                tasks.add(recurring);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"I\u0027ve also repeated the same task for the following \" + tempFreq.toLowerCase() + \"!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "AmosChan97": 1,
      "AmirAzhar": 37
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * command.Command to create and save events"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    String[] splitE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    String[] startEnd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "    boolean canAdd \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create new Event object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if description empty or format not followed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String tempD \u003d input.substring(6);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tempD.contains(\" /at \")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a event for the task.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.splitE \u003d tempD.split(\" /at \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (splitE.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add start and end times for the task.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.startEnd \u003d splitE[1].split(\" to \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (startEnd.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add start and end times for the task.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (!isValidDateTime(startEnd[0])) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw  new DukeException(\"Please enter correct date time format: dd/mm/yyyy hhmm to dd/mm/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (!isValidDateTime(startEnd[1])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw  new DukeException(\"Please enter correct date time format: dd/mm/yyyy hhmm to dd/mm/yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Event event \u003d new Event(splitE[0], startEnd[0], startEnd[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        if (canAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            tasks.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    + event.toString() + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    + \"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 2,
      "-": 36,
      "AmosChan97": 22
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * command.Command to find and display tasks the user searches for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * User input text to search."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String textToFind;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Command to find a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when format not followed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input a string to search\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.textToFind \u003d input.substring(5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tasks.get(i).contains(textToFind)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(i + 1 + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"No items match your search!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/command/FindFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class FindFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ArrayList\u003cEvent\u003e scheduleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Date freeTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Date dateNow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Command to find the next free n number of hours in the schedule."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param splitStr from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public FindFreeTimesCommand(String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input the number of hours of free time you need\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            hours \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Number of hours needs to be an integer!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (hours \u003c 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a number \u003e 0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dateNow \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (Task i : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (i.getClass() \u003d\u003d Event.class) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Event temp \u003d (Event) i;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                if (temp.getDateTimeStart().after(dateNow) || temp.getDateTimeEnd().after(dateNow)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    scheduleList.add((Event) i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        scheduleList.sort("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Comparator.comparing(Task::getDateTime));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Date timeUntil \u003d addHoursToDate(dateNow, this.hours);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            freeTime \u003d dateNow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } else if (scheduleList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Event onlyEvent \u003d scheduleList.get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (timeUntil.before(onlyEvent.getDateTimeStart())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                freeTime \u003d dateNow;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            } else if (dateNow.after(onlyEvent.getDateTimeEnd())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                freeTime \u003d dateNow;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                freeTime \u003d onlyEvent.getDateTimeEnd();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Date currTime \u003d dateNow;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            for (int i \u003d 1; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                timeUntil \u003d addHoursToDate(currTime, hours);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Event first \u003d scheduleList.get(i - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Event second \u003d scheduleList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                if (currTime.after(first.getDateTimeEnd()) \u0026\u0026 timeUntil.before(second.getDateTimeStart())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    freeTime \u003d currTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                if (found) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                Event last \u003d scheduleList.get(scheduleList.size() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                freeTime \u003d last.getDateTimeEnd();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Next available time slot is: \" + freeTime.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * This method adds a specified number of hours to the date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param date the current date"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param hours number of hours to be added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @return new date after adding the hours"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date addHoursToDate(Date date, int hours) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.add(Calendar.HOUR_OF_DAY, hours);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 102
    }
  },
  {
    "path": "src/main/java/command/FixedDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.FixedDuration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * command.Command to add fixed duration to task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDurationCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    String[] splitD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create new To Do with fixed duration."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if description empty or format not followed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDurationCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of todo with duration cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String tempD \u003d input.substring(9);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tempD.contains(\" /needs \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a duration for the task.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitD \u003d tempD.split(\" /needs \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FixedDuration duration \u003d new FixedDuration(splitD[0], splitD[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(duration);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + duration.toString() + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" task(s) in the list\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "AmosChan97": 4
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * command.Command to list all tasks in task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! There are no tasks in your list\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ui.addToOutput(i + 1 + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/command/LoginCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import user.Login;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class LoginCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * User login"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if format not followed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public  LoginCommand(String input, String[] splitStr) throws DukeException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        File membersFile \u003d new File(\"data\\\\members.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        membersFile.createNewFile(); //if file already exists, won\u0027t create"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please login with NUS email and password\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitL \u003d input.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!splitL[1].contains(\"@u.nus.edu\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please use your NUS email, ending with u.nus.edu, for login!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean isVerified \u003d Login.verifyLogin(splitL[1], splitL[2], \"data\\\\members.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (isVerified)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"You have successfully logged in!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"\\u2639 OOPS!!! You have entered your email/password incorrectly.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 4,
      "AmirAzhar": 38
    }
  },
  {
    "path": "src/main/java/command/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.Recurring;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * command.Command to create a recurring task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitR1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    private String[] splitR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * Create new Event object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param splitStr tokenized input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws DukeException if description empty or format not followed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public RecurringCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a recurring task cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String tempR \u003d input.substring(10);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!tempR.contains(\" /at \")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a date for the task.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!tempR.contains(\"/every\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add a frequency for the recurrence: Day, Week or Month.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitR1 \u003d tempR.split(\"/every\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.splitR \u003d splitR1[0].split(\" /at \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        if (!isValidDateTime(splitR[1])) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            throw  new DukeException(\"Please enter correct date time format: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        Recurring recurring \u003d new Recurring(splitR[0], splitR[1], splitR1[1].substring(1).toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        tasks.add(recurring);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                + recurring.toString() + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 1,
      "AmirAzhar": 52
    }
  },
  {
    "path": "src/main/java/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private int num;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private String[] split;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Postpone task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if input is incorrect format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public SnoozeCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add the index of the task you want to snooze\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String temp \u003d input.substring(7);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (!temp.contains(\" /by \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add the time you want to postpone the task to!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.split \u003d temp.split(\" /by \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.num \u003d Integer.parseInt(split[0]) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.hours \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input an integer for the task index!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Run the command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage handles read write of text file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "      * @throws IOException for IO exceptions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (this.num \u003c 0 || this.num \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That task is not in your list\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (tasks.get(num) instanceof Deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Date newDate \u003d tasks.get(num).getDateTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            newDate \u003d addHoursToDate(newDate, hours);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ((Deadline) tasks.get(num)).setDateTime(newDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } else if (tasks.get(num) instanceof Event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Date newStartDate \u003d ((Event) tasks.get(num)).getDateTimeStart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Date newEndDate \u003d ((Event) tasks.get(num)).getDateTimeEnd();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            newStartDate \u003d addHoursToDate(newStartDate, hours);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            newEndDate \u003d addHoursToDate(newEndDate, hours);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ((Event) tasks.get(num)).setDateTimeStart(newStartDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ((Event) tasks.get(num)).setDateTimeEnd(newEndDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! This task cannot be postponed!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I have postponed this task by \" + hours + \" hours.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(tasks.get(num).toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * This method adds n hours to a date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param date current date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param hours number of hours to be added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @return new date after addition"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date addHoursToDate(Date date, int hours) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.add(Calendar.HOUR_OF_DAY, hours);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "-": 21,
      "AmosChan97": 62
    }
  },
  {
    "path": "src/main/java/command/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Command to add new Todo to task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create a Todo task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException for wrong user input format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoCommand(String input, String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.string \u003d input.substring(5).replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(this.string);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui.addToOutput(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + todo.toString() + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/command/UpcomingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * command.Command to show tasks in the upcoming week"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpcomingCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Based on current CPU Date, search for any tasks due in 7 days."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param tasks tasklist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"MMM dd\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime dateNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter myFormatObj \u003d DateTimeFormatter.ofPattern(\"MMM dd\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Here are your tasks due in the upcoming week:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            String formattedDate \u003d dateNow.format(myFormatObj);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime nextDay \u003d dateNow.plusDays(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            String formattedNextDay \u003d nextDay.format(myFormatObj);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            for (int j \u003d 0; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tasks.get(j).toString().contains(formattedNextDay)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    Date dateBefore \u003d sdf.parse(formattedDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    Date dateAfter \u003d sdf.parse(formattedNextDay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    long difference \u003d dateAfter.getTime() - dateBefore.getTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                    long daysTo \u003d (difference/(1000 * 60 * 60 * 24));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    if (daysTo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                        System.out.println(\"    \" + counter + \". \" + tasks.get(j).toString() + \" -\u003e [Due TODAY]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        System.out.println(\"    \" + counter + \". \" + tasks.get(j).toString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                                + \" -\u003e [Due in: \" + daysTo + \" Day(s)]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"You have 0 tasks due in the upcoming week\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(\"You have \" + counter + \" tasks due in the upcoming week.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "AmosChan97": 11,
      "AmirAzhar": 10
    }
  },
  {
    "path": "src/main/java/command/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private TaskList scheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    Date dateToView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    Date dateAfter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * View the schedule on a certain date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param splitStr tokenized user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if input format is incorrect"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public ViewScheduleCommand(String[] splitStr) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please add the date which you want to view!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        scheduleList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            dateToView \u003d sdf.parse(splitStr[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"Please enter date time format correctly: dd/mm/yyyy\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        c.setTime(dateToView);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dateAfter \u003d c.getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task i : tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if ((i.getClass() \u003d\u003d Event.class || i.getClass() \u003d\u003d Deadline.class)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                \u0026\u0026 i.getDateTime().getTime() - dateToView.getTime() \u003e\u003d 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                \u0026\u0026 dateAfter.getTime() - i.getDateTime().getTime() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                scheduleList.add(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        scheduleList.sort("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                Comparator.comparing(Task::getDateTime));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task i : scheduleList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.addToOutput(i.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "AmosChan97": 30
    }
  },
  {
    "path": "src/main/java/control/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package control;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Main control.Duke class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * control.Duke is a chatbot that manage tasks for the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Constructor for control.Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath path of text file containing task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException | DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     *  Main control.Duke logic run here"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ui.showUserInput(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Main function of control.Duke"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args input from command line"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(Constants.FILENAME).run();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ui.setOutput(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return ui.getOutput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (DukeException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 19,
      "-": 55
    }
  },
  {
    "path": "src/main/java/control/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package control;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Parse input and execute respective user command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Converts user input into commands for control.Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param input from user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @throws DukeException if user enters wrong input format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static Command parse(String input) throws DukeException, IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String[] splitStr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        switch (splitStr[0]) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new DoneCommand(splitStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new DeadlineCommand(input, splitStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new TodoCommand(input, splitStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new EventCommand(input, splitStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new DeleteCommand(splitStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new FindCommand(input, splitStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"upcoming\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new UpcomingCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"viewschedule\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new ViewScheduleCommand(splitStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new SnoozeCommand(input, splitStr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        case \"duration\" :"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            return new FixedDurationCommand(input, splitStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        case \"findfree\" :"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            return new FindFreeTimesCommand(splitStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"recurring\" :"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new RecurringCommand(input, splitStr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        case \"doafter\" :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "            return new DoAfterCommand(input, splitStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        case \"dowithin\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            return new DoWithinPeriodCommand(input, splitStr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"login\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new LoginCommand(input, splitStr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        case \"create\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            return new CreateAccountCommand(input, splitStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 1,
      "zkchang97": 4,
      "wyinnnn": 2,
      "AmosChan97": 42,
      "AmirAzhar": 12
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * control.Duke Exception class for exceptions unique to control.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message, Throwable throwable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, throwable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "AmosChan97": 1
    }
  },
  {
    "path": "src/main/java/storage/Constants.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains project-wide constants."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILENAME \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TYPE \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int ISDONE \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIME \u003d 3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int NEEDS \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIMESTART \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static final int TIMEEND \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "AmosChan97": 7
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tasks which have a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists the task name and stores the deadline in Date format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Deadline Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task descriprtion"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by task deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Deadline Constructor from text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description of deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param date deadline date and time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Deadline(String i, String description, String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTime \u003d new Date(Long.parseLong(date));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String formatted for text file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"D | \" + boolToInt + \" | \" + this.description + \" | \" + this.dateTime.getTime() + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTime(Date newDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTime \u003d newDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "AmosChan97": 8
    }
  },
  {
    "path": "src/main/java/task/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    protected String after;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public DoAfter(String description, String after) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public DoAfter(String i, String description, String after) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        return \"[DA]\" + super.toString() + \" (after: \" + this.after + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"DA | \" + boolToInt + \" | \" + this.description + \" | \" + this.after +  \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 20,
      "AmosChan97": 11
    }
  },
  {
    "path": "src/main/java/task/DoWithinPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "public class DoWithinPeriod extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * task.DoWithinPeriod constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param Period1 earliest date task can be completed by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     * @param Period2 task should be completed by then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public DoWithinPeriod(String description, String Period1, String Period2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.start \u003d Period1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.end \u003d Period2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public DoWithinPeriod(String isDone, String description, String start, String end) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        this.isDone \u003d isDone.equals(\"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        return \"[DW]\" + super.toString() + \" (from: \" + start + \" til \" + end + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "        return \"DW | \" + boolToInt + \" | \" + this.description + \" | \" + this.start + \" | \" + this.end + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wyinnnn": 41
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Events are tasks with a start and end time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected Date dateTimeStart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected Date dateTimeEnd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Event Constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atStart task time start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atEnd task time end"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Event(String description, String atStart, String atEnd) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.dateTimeStart \u003d sdf.parse(atStart);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            this.dateTimeEnd \u003d sdf.parse(atEnd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            throw new DukeException(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Event Constructor from text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description of event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atStart event date and time start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param atEnd event date and time end"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Event(String i, String description, String atStart, String atEnd) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeStart \u003d new Date(Long.parseLong(atStart));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeEnd \u003d new Date(Long.parseLong(atEnd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTimeStart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \" to \" + dateTimeEnd + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeStart;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTimeStart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeStart;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Date getDateTimeEnd() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return this.dateTimeEnd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"E | \" + boolToInt + \" | \" + this.description + \" | \" + this.dateTimeStart.getTime() + \" | \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + this.dateTimeEnd.getTime() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTimeStart(Date newDateTimeStart) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeStart \u003d newDateTimeStart;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDateTimeEnd(Date newDateTimeEnd) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.dateTimeEnd \u003d newDateTimeEnd;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "AmosChan97": 38
    }
  },
  {
    "path": "src/main/java/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String needs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.FixedDuration constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param needs time needed to finish task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String needs) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public FixedDuration(String isDone, String description, String needs) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.isDone \u003d isDone.equals(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[F]\" + super.toString() + \" (needs: \" + this.needs + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"F | \" + boolToInt + \" | \" + this.description + \" | \" + this.needs + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "AmosChan97": 8
    }
  },
  {
    "path": "src/main/java/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * Tasks which have a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " * Lists the task name and stores the deadline in Date format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Recurring task which will add a new task when the previous task is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param by task deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Recurring(String description, String by, String frequency) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Make a recurring task when reading from storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description of recurring task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param by dateTime of recurring task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param snooze isSnooze status"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param frequency of recurrence"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Recurring(String i, String description, String by, String snooze, String frequency) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            this.dateTime \u003d sdf.parse(by);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            System.out.println(\"Please enter date time format correctly: dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return \"[R]\" + \" [\" + frequency + \"] \" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @return String formatted for text file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        int boolToInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"R | \"  + boolToInt + \" | \" + this.description + \" | \" + this.by + \" | \" + frequency + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getFreq(){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 6,
      "AmirAzhar": 77
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Class from which task. To do, task.Deadline and task.Event are extended from."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    protected String frequency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alex-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create task with a description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get status icon."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String status icon of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        System.out.println(\"    \" + this.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * check if task description contains a certain string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s string to find"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if description contains string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description.contains(s);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that will be stored in text file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param description of recurring task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param dateTime of recurring task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param frequency of recurrence"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Recurring recreate(String description, String dateTime, String frequency) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return new Recurring(description, dateTime, frequency);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String getFreq() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alex-Teo": 3,
      "-": 57,
      "AmosChan97": 9,
      "AmirAzhar": 23
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import storage.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create tasklist from text file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param loader strings from text file containing task info"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if file format incorrect"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e loader) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : loader) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] splitStr \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            switch (splitStr[Constants.TYPE]) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Todo(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION]));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Event(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIMESTART], splitStr[Constants.TIMEEND]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Deadline(splitStr[Constants.ISDONE],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.DESCRIPTION], splitStr[Constants.TIME]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new FixedDuration(splitStr[Constants.ISDONE],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.DESCRIPTION], splitStr[Constants.NEEDS]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"R\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new Recurring(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIME], splitStr[4], splitStr[5]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            case \"DA\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new DoAfter(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIME]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wyinnnn"
        },
        "content": "            case \"DW\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                this.add(new DoWithinPeriod(splitStr[Constants.ISDONE], splitStr[Constants.DESCRIPTION],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        splitStr[Constants.TIMESTART], splitStr[Constants.TIMEEND]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"File format incorrect\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wyinnnn": 1,
      "-": 32,
      "AmosChan97": 22
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * task.Todo Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor from text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i isDone status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public Todo(String i, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d i.equals(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that is formatted for the text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int boolToInt \u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"T | \" + boolToInt + \" | \" + this.description + \" | \" + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "AmosChan97": 2
    }
  },
  {
    "path": "src/main/java/ui/AnchorPaneNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class AnchorPaneNode extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    // Date associated with this pane"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create a anchor pane node. Date is not assigned in the constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param children children of the anchor pane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public AnchorPaneNode(Node... children) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Add action handler for mouse clicked"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.setOnMouseClicked(e -\u003e System.out.println(\"This pane\u0027s date is: \" + date));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 33
    }
  },
  {
    "path": "src/main/java/ui/CalendarController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class CalendarController {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    // Get the pane to put the calendar on"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML Pane calendarPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 11
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 61
    }
  },
  {
    "path": "src/main/java/ui/FullCalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class FullCalendarView {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ArrayList\u003cAnchorPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Create a calendar view"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param yearMonth year month to create the calendar of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public FullCalendarView(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setPrefSize(600, 400);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                AnchorPaneNode ap \u003d new AnchorPaneNode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ap.setPrefSize(200,200);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                calendar.add(ap,j,i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Days of the week labels"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Text[] dayNames \u003d new Text[]{ new Text(\"Sunday\"), new Text(\"Monday\"), new Text(\"Tuesday\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                new Text(\"Wednesday\"), new Text(\"Thursday\"), new Text(\"Friday\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                new Text(\"Saturday\") };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        GridPane dayLabels \u003d new GridPane();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dayLabels.setPrefWidth(600);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Integer col \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (Text txt : dayNames) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setPrefSize(200, 10);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setBottomAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            dayLabels.add(ap, col++, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create calendarTitle and buttons to change current month"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendarTitle \u003d new Text();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Button previousMonth \u003d new Button(\"\u003c\u003c\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        previousMonth.setOnAction(e -\u003e previousMonth());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Button nextMonth \u003d new Button(\"\u003e\u003e\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        nextMonth.setOnAction(e -\u003e nextMonth());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        HBox titleBar \u003d new HBox(previousMonth, calendarTitle, nextMonth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        titleBar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Populate calendar with the appropriate day numbers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(yearMonth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Create the calendar view"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        view \u003d new VBox(titleBar, dayLabels, calendar);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Set the days of the calendar to correspond to the appropriate date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * @param yearMonth year and month of month to render"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void populateCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\") ) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Populate the calendar with day numbers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        for (AnchorPaneNode ap : allCalendarDays) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                ap.getChildren().remove(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setDate(calendarDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setTopAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.setLeftAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        // Change the title of the calendar"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public ArrayList\u003cAnchorPaneNode\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cAnchorPaneNode\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 124
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import control.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " * Controller for ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private AnchorPane calendarView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeCat.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getDukeDialog(ui.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing control.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 60
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * To deal with user interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setOutput(\":( OOPS!!! File path not found. Creating directory /data/data.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void addToOutput(String string) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        output +\u003d string + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void showUserInput(String string) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                DialogBox.getUserDialog(string, userImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show Welcome message on programme start."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        setOutput(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void indent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public void setOutput(String text) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        output \u003d text;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "AmosChan97": 34
    }
  },
  {
    "path": "src/main/java/user/Login.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class Login{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * verfiyLogin verifies if the email and password input by user is a registered account"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param email for login"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param password for login"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param filePath of members login and user info"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static boolean verifyLogin(String email, String password, String filePath) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String tempEmail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String tempPassword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String[] parts \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            tempEmail \u003d parts[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            tempPassword \u003d parts[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            if (email.trim().equals(tempEmail.trim()) \u0026\u0026 password.trim().equals(tempPassword.trim()))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public static boolean checkExistence(String email,String filePath) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        while (line !\u003d null){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            String[] parts \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            if(parts[0].trim().equals(email.trim()))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmirAzhar": 50
    }
  },
  {
    "path": "src/main/java/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "package user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    protected String userType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param email NUS email (xxx@u.nus.edu)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param password alphanumerical with no special characters"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param username preferably name of the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     * @param userType A (Admin), R (Resident) or C (Club Head)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public User(String email, String password, String username, String userType){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        this.userType \u003d userType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    public String toWriteFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "        return email + \" | \" + password + \" | \" + username + \" | \" + userType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmirAzhar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmirAzhar": 26
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.66110183639399\" prefHeight\u003d\"600.0\" prefWidth\u003d\"1200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "          \u003cAnchorPane fx:id\u003d\"calendarView\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                    \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 30
    }
  },
  {
    "path": "src/test/java/DoAfterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import task.DoAfter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "public class DoAfterTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zkchang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    void doAfter() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        DoAfter doafter \u003d new DoAfter(\"eat\", \"2 hours\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "        assertEquals(doafter.toString(), \"[DA][✘] [A] eat (after: 2 hours)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zkchang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zkchang97": 12
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "    void testEvent() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        Event event \u003d new Event(\"dinner\", \"28/9/2019 1800\", \"28/9/2019 2000\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmosChan97"
        },
        "content": "                \"[E][✘] dinner (at: Sat Sep 28 18:00:00 SGT 2019 to Sat Sep 28 20:00:00 SGT 2019)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmosChan97": 5,
      "-": 9
    }
  }
]
