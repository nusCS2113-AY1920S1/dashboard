[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveBaseName \u003d \"[CS2113T-T12-4][ChefDuke]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveVersion \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 5,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_LIST_BOOKINGS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_ADD_BOOKING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_DELETE_BOOKING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_BOOKING_SCHEDULE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_FIND_BOOKING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_ORDERS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_ADD_TO_INVENTORY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_LIST_INVENTORY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_DELETE_FROM_INVENTORY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_CLEAR_INVENTORY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_USE_RECIPE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_RECIPE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_DELETE_RECIPE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_REQ_INGREDIENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_RATING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_FEEDBACK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPSTEP;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPTIME;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPES;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_VIEW_RECIPE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_VIEW_REQ_INGREDIENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Duke processes different commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static void setupLogger() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logFile.log\",true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String filePathInventory \u003d currentDir + \"\\\\data\\\\inventories.txt\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String filePathBookings \u003d currentDir + \"\\\\data\\\\bookings.txt\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String filePathRecipes \u003d currentDir + \"\\\\data\\\\recipes.txt\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes all the input from user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e runProgram(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        Duke.setupLogger();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        // RECIPE."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.contains(COMMAND_ADD_RECIPE)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 9).equals(COMMAND_ADD_RECIPE)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_DELETE_RECIPE)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 12).equals(COMMAND_DELETE_RECIPE)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_VIEW_RECIPE)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 10).equals(COMMAND_VIEW_RECIPE)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_VIEW_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 17).equals(COMMAND_VIEW_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_EDIT_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 17).equals(COMMAND_EDIT_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_EDIT_RATING)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 10).equals(COMMAND_EDIT_RATING)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_EDIT_FEEDBACK)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 12).equals(COMMAND_EDIT_FEEDBACK)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_EDIT_PREPSTEP)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 12).equals(COMMAND_EDIT_PREPSTEP)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.contains(COMMAND_EDIT_PREPTIME)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (userInput.trim().substring(0, 12).equals(COMMAND_EDIT_PREPTIME)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                Command\u003cRecipeList, Ui, RecipeStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                return command.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_ADD_TO_INVENTORY)) { // INVENTORY."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_ADD_TO_INVENTORY)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cInventoryList, Ui, InventoryStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_DELETE_FROM_INVENTORY)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 19).equals(COMMAND_DELETE_FROM_INVENTORY)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cInventoryList, Ui, InventoryStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_LIST_INVENTORY)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 13).equals(COMMAND_LIST_INVENTORY)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cInventoryList, Ui, InventoryStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_CLEAR_INVENTORY)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_CLEAR_INVENTORY)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cInventoryList, Ui, InventoryStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.contains(COMMAND_USE_RECIPE)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (userInput.trim().substring(0, 9).equals(COMMAND_USE_RECIPE)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                Command\u003cInventoryList, RecipeList, InventoryStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return command.execute(inventoryList, recipeList, inventoryStorage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().equals(COMMAND_LIST_BOOKINGS)) { // BOOKING."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().substring(0, 10).equals(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().substring(0, 13).equals(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().substring(0, 19).equals(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().substring(0, 11).equals(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(COMMAND_VIEW_ORDERS)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().substring(0, 10).equals(COMMAND_VIEW_ORDERS)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Command\u003cBookingList, Ui, BookingStorage\u003e command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Wrong command entered!\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return arrayList;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 63,
      "wjlingg": 81,
      "LJX0006": 8,
      "jiaweijwjw": 104,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"ChefDuke\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 24
    }
  },
  {
    "path": "src/main/java/duke/common/BookingMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Contains all booking related messages or error prompts to display to user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingMessages {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_LIST_BOOKINGS \u003d \"listallbookings\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_ADD_BOOKING \u003d \"addbooking\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_DELETE_BOOKING \u003d \"deletebooking\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_VIEW_BOOKING_SCHEDULE \u003d \"viewbookingschedule\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_FIND_BOOKING \u003d \"findbooking\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_VIEW_ORDERS \u003d \"vieworders\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_BOOKING_ADDED \u003d \"New booking added:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_ALL_CURRENT_BOOKINGS \u003d \"     Here are all the current bookings in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_EMPTY_BOOKING_LIST \u003d \"Booking list is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_BOOKING_REMOVED \u003d \"     Noted. I\u0027ve removed this booking:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_MATCHING_BOOKINGS \u003d \"     Here are the matching bookings in your list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_NO_BOOKING \u003d \"      No booking on \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_PROMPT_ADDBOOKING \u003d \". \\n      You may proceed with command: addbooking\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_BOOKING_ON \u003d \"      Here is your booking on \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_ORDERS_FOR \u003d \"     Here are your orders for: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_NO_EXISTING_BOOKING \u003d \"      Sorry, no existing booking.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_NO_BOOKING_FOR \u003d \"      Sorry, no booking for \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_NO_ORDER_FOR \u003d \"      Sorry, no order for \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String MESSAGE_IS_FOUND \u003d \" is found.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_BOOKING_DETAILS \u003d \"Booking details cannot be empty!\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       addbooking \u003ccustomer_name e.g.John_Lim\u003e \u003ccustomer_contact\u003e \u003cnumber_of_pax\u003e \u003cbooking_date e.g dd/MM/yyyy\u003e orders/ \u003corder_name_1\u003e, \u003corder_name_2\u003e...\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_BOOKING_DETAILS \u003d \"Incorrect Booking details.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       addbooking \u003ccustomer_name e.g.John_Lim\u003e \u003ccustomer_contact\u003e \u003cnumber_of_pax\u003e \u003cbooking_date e.g dd/MM/yyyy\u003e orders/ \u003corder_name_1\u003e, \u003corder_name_2\u003e...\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_NAME \u003d \"Invalid Name entered.\\n \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"Customer name can only contain alphabets with \u0027_\u0027 e.g. John_Lim\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_CONTACT_NO \u003d \"Invalid Contact number. \\n \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"Contact number can only contain digits!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_UNKNOWN_PAX \u003d \"Unknown pax index entered. \\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"Kindly enter an integer for number of pax!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_PAX \u003d \"Invalid pax. \\n Number of Pax must be between 1-9.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_ORDERS \u003d \"No orders input! \\n \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            \"Please enter addbooking command again with: orders/ \u003corder_name_1\u003e, \u003corder_name_2\u003e...\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_DATE \u003d \"Invalid booking date entered.\\n \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"Please enter date again in this format: dd/MM/yyyy\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_OVERFLOW_DATE \u003d \"No such date!\\n Please enter a valid date after 1/1/2000\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_UNAVAILABLE_DATE \u003d \"Date entered is unavailable due to existing booking:(\\n Please enter another date!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_BOOKING_INDEX \u003d \"Booking index cannot be empty!\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       deletebooking \u003cbooking_index\u003e\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_DELETE_COMMAND \u003d \"Incorrect delete booking command.\\n \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       deletebooking \u003cbooking_index\u003e\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_NAME_FIND \u003d \"Customer name cannot be empty!\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       findbooking \u003ccustomer_name\u003e\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_NAME_VIEW \u003d \"Customer name cannot be empty!\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       vieworders \u003ccustomer_name\u003e\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_FIND_COMMAND \u003d \"Incorrect find booking command.\\n \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       findbooking \u003ccustomer_name\u003e\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_DATE \u003d \"Booking date cannot be empty!\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       viewbookingschedule \u003cdate: dd/MM/yyyy\u003e\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_VIEWBOOKINGSCHEDULE_COMMAND \u003d \"Incorrect view booking schedule command.\\n \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       viewbookingschedule \u003cdate: dd/MM/yyyy\u003e\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_VIEWORDERS_COMMAND \u003d \"Incorrect view orders command.\\n \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       Please enter in the following format:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            + \"       vieworders \u003ccustomer_name\u003e\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 72
    }
  },
  {
    "path": "src/main/java/duke/common/InventoryMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class InventoryMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_ADD_TO_INVENTORY \u003d \"addtoinventory\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_LIST_INVENTORY \u003d \"listinventory\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_DELETE_FROM_INVENTORY \u003d \"deletefrominventory\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_CLEAR_INVENTORY \u003d \"clearinventory\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_USE_RECIPE \u003d \"userecipe\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_DELETED \u003d \"Noted. I\u0027ve removed this ingredient from the inventory:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_ADDED_TO_INVENTORY \u003d \"Got it. I\u0027ve added this ingredient to the inventory.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_HERE_ARE_THE_INGREDIENTS \u003d \"Here are the ingredients currently in the inventory:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_INGREDIENTS_CLEARED \u003d \"All ingredients in the inventory has been cleared. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"The inventory list is now empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_USE_RECIPE_INVENTORY_UPDATED \u003d \"Your inventory list has been updated.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_INGREDIENT_INCOMPLETE \u003d \"Please provide the ingredient name, quantity, unit and additional information if any.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_ADD_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"addtoinventory [ingredient name] q/ [quantity] u/ [unit] a/ [additional information]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_QUANTITY \u003d \"Quantity of ingredient should be a number. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please input the command again.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_UNIT \u003d \"Unit of the ingredient is not supported yet. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please input the command again with a supported unit.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_QUANTITY_OR_UNIT \u003d \"Either the quantity or unit of the ingredient to be added is not in the right format.\\nPlease input the command again.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_DELETE_INGREDIENT_NOT_FOUND \u003d \"The ingredient that you wish to delete is not in your inventory.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVENTORY_ALREADY_EMPTY \u003d \"Your inventory is already empty. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"There is nothing to be cleared.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_INVENTORY_IS_EMPTY \u003d \"Your inventory is empty.\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            \"Are you sure this recipe has been used?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_HAS_RECIPE_BEEN_USED \u003d \"Insufficient amount: The amount of ingredients in the inventory is less than the amount required by this recipe.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String NO_ADDITIONAL_INFO \u003d \"No additional information.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 9,
      "jiaweijwjw": 24
    }
  },
  {
    "path": "src/main/java/duke/common/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to store all the initialisation of the static error messages to String value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePathRecipeTest \u003d \"\\\\datatest\\\\recipesTest.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePathBookingTest \u003d \"\\\\datatest\\\\bookingsTest.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePathInventoryTest \u003d \"\\\\datatest\\\\inventoriesTest.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePathTempTest \u003d \"\\\\datatest\\\\tempTest.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"     Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"     Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_NUll \u003d \"     Kindly enter the command again with a description.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS1 \u003d \"     Now you have \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_GENERAL \u003d \"     OOPS!!! The description cannot be empty.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_INDEX \u003d \"     Invalid index entered.\\n     \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter command with index not more than \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_UNKNOWN_INDEX \u003d \"     Unknown index entered.\\n     \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter an integer for the index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_LOADING \u003d \"     OOPS!!! Error loading file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_RANDOM \u003d \"     OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String DIVIDER \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 8,
      "LJX0006": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/common/RecipeMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class RecipeMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_ADD_RECIPE \u003d \"addrecipe\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DELETE_RECIPE \u003d \"deleterecipe\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_EDIT_REQ_INGREDIENT \u003d \"editreqingredient\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_EDIT_RATING \u003d \"editrating\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_EDIT_FEEDBACK \u003d \"editfeedback\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_EDIT_PREPSTEP \u003d \"editprepstep\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_EDIT_PREPTIME \u003d \"editpreptime\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST_RECIPE_INGREDIENT \u003d \"listingredient\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST_RECIPES \u003d \"listallrecipes\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST_RECIPES_BY_PREPTIME \u003d \"listrecipesbypreptime\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_VIEW_RECIPE \u003d \"viewrecipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_VIEW_REQ_INGREDIENT \u003d \"viewreqingredient\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String LABEL_TITLE \u003d \"Title: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String LABEL_RATING \u003d \"Rating: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String LABEL_PREPSTEPS \u003d \"Preparation Steps: \\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String LABEL_REQ_INGREDIENTS \u003d \"Required Ingredients: \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String LABEL_FEEDBACK \u003d \"Feedback: \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String LABEL_PREPTIME \u003d \"Preparation Time: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_RECIPE_DELETED \u003d \"Noted. I\u0027ve removed this recipe:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_RECIPE_ADDED \u003d \"Got it. I\u0027ve added this recipe:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_ADDED_TO_REQ_INGREDIENTS \u003d \"Got it. I\u0027ve added this ingredient to the list of required ingredients.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_ADDED_TO_PREPSTEPS \u003d \"Got it. I\u0027ve added this preparation step to the list of prep steps.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_RECIPE_TO_BE_VIEWED \u003d \"Here are the details for the recipe:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_HERE_ARE_THE_RECIPES \u003d \"Here are the recipe(s) currently in the list:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_DELETED_FROM_REQ_INGREDIENTS \u003d \"Noted. I\u0027ve removed this ingredient from the list of required ingredients.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_DELETED_FROM_PREPSTEPS \u003d \"Noted. I\u0027ve removed this preparation step from the list of prep steps.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_CLEARED_REQ_INGREDIENTS \u003d \"The required ingredient list for the recipe has been cleared.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String MESSAGE_CLEARED_PREPSTEPS \u003d \"The required prep step list for the recipe has been cleared.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_QUANTITY \u003d \"Please input a valid value for the quantity\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_DELETE_RECIPE_NOT_FOUND \u003d \"The recipe that you wish to delete is not in your recipe list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_REQ_INGREDIENT_INVALID_POSITION \u003d \"Please input a valid value for the position you wish to insert the ingredient in.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_REQ_INGREDIENT_INVALID_ORDER \u003d \"Invalid placement of the sequence of the individual parts: ins/n/q/u/a/ or app/n/q/u/a/.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_PREPSTEP_INVALID_POSITION \u003d \"Please input a valid value for the position you wish to insert the preparation step in.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECIPE_INCOMPLETE \u003d \"     Please provide all information needed.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_FORMAT \u003d \"     Please input in this format:\\n     Eg: addrecipeingredient garlic 100 grams.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_RECIPE_ALREADY_EXISTS \u003d \"Sorry, the recipe you wish to add already exists.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_RECIPE_LIST_IS_EMPTY \u003d \"The recipe list is already empty.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST \u003d \"The recipe list does not contain this recipe\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_TITLE \u003d \"Pls input recipe title with letters only\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editreqingredient [recipe name] ins/ [position] n/ [ingredient name] q/ [quantity] u/ [unit] a/ [additional information]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editprepstep [recipe name] ins/ [position] p/ [preparation step]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCOMPLETE \u003d \"Please provide the recipe title, position and details of the ingredient to be inserted. (additional information if any)\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_INGREDIENT_DEL_INCOMPLETE \u003d \"Please provide the recipe title and position the ingredient to be deleted.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_INGREDIENT_APP_INCOMPLETE \u003d \"Please provide the recipe title and details of the ingredient to be appended.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_INGREDIENT_CLR_INCOMPLETE \u003d \"Please provide the recipe title which you wish to clear the required ingredients.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCOMPLETE \u003d \"Please provide the recipe title, position and details of the preparation step to be inserted.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_DEL_INCOMPLETE \u003d \"Please provide the recipe title and position the preparation step to be deleted.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_APP_INCOMPLETE \u003d \"Please provide the recipe title and details of the preparation step to be appended.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_CLR_INCOMPLETE \u003d \"Please provide the recipe title which you wish to clear the preparation steps.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_REQ_INGREDIENT_NO_EDIT_COMMAND \u003d \"Please include the type of edit command that you want to perform.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"Supported edit commands for required ingredients include: \u0027ins/\u0027, \u0027del/\u0027, \u0027app/\u0027, \u0027clr/\u0027.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"Only one command can be used at a time.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_PREPSTEP_NO_EDIT_COMMAND \u003d \"Please include the type of edit command that you want to perform.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"Supported edit commands for preparation steps include: \u0027ins/\u0027, \u0027del/\u0027, \u0027app/\u0027, \u0027clr/\u0027.\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"Only one command can be used at a time.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_REQ_INGREDIENT_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editreqingredient [recipe name] ins/ [position] n/ [ingredient name] q/ [quantity] u/ [unit] a/ [additional information]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editreqingredient [recipe name] del/ [position]\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editreqingredient [recipe name] app/ n/ [ingredient name] q/ [quantity] u/ [unit] a/ [additional information]\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editreqingredient [recipe name] clr/\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPSTEP_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            + \"editprepstep [recipe name] ins/ [position] step/ [prep step]\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editprepstep [recipe name] del/ [position]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            + \"editprepstep [recipe name] app/ step/ [prep step]\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editprepstep [recipe name] clr/\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_RATING_INCOMPLETE \u003d \"Please provide the title of the recipe which you wish to edit the rating.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_FEEDBACK_INCOMPLETE \u003d \"Please provide the title of the recipe which you wish to edit the feedback.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_PREPSTEP_INCOMPLETE \u003d \"Please provide the details of the preparation step.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String ERROR_MESSAGE_EDIT_PREPTIME_INCOMPLETE \u003d \"Please provide the title of the recipe which you wish to edit the preparation time.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RATING \u003d \"Only unrated, average, good and delicious ratings are supported.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_PREPTIME \u003d \"Preparation time should be more than 0 minute\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_RATING_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editrating [recipe name] r/ [rating]\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"If no [rating] is input, the rating will be set to unrated.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_FEEDBACK_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"editfeedback [recipe name] f/ [feedback]\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"If no [feedback] is input, the feedback will be set to \u0027No feedback yet.\u0027.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String ERROR_MESSAGE_PREPTIME_INCORRECT_FORMAT \u003d \"Please input the command in the following format:\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            + \"editpreptime [recipe name] t/ [preptime]\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            + \"If no [preptime] is input, the preptime will be set to 0.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 12,
      "wjlingg": 15,
      "jiaweijwjw": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Abstract class to represent command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * @param \u003cT\u003e Type of list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * @param \u003cS\u003e Type of ui"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * @param \u003cU\u003e Type of storage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class Command\u003cT, S, U\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(T t, S s, U u) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 5,
      "wjlingg": 12
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/AddBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_ADD_BOOKING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_BOOKING_ADDED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_BOOKING_DETAILS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_BOOKING_DETAILS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_CONTACT_NO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_UNKNOWN_PAX;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_PAX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_ORDERS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_OVERFLOW_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_UNAVAILABLE_DATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the add new booking command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AddBookingCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(AddBookingCommand.class.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Set up a logger to log important information."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static void setupLogger() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logFile.log\", true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\", e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for class AddBookingCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public AddBookingCommand(String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the add command to add a new booking into booking list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @throws ParseException if input booking date is not parsable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        AddBookingCommand.setupLogger();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_BOOKING_DETAILS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (!userInput.contains(\"orders/\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_INVALID_BOOKING_DETAILS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String[] temp \u003d userInput.split(\"orders/\", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String[] details \u003d temp[0].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInput.trim().charAt(10) !\u003d \u0027 \u0027 || details.length !\u003d 5) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_BOOKING_DETAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String customerName \u003d details[1].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String customerContact \u003d details[2].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String numberOfPax \u003d details[3].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String bookingDate \u003d details[4].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String orderName \u003d temp[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (!isValidName(customerName)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isValidContactNo((customerContact))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_CONTACT_NO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isParsable(numberOfPax)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_UNKNOWN_PAX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isValidPax(numberOfPax)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_PAX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isDateParsable(bookingDate)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isValidDate(bookingDate)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_OVERFLOW_DATE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (!isAvailableDate(bookingDate, bookingList)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_UNAVAILABLE_DATE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else if (orderName.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_EMPTY_ORDERS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingList.addBooking(customerName, customerContact, numberOfPax, bookingDate, orderName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingStorage.saveFile(bookingList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    int size \u003d bookingList.getSize();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" booking in the list.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" bookings in the list.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(MESSAGE_BOOKING_ADDED + \"       \" + bookingList.getBookingList().get(size - 1) + \"\\n\" + \"Now you have \" + size + msg);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be alphabets or _."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the string consist only alphabets or _ and false otherwise"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidName(String input) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027_\u0027)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be numbers."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the user inputs only numbers and false otherwise"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidContactNo(String input) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!Character.isDigit(c)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be integer."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Index input is not an integer.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be within a fixed range of integers."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the user inputs an integer within the range and false otherwise"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidPax(String input) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int pax \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return pax \u003e 0 \u0026\u0026 pax \u003c 10;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the date to be in required format ."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate String of date input by user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the date is in required format and false otherwise"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isDateParsable(String bookingDate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Invalid date format entered.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the date to be a valid date in the calendar after year 2000."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate String of date input by user"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return True if the date is on the calendar and false otherwise"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidDate(String bookingDate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String[] dateInput \u003d bookingDate.split(\"/\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int day \u003d Integer.parseInt(dateInput[0]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int month \u003d Integer.parseInt(dateInput[1]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int year \u003d Integer.parseInt(dateInput[2]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (day \u003e 0 \u0026\u0026 day \u003c\u003d 31 \u0026\u0026 year \u003e\u003d 2000) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (day \u003e 0 \u0026\u0026 day \u003c\u003d 30 \u0026\u0026 year \u003e\u003d 2000) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (year \u003e\u003d 2000 \u0026\u0026 (year - 2000) % 4 \u003d\u003d 0) { //is a leap year"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return day \u003e 0 \u0026\u0026 day \u003c\u003d 29;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else if (year \u003e\u003d 2000 \u0026\u0026 (year - 2000) % 4 !\u003d 0) { //is a common year"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return day \u003e 0 \u0026\u0026 day \u003c\u003d 28;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the date to be available for new booking."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate String of date input by user"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList List containing all current bookings"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return True if the date is not found in the list and false otherwise"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isAvailableDate(String bookingDate, BookingList bookingList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (bookingDate.equals(booking.getBookingDate())) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 230,
      "wjlingg": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/AllBookingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_ALL_CURRENT_BOOKINGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the list all bookings command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AllBookingsCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the list command to display all bookings in booking list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrayList.add(MESSAGE_ALL_CURRENT_BOOKINGS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrayList.addAll(bookingList.listAllBooking());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 30,
      "wjlingg": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/DeleteBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_DELETE_BOOKING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_EMPTY_BOOKING_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_BOOKING_REMOVED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_BOOKING_INDEX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_DELETE_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the delete booking command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class DeleteBookingCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(DeleteBookingCommand.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Set up a logger to log important information."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static void setupLogger() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logFile.log\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\", e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for class DeleteBookingCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public DeleteBookingCommand(String userInput) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the delete command to delete a booking from the booking list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        DeleteBookingCommand.setupLogger();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_BOOKING_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.trim().charAt(13) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Invalid delete booking command\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_INVALID_DELETE_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String input \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!isParsable(input)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (index \u003e bookingList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (bookingList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(MESSAGE_EMPTY_BOOKING_LIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_INDEX + bookingList.getSize() + \".\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (bookingList.getSize() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" booking in the list.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" bookings in the list.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(MESSAGE_BOOKING_REMOVED + \"       \" + bookingList.getBookingList().get(index - 1)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                            + \"\\n\" + \"Now you have \" + (bookingList.getSize() - 1) + msg);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingList.deleteBooking(index - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingStorage.saveFile(bookingList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be integer."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Index input is not an integer.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 101,
      "wjlingg": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/FindBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_FIND_BOOKING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_MATCHING_BOOKINGS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_NAME_FIND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_FIND_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the find booking command by filtering the bookings by keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class FindBookingCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for class FindBookingCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public FindBookingCommand(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the find command to search for bookings with specific name keyword from the booking list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInput.trim().equals(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_NAME_FIND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.trim().charAt(11) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_INVALID_FIND_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String customerName \u003d userInput.split(\"\\\\s\", 2)[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!isValidName(customerName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(MESSAGE_MATCHING_BOOKINGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.addAll(bookingList.findBooking(customerName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be alphabets or _."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the string consist only alphabets or _ and false otherwise"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidName(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027_\u0027)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 64,
      "wjlingg": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/ViewBookingScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_BOOKING_SCHEDULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_NO_BOOKING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_PROMPT_ADDBOOKING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_BOOKING_ON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_OVERFLOW_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_VIEWBOOKINGSCHEDULE_COMMAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the view booking schedule command by searching with date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewBookingScheduleCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ViewBookingScheduleCommand.class.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Set up a logger to log important information."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static void setupLogger() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logFile.log\", true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for class ViewBookingScheduleCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ViewBookingScheduleCommand(String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the view booking schedule command to check the availability of a particular date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ViewBookingScheduleCommand.setupLogger();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInput.trim().equals(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_DATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.trim().charAt(19) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_INVALID_VIEWBOOKINGSCHEDULE_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String inputDate \u003d userInput.substring(20).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!isDateParsable(inputDate)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else if (!isValidDate(inputDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_OVERFLOW_DATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Date currDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(inputDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                ArrayList\u003cBooking\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    Date bookingDate \u003d booking.getDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (isCurrentTime(currDate, bookingDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        scheduleList.add(booking);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String outputDate \u003d new SimpleDateFormat(\"dd MMMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(MESSAGE_NO_BOOKING + outputDate + MESSAGE_PROMPT_ADDBOOKING);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(MESSAGE_BOOKING_ON + outputDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    for (int i \u003d 0; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(\"      \" + (i + 1) + \". \" + scheduleList.get(i));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the date to be in required format ."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate String of date input by user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the date is in required format and false otherwise"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isDateParsable(String bookingDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            logger.warning(\"Invalid date format entered.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the date to be a valid date in the calendar after year 2000."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate String of date input by user"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return True if the date is on the calendar and false otherwise"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidDate(String bookingDate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String[] dateInput \u003d bookingDate.split(\"/\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int day \u003d Integer.parseInt(dateInput[0]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int month \u003d Integer.parseInt(dateInput[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int year \u003d Integer.parseInt(dateInput[2]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (day \u003e 0 \u0026\u0026 day \u003c\u003d 31 \u0026\u0026 year \u003e\u003d 2000) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (day \u003e 0 \u0026\u0026 day \u003c\u003d 30 \u0026\u0026 year \u003e\u003d 2000) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (year \u003e\u003d 2000 \u0026\u0026 (year - 2000) % 4 \u003d\u003d 0) { //is a leap year"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (day \u003e 0 \u0026\u0026 day \u003c\u003d 29) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else if (year \u003e\u003d 2000 \u0026\u0026 (year - 2000) % 4 !\u003d 0) { //is a common year"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (day \u003e 0 \u0026\u0026 day \u003c\u003d 28) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates whether two dates are the same."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param currDate    date input by user using this command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate the date of booking from the booking list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if two are the same and false otherwise"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isCurrentTime(Date currDate, Date bookingDate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        calendar.setTime(bookingDate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 173,
      "wjlingg": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/command/bookingcommands/ViewOrdersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_ORDERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_ORDERS_FOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_EMPTY_NAME_VIEW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.ERROR_MESSAGE_INVALID_VIEWORDERS_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the view orders command by searching with customer name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewOrdersCommand extends Command\u003cBookingList, Ui, BookingStorage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for class ViewOrdersCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param userInput string containing the input from the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ViewOrdersCommand(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the view orders command to display the orders for a particular customer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList    contains the booking list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving bookings in the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInput.trim().equals(COMMAND_VIEW_ORDERS)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_NAME_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.trim().charAt(10) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_INVALID_VIEWORDERS_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String customerName \u003d userInput.split(\"\\\\s\", 2)[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!isValidName(customerName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(MESSAGE_ORDERS_FOR + customerName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.addAll(bookingList.viewOrders(customerName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Validates the input to be alphabets or _."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return true if the string consist only alphabets or _ and false otherwise"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isValidName(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027_\u0027)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 65,
      "wjlingg": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventorycommands/AddToInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_ADD_TO_INVENTORY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_ADDED_TO_INVENTORY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INGREDIENT_INCOMPLETE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_ADD_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_UNIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_QUANTITY_OR_UNIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class AddToInventoryCommand extends Command\u003cInventoryList, Ui, InventoryStorage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public AddToInventoryCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(InventoryList inventoryList, Ui ui, InventoryStorage inventoryStorage) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_TO_INVENTORY)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(14) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (description.contains(\"q/\") \u0026\u0026 description.contains(\"u/\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String ingredientName, quantity, unit, additionalInfo, remaining, remaining2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                ingredientName \u003d description.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                remaining \u003d description.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                quantity \u003d remaining.split(\"u/\", 2)[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                remaining2 \u003d remaining.split(\"u/\", 2)[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (remaining2.contains(\"a/\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    unit \u003d remaining2.split(\"a/\", 2)[0].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    additionalInfo \u003d remaining2.split(\"a/\", 2)[1].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (additionalInfo.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    unit \u003d remaining2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (ingredientName.isEmpty() || quantity.isEmpty() || unit.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INGREDIENT_INCOMPLETE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if ((isParsable(quantity) || isParsableDbl(quantity)) \u0026\u0026 isKnownUnit(unit)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (inventoryList.containsIngredient(ingredientName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            inventoryList.addIngredientMass(ingredientName, quantity, unit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            inventoryList.replaceAdditionalInfo(ingredientName, additionalInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            int index \u003d inventoryList.getSize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED_TO_INVENTORY + \"\\n\" + \"       \" + ingredientName + \"\\n\" + \"Now you have \" + index + \" ingredient(s) in your inventory\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            inventoryList.addIngredient(ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            int index \u003d inventoryList.getSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED_TO_INVENTORY + \"\\n\" + \"       \" + ingredientName + \"\\n\" + \"Now you have \" + index + \" ingredient(s) in your inventory\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if ((!isParsable(quantity) || !isParsableDbl(quantity)) \u0026\u0026 isKnownUnit(unit)){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else  if (!isKnownUnit(unit) \u0026\u0026 (isParsable(quantity) || isParsableDbl(quantity))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_UNIT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY_OR_UNIT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_ADD_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsable(String quantity) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsableDbl(String quantity) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Double.parseDouble(quantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isKnownUnit(String unit) { // edit this part."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (unit.equals(\"g\") || unit.equals(\"kg\") || unit.equals(\"l\") || unit.equals(\"ml\") || unit.equals(\"cup\") || unit.equals(\"teaspoon\") || unit.equals(\"tablespoon\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 20,
      "jiaweijwjw": 92
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventorycommands/ClearInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_CLEAR_INVENTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_INGREDIENTS_CLEARED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVENTORY_ALREADY_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class ClearInventoryCommand extends Command\u003cInventoryList, Ui, InventoryStorage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ClearInventoryCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(InventoryList inventoryList, Ui ui, InventoryStorage inventoryStorage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_CLEAR_INVENTORY)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (inventoryList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVENTORY_ALREADY_EMPTY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                inventoryList.clearInventory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(MESSAGE_INGREDIENTS_CLEARED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 2,
      "jiaweijwjw": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventorycommands/DeleteFromInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_DELETE_FROM_INVENTORY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_INGREDIENT_DELETED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_DELETE_INGREDIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class DeleteFromInventoryCommand extends Command\u003cInventoryList, Ui, InventoryStorage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DeleteFromInventoryCommand(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the delete command to delete task in the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param inventoryList contains the task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param inventoryStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(InventoryList inventoryList, Ui ui, InventoryStorage inventoryStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_FROM_INVENTORY)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(19) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Ingredient value \u003d inventoryList.deleteIngredient(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_DELETE_INGREDIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(MESSAGE_INGREDIENT_DELETED + \"       \" + description + \"\\n\" + \"Now you have \" + inventoryList.getSize() + \" ingredients(s) in the inventory.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_FROM_INVENTORY)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(19) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (index \u003e inventoryList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (inventoryList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_DELETING_FROM_EMPTY_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_INDEX + inventoryList.getSize() + \".\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String msg \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (inventoryList.getSize() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        msg \u003d \" ingredient in the list.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(MESSAGE_INGREDIENT_DELETED + \"       \" + inventoryList.get(index - 1)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            + \"\\n\" + MESSAGE_ITEMS1 + (inventoryList.getSize() - 1) + msg);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    inventoryList.deleteIngredient(index - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 41,
      "jiaweijwjw": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventorycommands/ListInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_LIST_INVENTORY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_HERE_ARE_THE_INGREDIENTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class ListInventoryCommand extends Command\u003cInventoryList, Ui, InventoryStorage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ListInventoryCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list recipe command to show a list of the existing ingredients in the inventory list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param inventoryList contains the inventory list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param inventoryStorage deals with loading tasks from the file and saving ingredients in the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(InventoryList inventoryList, Ui ui, InventoryStorage inventoryStorage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_LIST_INVENTORY)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(MESSAGE_HERE_ARE_THE_INGREDIENTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.addAll(listOfInventories(inventoryList.getInventoryList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private ArrayList\u003cString\u003e listOfInventories(HashMap\u003cString, Ingredient\u003e map) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Set entries \u003d map.entrySet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Iterator entryIter \u003d entries.iterator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        while (entryIter.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Map.Entry entry \u003d (Map.Entry) entryIter.next();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Object key \u003d entry.getKey();  // Get the key from the entry."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Ingredient value \u003d (Ingredient) entry.getValue();  // Get the value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(\"     \" + (i + DISPLAYED_INDEX_OFFSET) + \". \" + value.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 16,
      "jiaweijwjw": 52
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventorycommands/UseRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_USE_RECIPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_USE_RECIPE_INVENTORY_UPDATED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVENTORY_IS_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_HAS_RECIPE_BEEN_USED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class UseRecipeCommand extends Command\u003cInventoryList, RecipeList, InventoryStorage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public UseRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(InventoryList inventoryList, RecipeList recipeList, InventoryStorage inventoryStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_USE_RECIPE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        else if (userInput.trim().charAt(9) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String recipeTitle \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                // retrieve a list of the required ingredients"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                // for every ingredient in the required ingredient list, get the ingredient name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                // check the ingredient name against the inventory, if can minus, minus."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                // if cannot, feedback \u0027are u sure you have used this recipe? as there is not enough ingred\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (inventoryList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVENTORY_IS_EMPTY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ArrayList\u003cIngredient\u003e reqIngredients \u003d recipeList.getReqIngredients(recipeTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (inventoryList.removeUsedIngredients(reqIngredients)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        inventoryStorage.saveFile(inventoryList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(MESSAGE_USE_RECIPE_INVENTORY_UPDATED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_HAS_RECIPE_BEEN_USED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 9,
      "jiaweijwjw": 56
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/AddRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_RECIPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_RECIPE_ADDED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_ALREADY_EXISTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_INVALID_RECIPE_TITLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the add new recipe command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddRecipeCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class AddRecipeCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public AddRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the input to be alphabets."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the string consist only alphabets and false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isValidRecipeTitle(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027 \u0027)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the add command to add a new recipe into recipe list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_RECIPE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(9) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (!isValidRecipeTitle(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_TITLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (recipeList.containsRecipe(description)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RECIPE_ALREADY_EXISTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                recipeList.addRecipe(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(MESSAGE_RECIPE_ADDED + \"       \" + description + \"\\n\" + \"Now you have \" + recipeList.getSize() + \" recipe(s) in the list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 44,
      "LJX0006": 5,
      "jiaweijwjw": 28
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/DeleteRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.recipetasks.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_DELETE_RECIPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_RECIPE_DELETED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_DELETE_RECIPE_NOT_FOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_LIST_IS_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete recipe command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeleteRecipeCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class DeleteRecipeCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DeleteRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the delete recipe command to deletes a specific recipe."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_RECIPE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(12) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            boolean isListEmpty \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (recipeList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                isListEmpty \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Recipe value \u003d recipeList.deleteRecipe(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (!isListEmpty) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_DELETE_RECIPE_NOT_FOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(MESSAGE_RECIPE_DELETED + \"       \" + description + \"\\n\" + \"Now you have \" + recipeList.getSize() + \" recipe(s) in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RECIPE_LIST_IS_EMPTY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 26,
      "LJX0006": 5,
      "jiaweijwjw": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/EditFeedbackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_FEEDBACK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_FEEDBACK_INCOMPLETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_FEEDBACK_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the edit feedback command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class EditFeedbackCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class EditRecipeCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public EditFeedbackCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the edit feedback command to edit the feedback of a specific recipe."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EDIT_FEEDBACK)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(12) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (description.contains(\"f/\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String recipeTitle, feedback;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String[] split \u003d description.split(\"f/\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                feedback \u003d split[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (recipeTitle.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_EDIT_FEEDBACK_INCOMPLETE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (feedback.equals(\"\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        feedback \u003d \"No feedback yet.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeList.editFeedback(recipeTitle, feedback);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(\"The feedback of \" + \"\u0027\" + recipeTitle + \"\u0027\" + \" has been edited to: \" + feedback);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_FEEDBACK_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 19,
      "LJX0006": 5,
      "jiaweijwjw": 50
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/EditPrepStepCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPSTEP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_ADDED_TO_PREPSTEPS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_DELETED_FROM_PREPSTEPS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_CLEARED_PREPSTEPS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_PREPSTEP_INVALID_POSITION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCOMPLETE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_DEL_INCOMPLETE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_APP_INCOMPLETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_CLR_INCOMPLETE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_PREPSTEP_NO_EDIT_COMMAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPSTEP_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the edit preparation step command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class EditPrepStepCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class EditPrepStepCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public EditPrepStepCommand(String userInput) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the edit preparation step command to edit the details of the preparation steps of a specific recipe."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EDIT_PREPSTEP)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        else if (userInput.trim().charAt(12) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String recipeTitle, position, prepStep, remaining;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (hasOneCommand(description)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String command \u003d whichCommand(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (isIns(command)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (!description.contains(\"step/\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCORRECT_FORMAT + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        position \u003d remaining.split(\"step/\", 2)[0].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        prepStep \u003d remaining.split(\"step/\", 2)[1].trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (recipeTitle.isEmpty() || position.isEmpty() || prepStep.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCOMPLETE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            if (isParsable(position) \u0026\u0026 isValidPosition(recipeTitle, position, recipeList)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeList.insertPrepStep(recipeTitle, position, prepStep);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                arrayList.add(MESSAGE_ADDED_TO_PREPSTEPS + \"\\n\" + \"       \" + prepStep);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isParsable(position)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_INVALID_INDEX + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isValidPosition(recipeTitle, position, recipeList)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_PREPSTEP_INVALID_POSITION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCORRECT_FORMAT + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                } else if (isDel(command)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    position \u003d split[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (recipeTitle.isEmpty() || position.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_DEL_INCOMPLETE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (isParsable(position)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            String deletedPrepStep \u003d recipeList.deletePrepStep(recipeTitle, position);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(MESSAGE_DELETED_FROM_PREPSTEPS + \"\\n\" + \"       \" + deletedPrepStep);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else if (isApp(command)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (!description.contains(\"step/\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_INS_INCORRECT_FORMAT + \"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        prepStep \u003d remaining.split(\"step/\", 2)[1].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (recipeTitle.isEmpty() || prepStep.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_APP_INCOMPLETE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            recipeList.appendPrepStep(recipeTitle, prepStep);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED_TO_PREPSTEPS + \"\\n\" + \"       \" + prepStep);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else if (isClr(command)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (recipeTitle.isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_CLR_INCOMPLETE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeList.clearPrepStep(recipeTitle);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(MESSAGE_CLEARED_PREPSTEPS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_EDIT_PREPSTEP_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_PREPSTEP_NO_EDIT_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates that the input contains all of the ingredient\u0027s name, quantity, unit, and additional information."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if all of the ingredient\u0027s name, quantity, unit, and additional information are provided"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean hasAllIngredientFields(String description) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return description.contains(\"n/\") \u0026\u0026 description.contains(\"q/\") \u0026\u0026 description.contains(\"u/\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates that the input contains only one command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the input contains only one command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean hasOneCommand(String description) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (description.contains(\"ins/\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"del/\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"app/\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"clr/\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Gets the type of the command from user."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the command type"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String whichCommand(String description) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (description.contains(\"ins/\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"ins/\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"del/\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"del/\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"app/\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"app/\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"clr/\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is insert."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information by user"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the command type is insert"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isIns(String command) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"ins/\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is delete."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the command type is delete"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isDel(String command) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"del/\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is append."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the command type is append"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isApp(String command) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"app/\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is clear."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the command type is clear"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isClr(String command) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"clr/\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the quantity is an integer."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param quantity String input from user"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsable(String quantity) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates the input position."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param recipeTitle name of the recipe"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param  position index of the preparation step"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param recipeList list of all recipes"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the position is valid"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isValidPosition(String recipeTitle, String position, RecipeList recipeList) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return Integer.parseInt(position) \u003c\u003d (recipeList.getRecipeList().get(recipeTitle).getRequiredIngredients().getSize() + 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates the input unit."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param unit the input unit from user"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the unit is known"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isKnownUnit(String unit) { // edit this part."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return unit.equals(\"g\") || unit.equals(\"kg\") || unit.equals(\"l\") || unit.equals(\"ml\") || unit.equals(\"cup\") || unit.equals(\"teaspoon\") || unit.equals(\"tablespoon\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 42,
      "LJX0006": 75,
      "jiaweijwjw": 173
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/EditPrepTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPTIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_PREPTIME_INCOMPLETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_INVALID_PREPTIME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RATING_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the edit preparation time command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class EditPrepTimeCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class EditPrepTimeCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public EditPrepTimeCommand(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the edit preparation time command to edit the preparation time needed to prepare a specific dish."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EDIT_PREPTIME)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.trim().charAt(12) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (description.contains(\"t/\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String recipeTitle, prepTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String[] split \u003d description.split(\"t/\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                prepTime \u003d split[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (recipeTitle.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_EDIT_PREPTIME_INCOMPLETE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (Integer.parseInt(prepTime) \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        recipeList.editPrepTime(recipeTitle, prepTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        arrayList.add(\"The preparation time of \" + \"\u0027\" + recipeTitle + \"\u0027\" + \" has been edited to: \" + prepTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_PREPTIME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RATING_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 56,
      "wjlingg": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/EditRatingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_RATING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_RATING_INCOMPLETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_INVALID_RATING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RATING_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the edit rating command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class EditRatingCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class EditRatingCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public EditRatingCommand(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the edit rating command to edit the rating for a specific recipe."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EDIT_RATING)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(10) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (description.contains(\"r/\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String recipeTitle, rating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String[] split \u003d description.split(\"r/\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                rating \u003d split[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (recipeTitle.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_EDIT_RATING_INCOMPLETE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (isValidRating(rating)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (rating.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            rating \u003d \"unrated\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeList.editRating(recipeTitle, rating);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(\"The rating of \" + \"\u0027\" + recipeTitle + \"\u0027\" + \" has been edited to: \" + rating);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_RATING);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RATING_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates the format of input rating from user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param rating the input rating from user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the input rating is one of \"average\", \"good\", and \"delicious\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isValidRating(String rating) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return (rating.equals(\"\") || rating.equals(\"average\") || rating.equals(\"good\") || rating.equals(\"delicious\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                  || rating.equals(\"Average\") || rating.equals(\"Good\") || rating.equals(\"Delicious\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                  || rating.equals(\"AVERAGE\") || rating.equals(\"GOOD\") || rating.equals(\"DELICIOUS\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 20,
      "LJX0006": 14,
      "jiaweijwjw": 58
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/EditRequiredIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_REQ_INGREDIENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_ADDED_TO_REQ_INGREDIENTS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_DELETED_FROM_REQ_INGREDIENTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_CLEARED_REQ_INGREDIENTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_REQ_INGREDIENT_INVALID_POSITION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_REQ_INGREDIENT_INVALID_ORDER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCOMPLETE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_INGREDIENT_DEL_INCOMPLETE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_INGREDIENT_APP_INCOMPLETE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_INGREDIENT_CLR_INCOMPLETE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_REQ_INGREDIENT_NO_EDIT_COMMAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_EDIT_REQ_INGREDIENT_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_UNIT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.ERROR_MESSAGE_INVALID_QUANTITY_OR_UNIT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the edit required ingredient command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class EditRequiredIngredientCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(EditRequiredIngredientCommand.class.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Set up a logger to log important information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static void setupLogger() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"logFile.log\",true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (java.io.IOException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class EditRequiredIngredientCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public EditRequiredIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the edit required ingredient command to edit the content of the ingredients of a specific recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand.setupLogger();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EDIT_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(17) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String recipeTitle, position, ingredientName, quantity, unit, additionalInfo, remaining, remaining2, remaining3, remaining4;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (hasOneCommand(description)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String command \u003d whichCommand(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (isIns(command) \u0026\u0026 hasAllIngredientFields(description) \u0026\u0026 hasCorrectOrder(description)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    position \u003d remaining.split(\"n/\", 2)[0].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining2 \u003d remaining.split(\"n/\", 2)[1].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ingredientName \u003d remaining2.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining3 \u003d remaining2.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    quantity \u003d remaining3.split(\"u/\", 2)[0].trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining4 \u003d remaining3.split(\"u/\", 2)[1].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (remaining4.contains(\"a/\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        unit \u003d remaining4.split(\"a/\", 2)[0].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d remaining4.split(\"a/\", 2)[1].trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (additionalInfo.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        unit \u003d remaining4;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (recipeTitle.isEmpty() || position.isEmpty() || ingredientName.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCOMPLETE + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (recipeList.containsRecipeIngredient(recipeTitle, ingredientName).equals(\"null\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            if ((isParsable(quantity) || isParsableDbl(quantity)) \u0026\u0026 isKnownUnit(unit) \u0026\u0026 isParsable(position) \u0026\u0026 isValidPosition(recipeTitle, position, recipeList)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeList.insertReqIngredient(recipeTitle, position, ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                arrayList.add(MESSAGE_ADDED_TO_REQ_INGREDIENTS + \"\\n\" + \"       \" + ingredientName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isParsable(quantity) || !isParsableDbl(quantity)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isKnownUnit(unit)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_INVALID_UNIT + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isParsable(position)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_INVALID_INDEX + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                if (!isValidPosition(recipeTitle, position, recipeList)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_REQ_INGREDIENT_INVALID_POSITION + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    arrayList.add(ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String prevIngredient \u003d recipeList.containsRecipeIngredient(recipeTitle, ingredientName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String[] part \u003d prevIngredient.split(\",\", 5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String index \u003d part[4].trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (quantity.isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                quantity \u003d part[1].trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (unit.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                unit \u003d part[2].trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (additionalInfo.equals(NO_ADDITIONAL_INFO)){"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                additionalInfo \u003d part[3].trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeList.removeDupReqIngredient(Integer.parseInt(index), recipeTitle);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeList.insertReqIngredient(recipeTitle, position, ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED_TO_REQ_INGREDIENTS + \"\\n\" + \"       \" + ingredientName);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else if (isDel(command)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    position \u003d split[1].trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (recipeTitle.isEmpty() || position.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_INGREDIENT_DEL_INCOMPLETE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (isParsable(position)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            String deletedIngredientName \u003d recipeList.deleteReqIngredient(recipeTitle, position);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(MESSAGE_DELETED_FROM_REQ_INGREDIENTS + \"\\n\" + \"       \" + deletedIngredientName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                else if (isApp(command) \u0026\u0026 hasAllIngredientFields(description) \u0026\u0026 hasCorrectOrder(description)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    // position \u003d remaining.split(\"n/\", 2)[0].trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining2 \u003d remaining.split(\"n/\", 2)[1].trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ingredientName \u003d remaining2.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining3 \u003d remaining2.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    quantity \u003d remaining3.split(\"u/\", 2)[0].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    remaining4 \u003d remaining3.split(\"u/\", 2)[1].trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (remaining4.contains(\"a/\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        unit \u003d remaining4.split(\"a/\", 2)[0].trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d remaining4.split(\"a/\", 2)[1].trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (additionalInfo.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        unit \u003d remaining4;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (recipeTitle.isEmpty() || ingredientName.isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_INGREDIENT_APP_INCOMPLETE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (recipeList.containsRecipeIngredient(recipeTitle, ingredientName).equals(\"null\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            if ((isParsable(quantity) || isParsableDbl(quantity)) \u0026\u0026 isKnownUnit(unit)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                // what if they anyhow input position?"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeList.appendReqIngredient(recipeTitle, ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                arrayList.add(MESSAGE_ADDED_TO_REQ_INGREDIENTS + \"\\n\" + \"       \" + ingredientName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            } else if ((!isParsable(quantity) || !isParsableDbl(quantity)) \u0026\u0026 isKnownUnit(unit)){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            } else  if (!isKnownUnit(unit) \u0026\u0026 (isParsable(quantity) || isParsableDbl(quantity))) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                arrayList.add(ERROR_MESSAGE_INVALID_UNIT + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY_OR_UNIT + \"\\n\" + ERROR_MESSAGE_EDIT_INGREDIENT_INS_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String prevIngredient \u003d recipeList.containsRecipeIngredient(recipeTitle, ingredientName);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String[] part \u003d prevIngredient.split(\",\", 5);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String index \u003d part[4].trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (quantity.isEmpty()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                quantity \u003d part[1].trim();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (unit.isEmpty()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                unit \u003d part[2].trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (additionalInfo.equals(NO_ADDITIONAL_INFO)){"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                additionalInfo \u003d part[3].trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeList.removeDupReqIngredient(Integer.parseInt(index), recipeTitle);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeList.appendReqIngredient(recipeTitle, ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED_TO_REQ_INGREDIENTS + \"\\n\" + \"       \" + ingredientName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else if (isClr(command)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d description.split(command, 2);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (recipeTitle.isEmpty()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_INGREDIENT_CLR_INCOMPLETE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else if (!recipeList.containsRecipe(recipeTitle)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeList.clearReqIngredient(recipeTitle);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        recipeStorage.saveFile(recipeList);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(MESSAGE_CLEARED_REQ_INGREDIENTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (!hasCorrectOrder(description)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_REQ_INGREDIENT_INVALID_ORDER + ERROR_MESSAGE_EDIT_REQ_INGREDIENT_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EDIT_REQ_INGREDIENT_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_REQ_INGREDIENT_NO_EDIT_COMMAND);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates that the input contains all of the ingredient\u0027s name, quantity, unit, and additional information."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if all of the ingredient\u0027s name, quantity, unit, and additional information are provided and false otherwise"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean hasAllIngredientFields(String description) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return description.contains(\"n/\") \u0026\u0026 description.contains(\"q/\") \u0026\u0026 description.contains(\"u/\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that the input is written in the order of ingredient\u0027s name, quantity, unit, and additional information."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the order is correct and false otherwise"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private boolean hasCorrectOrder(String description) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return (description.indexOf(\"n/\") - description.indexOf(\"q/\") \u003c 0) \u0026\u0026 (description.indexOf(\"q/\") \u003c description.indexOf(\"u/\"));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates that the input contains only one command."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the input contains only one command and false otherwise"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean hasOneCommand(String description) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (description.contains(\"ins/\")) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"del/\")) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"app/\")) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"clr/\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return i \u003d\u003d 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Gets the type of the command from user."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param description the input information from user"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the command type"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String whichCommand(String description) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (description.contains(\"ins/\")) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"ins/\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"del/\")) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"del/\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (description.contains(\"app/\")) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"app/\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return \"clr/\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is insert."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information by user"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the command type is insert and false otherwise"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isIns(String command) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"ins/\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is delete."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the command type is delete and false otherwise"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isDel(String command) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"del/\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is append."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the command type is append and false otherwise"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isApp(String command) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"app/\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Checks if the command type is clear."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param command the input information from user"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the command type is clear and false otherwise"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isClr(String command) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return command.equals(\"clr/\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the quantity is an integer."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param quantity String input from user"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsable(String quantity) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            logger.warning(\"Index input is not an integer.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the quantity is a floating point integer."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param quantity String input from user"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs a floating point integer and false otherwise"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isParsableDbl(String quantity) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Double.parseDouble(quantity);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            logger.warning(\"Index input is not an integer.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates the input position."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param recipeTitle name of the recipe"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param  position index of the preparation step"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param recipeList list of all recipes"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the position is valid and false otherwise"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private boolean isValidPosition(String recipeTitle, String position, RecipeList recipeList) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return Integer.parseInt(position) \u003c\u003d (recipeList.getRecipeList().get(recipeTitle).getRequiredIngredients().getSize() + 1);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Validates the input unit."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param unit the input unit from user"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the unit is known and false otherwise"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static boolean isKnownUnit(String unit) { // edit this part."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return unit.equals(\"g\") || unit.equals(\"kg\") || unit.equals(\"l\") || unit.equals(\"ml\") || unit.equals(\"cup\") || unit.equals(\"teaspoon\") || unit.equals(\"tablespoon\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 155,
      "LJX0006": 53,
      "jiaweijwjw": 214
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/ListAllRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.recipetasks.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPES_BY_PREPTIME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_HERE_ARE_THE_RECIPES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list all recipe command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListAllRecipeCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class ListAllRecipeCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ListAllRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list recipe command to show a list of the existing recipes in the recipe list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(MESSAGE_HERE_ARE_THE_RECIPES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            // using generics. can use KeySet also but use EntrySet can extend for further purpose later on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.addAll(listOfRecipes(recipeList.getRecipeList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.trim().equals(COMMAND_LIST_RECIPES_BY_PREPTIME)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(MESSAGE_HERE_ARE_THE_RECIPES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.addAll(listOfRecipesyPrepTime(recipeList.getRecipeList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Processes the list command to display all recipes in recipe list in the order that they are entered."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param map the recipe list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return arrayList containing all the recipes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cString\u003e listOfRecipes(TreeMap\u003cString, Recipe\u003e map) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Set entries \u003d map.entrySet();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Iterator entryIter \u003d entries.iterator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        while (entryIter.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Map.Entry entry \u003d (Map.Entry) entryIter.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Recipe value \u003d (Recipe) entry.getValue();  // Get the value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(\"    \" + (i + DISPLAYED_INDEX_OFFSET) + \". \" + value.getRecipeTitle().getTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Processes the list command to display all recipes in recipe list in the order of preparation time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param map the recipe list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return arrayList containing all the recipes in th eorder of preparation time"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cString\u003e listOfRecipesyPrepTime(TreeMap\u003cString, Recipe\u003e map) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        Set entries \u003d map.entrySet();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        Iterator entryIter \u003d entries.iterator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 49,
      "LJX0006": 28,
      "jiaweijwjw": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/ViewRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the view recipe command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class ViewRecipeCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for class ViewRecipeCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ViewRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the input to be alphabets."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the string consist only alphabets and false otherwise"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isValidRecipeTitle(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027 \u0027)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the view recipe command to view the content of a specific recipe."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the userviewrecipe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_VIEW_RECIPE)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(10) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (!isValidRecipeTitle(description)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_TITLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (!recipeList.containsRecipe(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(MESSAGE_RECIPE_TO_BE_VIEWED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(recipeList.viewRecipe(description));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 36,
      "LJX0006": 5,
      "jiaweijwjw": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/command/recipecommands/ViewRequiredIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the view required ingredient command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ViewRequiredIngredientCommand extends Command\u003cRecipeList, Ui, RecipeStorage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class ViewRequiredIngredientCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ViewRequiredIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates the input to be alphabets."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the string consist only alphabets and false otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isValidRecipeTitle(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (char c : input.toCharArray()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (!Character.isLetter(c) \u0026\u0026 !(c \u003d\u003d \u0027 \u0027)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the view required ingredient command to view the required ingredients for a range of recipes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeList    contains the recipe list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui             deals with interactions with the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeStorage deals with loading tasks from the file and saving recipes in the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return an array list consist of the results or prompts to be displayed to user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeList recipeList, Ui ui, RecipeStorage recipeStorage) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        HashMap\u003cString, Double\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        HashMap\u003cString, Double\u003e mergeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_VIEW_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(17) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.trim().contains(\",\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String[] split \u003d description.split(\",\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                for (String test : split) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (!isValidRecipeTitle(test)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        isValid \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (isValid) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (!recipeList.containsRecipe(split[i].trim())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST + \": \" + split[i].trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                arrayList.add(MESSAGE_RECIPE_TO_BE_VIEWED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                mergeMap.putAll(recipeList.getRecipeList().get(split[i].trim()).getRequiredIngredients().getAllIngredient());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                tempMap.putAll(recipeList.getRecipeList().get(split[i].trim()).getRequiredIngredients().getAllIngredient());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                tempMap.forEach("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                        (key, value) -\u003e mergeMap.merge(key, value, (v1, v2) -\u003e v1 +\u003d v2)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String ingredient \u003d recipeList.viewReqIngredient(split[i].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(\"    \" + \"Recipe Title: \" + split[i].trim() + \"\\n\" + ingredient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    AtomicInteger i \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    mergeMap.forEach("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            (key, value) -\u003e temp.add(\"    \" + i.incrementAndGet() + \". \" + key + \" | \" + value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(\"\\n\" + \"    \" + \"Combined list of ingredient with the respective amount: \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.addAll(temp);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_TITLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (isValidRecipeTitle(description)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (!recipeList.containsRecipe(description)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_RECIPE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(MESSAGE_RECIPE_TO_BE_VIEWED);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(recipeList.viewReqIngredient(description));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_TITLE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 116
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.AddBookingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.AllBookingsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.FindBookingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.ViewBookingScheduleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.bookingcommands.ViewOrdersCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.UseRecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.DeleteFromInventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.AddToInventoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.ClearInventoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.ListInventoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditRequiredIngredientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ViewRecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ListAllRecipeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ViewRequiredIngredientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditFeedbackCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditPrepTimeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditRatingCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditPrepStepCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_LIST_BOOKINGS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_ADD_BOOKING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_DELETE_BOOKING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_BOOKING_SCHEDULE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_FIND_BOOKING;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_ORDERS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_ADD_TO_INVENTORY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_LIST_INVENTORY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_DELETE_FROM_INVENTORY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_CLEAR_INVENTORY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.COMMAND_USE_RECIPE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_RECIPE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_DELETE_RECIPE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_REQ_INGREDIENT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_RATING;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_FEEDBACK;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPSTEP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_EDIT_PREPTIME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_VIEW_RECIPE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_VIEW_REQ_INGREDIENT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Making sense of the user input command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (input.trim().contains(COMMAND_ADD_TO_INVENTORY)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new AddToInventoryCommand(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_DELETE_FROM_INVENTORY)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new DeleteFromInventoryCommand(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_LIST_INVENTORY)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new ListInventoryCommand(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_CLEAR_INVENTORY)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new ClearInventoryCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_USE_RECIPE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new UseRecipeCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_ADD_RECIPE)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new AddRecipeCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_DELETE_RECIPE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new DeleteRecipeCommand(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_VIEW_RECIPE)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new ViewRecipeCommand(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (input.trim().contains(COMMAND_VIEW_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ViewRequiredIngredientCommand(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_EDIT_REQ_INGREDIENT)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new EditRequiredIngredientCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_EDIT_RATING)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new EditRatingCommand(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_EDIT_FEEDBACK)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new EditFeedbackCommand(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (input.trim().contains(COMMAND_EDIT_PREPSTEP)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return new EditPrepStepCommand(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (input.trim().contains(COMMAND_EDIT_PREPTIME)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return new EditPrepTimeCommand(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new FindBookingCommand(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new AddBookingCommand(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new DeleteBookingCommand(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new ViewBookingScheduleCommand(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_VIEW_ORDERS)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new ViewOrdersCommand(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (input.contains(COMMAND_LIST_BOOKINGS)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new AllBookingsCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ListAllRecipeCommand(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 13,
      "wjlingg": 58,
      "LJX0006": 2,
      "jiaweijwjw": 28
    }
  },
  {
    "path": "src/main/java/duke/model/list/bookinglist/BookingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.list.bookinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_NO_EXISTING_BOOKING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_NO_BOOKING_FOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_NO_ORDER_FOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_IS_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Creates a list to store booking objects for processing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private ArrayList\u003cBooking\u003e bookingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for bookinglist object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList an array list of bookings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public BookingList(ArrayList\u003cBooking\u003e bookingList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.bookingList \u003d bookingList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * adds a new element to the booking list with parameters specified."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerName    Name of the customer who made this booking."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerContact Contact number of the customer who made this booking."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param numberOfPax     Number of pax coming."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate     Date of the booking."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param orderName       The orders made by this booking."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @throws ParseException if input booking date is not parsable."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void addBooking(String customerName, String customerContact, String numberOfPax, String bookingDate, String orderName) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList.add(new Booking(customerName, customerContact, numberOfPax, bookingDate, orderName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * removes an element from the booking list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param i the specific index of the element to be removed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void deleteBooking(int i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList.remove(bookingList.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Generates all elements from the booking list to be displayed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the formatted bookings to be displayed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e listAllBooking() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrList.add(\"     \" + displayIndex + \". \" + bookingList.get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (arrList.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrList.add(MESSAGE_NO_EXISTING_BOOKING);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Filters elements out from the booking list by customer name."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerName Name of the customer who matches the booking."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of the filtered bookings."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e findBooking(String customerName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (bookingList.get(i).getCustomerName().toLowerCase().contains(customerName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrFind.add(\"     \" + displayIndex + \". \" + bookingList.get(i).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrFind.add(MESSAGE_NO_BOOKING_FOR + customerName + MESSAGE_IS_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrFind;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Extracts the orders out from booking matched by customer name."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerName Name of the customer who matches the booking."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array list consist of orders from specific customer."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e viewOrders(String customerName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (bookingList.get(i).getCustomerName().toLowerCase().equals(customerName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String orderOutput \u003d \"     \" + Arrays.toString(bookingList.get(i).getOrders()) + \" on \" + bookingList.get(i).getBookingDateFormatted();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrOrders.addAll(Collections.singletonList(orderOutput));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (arrOrders.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrOrders.add(MESSAGE_NO_ORDER_FOR + customerName + MESSAGE_IS_FOUND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrOrders;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the number of elements in the booking list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return size of the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return bookingList.size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the entire booking list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return booking list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return bookingList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 125,
      "wjlingg": 6
    }
  },
  {
    "path": "src/main/java/duke/model/list/inventorylist/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.list.inventorylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private HashMap\u003cString, Ingredient\u003e inventoryHM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public InventoryList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.inventoryHM \u003d new HashMap\u003cString, Ingredient\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void addIngredientMass(String ingredientName, String quantity, String unit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Ingredient ingred \u003d inventoryHM.get(ingredientName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ingred.addMass(quantity, unit);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void replaceAdditionalInfo(String ingredientName, String additionalInfo) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Ingredient ingred \u003d inventoryHM.get(ingredientName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ingred.replaceInfo(additionalInfo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public InventoryList(HashMap\u003cString, Ingredient\u003e inventoryListFromStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.inventoryHM \u003d inventoryListFromStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean containsIngredient(String ingredientName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (this.inventoryHM.containsKey(ingredientName)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void clearInventory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.inventoryHM.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean removeUsedIngredients(ArrayList\u003cIngredient\u003e reqIngredients) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        boolean isRemoved \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Ingredient ingredient : reqIngredients) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String ingredientName \u003d ingredient.getIngredientName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                double ingredientMass \u003d ingredient.getMass();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                // if ingredient does not exist in inventory or not enough"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (!isInInventory(ingredientName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    isRemoved \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    Ingredient inventoryIngredient \u003d this.inventoryHM.get(ingredientName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    double inventoryIngredientMass \u003d inventoryIngredient.getMass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (!isDeductable(ingredientMass, inventoryIngredientMass)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        isRemoved \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        deductMass(ingredientMass, inventoryIngredient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        updateQuantity(inventoryIngredient);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return isRemoved;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void deductMass(double ingredientMass, Ingredient inventoryIngredient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        inventoryIngredient.deductMass(ingredientMass);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void updateQuantity(Ingredient inventoryIngredient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        inventoryIngredient.updateQuantity();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean isDeductable(double ingredientMass, double inventoryIngredientMass) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (inventoryIngredientMass - ingredientMass \u003c 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean isInInventory(String ingredientName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.inventoryHM.containsKey(ingredientName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public double getIngredientMass(String ingredientName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Ingredient ingred \u003d this.inventoryHM.get(ingredientName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingred.getMass();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void addIngredient(String ingredientName, String quantity, String unit, String additionalInfo) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        inventoryHM.put(ingredientName, new Ingredient(ingredientName, quantity, unit, additionalInfo));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Ingredient deleteIngredient(String ingredientName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.inventoryHM.remove(ingredientName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return inventoryHM.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public HashMap\u003cString, Ingredient\u003e getInventoryList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.inventoryHM;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 13,
      "jiaweijwjw": 95
    }
  },
  {
    "path": "src/main/java/duke/model/list/recipelist/RecipeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.recipetasks.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class RecipeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    TreeMap\u003cString, Recipe\u003e recipeLHM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RecipeList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeList(TreeMap\u003cString, Recipe\u003e recipeListFromStorage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.recipeLHM \u003d recipeListFromStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addRecipe(String recipeTitle) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.put(recipeTitle, createNewRecipe(recipeTitle));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Recipe deleteRecipe(String recipeTitle) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.remove(recipeTitle);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Recipe createNewRecipe(String recipeTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return new Recipe(recipeTitle);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TreeMap\u003cString, Recipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.recipeLHM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean containsRecipe(String recipeTitle) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.containsKey(recipeTitle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String containsRecipeIngredient(String recipeTitle, String recipeIngredient) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e(this.recipeLHM.get(recipeTitle).getRequiredIngredients().getRequiredIngredientList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (String ingredient : arrayList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String[] check \u003d ingredient.split(\",\", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (check[0].trim().equals(recipeIngredient)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                temp \u003d ingredient + \" , \" + i;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (temp.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return \"null\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void editRating(String recipeTitle, String rating) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).editRating(rating);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void editFeedback(String recipeTitle, String feedback) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).editFeedback(feedback);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void editPrepTime(String recipeTitle, String prepTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.recipeLHM.get(recipeTitle).editPrepTime(prepTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void getPrepTime(String recipeTitle, String prepTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getPrepTime(prepTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String viewRecipe(String recipeTitle) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.get(recipeTitle).getViewString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getReqIngredients(String recipeTitle) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        Recipe recipe \u003d this.recipeLHM.get(recipeTitle);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return recipe.getListOfIngredients();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String viewReqIngredient(String recipeTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.get(recipeTitle).getViewReqString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void insertReqIngredient(String recipeTitle, String position, String ingredientName, String quantity, String unit, String additionalInfo) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getRequiredIngredients().insertIngredient(position, ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String deleteReqIngredient(String recipeTitle, String position) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.get(recipeTitle).getRequiredIngredients().deleteIngredient(position);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void appendReqIngredient(String recipeTitle, String ingredientName, String quantity, String unit, String additionalInfo) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getRequiredIngredients().appendIngredient(ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void clearReqIngredient(String recipeTitle) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getRequiredIngredients().clearIngredients();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void removeDupReqIngredient(int index, String recipeTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getRequiredIngredients().removeIngredient(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void insertPrepStep(String recipeTitle, String position, String prepStep) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getPrepSteps().insertStep(position, prepStep);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String deletePrepStep(String recipeTitle, String position) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeLHM.get(recipeTitle).getPrepSteps().deleteStep(position);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void appendPrepStep(String recipeTitle, String prepStep) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getPrepSteps().appendStep(prepStep);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void clearPrepStep(String recipeTitle) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeLHM.get(recipeTitle).getPrepSteps().clearSteps();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.recipeLHM.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 51,
      "LJX0006": 8,
      "jiaweijwjw": 68
    }
  },
  {
    "path": "src/main/java/duke/model/task/bookingtasks/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.bookingtasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Booking class use to create booking object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String customerName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String customerContact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String numberOfPax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String bookingDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected SimpleDateFormat dateFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String orderName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for booking object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Initialises booking object with specific details in string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerName    Name of the customer who made this booking."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param customerContact Contact number of the customer who made this booking."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param numberOfPax     Number of pax coming."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingDate     Date of the booking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param orderName       The orders made by this booking."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @throws ParseException if input booking date is not parsable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public Booking(String customerName, String customerContact, String numberOfPax, String bookingDate, String orderName) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.customerContact \u003d customerContact;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.numberOfPax \u003d numberOfPax;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.bookingDate \u003d bookingDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        dateFormatter \u003d new SimpleDateFormat(\"d MMMM yyyy\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return String containing the standardized format of a booking."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return \"booking\" + \" | \" + customerName + \" | \" + customerContact + \" | \" + numberOfPax + \" | \" + bookingDate + \" | \" + orderName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Converts user input command to a standardized format in bookinglist."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return String containing the standardized format of a booking."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return \"[Customer name: \" + customerName + \"] \" + \"[Contact No.: \" + customerContact + \"] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                + \"[No. of pax: \" + numberOfPax + \"] \" + \"[Booking on: \" + dateFormatter.format(date) + \"] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                + \"[Orders: \" + orderName + \"]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the customer name of the booking."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return a string containing name of customer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String getCustomerName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return customerName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the orders of the booking"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return an array of string containing the orders for the booking."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String[] getOrders() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String[] orders \u003d orderName.split(\",\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the date of the booking."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return a string containing the booking date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String getBookingDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return bookingDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the standardized date of the booking."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return a date object which represents the booking date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Get the formatted date of the booking."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return a date object which represents the formatted booking date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String getBookingDateFormatted() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return dateFormatter.format(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 107,
      "wjlingg": 1
    }
  },
  {
    "path": "src/main/java/duke/model/task/ingredienttasks/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.ingredienttasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.InventoryMessages.NO_ADDITIONAL_INFO;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private double quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private UnitOfMeasurement unit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String additionalInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private double mass; // base in grams."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Ingredient(String ingredientName, String quantity, String unit, String additionalInfo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.quantity \u003d Double.parseDouble(quantity);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.unit \u003d assignUnit(unit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.additionalInfo \u003d additionalInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.mass \u003d calculateMass();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void addMass(String quantity, String unit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        // If original unit and new unit is the same, this.unit dont change. Else, this.unit \u003d G"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        // if original unit and new unit is not the same,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        // check the base unit, if base unit is already G, convert the new unit to G and the quantity accordingly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        // if base unit is not G, convert both this.unit and new unit to G and their quantity accordingly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        double additionalQuantity \u003d Double.parseDouble(quantity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        UnitOfMeasurement newUnit \u003d assignUnit(unit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (this.unit \u003d\u003d newUnit) { // added unit is same as prev"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.quantity +\u003d additionalQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.mass \u003d calculateMass();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else { // added unit is different"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (this.unit \u003d\u003d UnitOfMeasurement.G) { // if originally is already in grams."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                additionalQuantity \u003d convertQuantity(additionalQuantity, newUnit);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.quantity +\u003d additionalQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.mass \u003d calculateMass();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else { // if original is not in grams. change it to grams"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.quantity \u003d convertQuantity(this.quantity, this.unit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                additionalQuantity \u003d convertQuantity(additionalQuantity, newUnit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.quantity +\u003d additionalQuantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.unit \u003d UnitOfMeasurement.G;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.mass \u003d calculateMass();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void deductMass(double ingredientMass) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.mass -\u003d ingredientMass;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void updateQuantity() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        switch (this.unit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case KG:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case L:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.quantity \u003d (this.mass/1000.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case CUP: this.quantity \u003d (this.mass/237.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TEASPOON: this.quantity \u003d (this.mass/5.0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TABLESPOON: this.quantity \u003d (this.mass/13.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            default: this.quantity \u003d this.mass;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public double convertQuantity(double quantity, UnitOfMeasurement newUnit) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        switch (newUnit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case KG:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case L:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return quantity*1000;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case CUP: return quantity*237;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TEASPOON: return quantity*5;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TABLESPOON: return quantity*13;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            default: return quantity;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void replaceInfo(String additionalInfo) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (additionalInfo !\u003d NO_ADDITIONAL_INFO) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.additionalInfo \u003d additionalInfo;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public double getQuantity() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.ingredientName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getAdditionalInfo() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.additionalInfo;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public UnitOfMeasurement getUnit() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.unit;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public double getMass() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.mass;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private double calculateMass() { // can remove magic numbers."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        switch (this.unit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case KG:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case L:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                return this.quantity*1000;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case CUP: return this.quantity*237;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TEASPOON: return this.quantity*5;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case TABLESPOON: return this.quantity*13;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            default: return this.quantity;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private UnitOfMeasurement assignUnit(String unit) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"kg\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"KG\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.KG;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"ml\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"ML\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.ML;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"l\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"L\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.L;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"cup\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"CUP\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.CUP;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"teaspoon\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"TEASPOON\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.TEASPOON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"tablespoon\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"TABLESPOON\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return UnitOfMeasurement.TABLESPOON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            default: return UnitOfMeasurement.G;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return ingredientName + \" , \" + quantity + \" , \" + unit + \" , \" + additionalInfo;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientName + \" [\" + quantity + \" | \" + unit + \" | \" + additionalInfo + \"] \";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 25,
      "jiaweijwjw": 121
    }
  },
  {
    "path": "src/main/java/duke/model/task/ingredienttasks/UnitOfMeasurement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.ingredienttasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public enum UnitOfMeasurement {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    TEASPOON, TABLESPOON, CUP, ML, L, KG, G"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 4
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/Feedback.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class Feedback {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String feedback \u003d \"No feedback yet.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Feedback() {};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Feedback(String feedback) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void edit(String feedback) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return this.feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"    \" + feedback;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 2,
      "LJX0006": 19,
      "jiaweijwjw": 8
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/PrepSteps.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class PrepSteps {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    ArrayList\u003cString\u003e prepStepsList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public PrepSteps() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.prepStepsList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public PrepSteps(String prepStepsFromStorage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.prepStepsList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        parseStepsFromStorage(prepStepsFromStorage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void parseStepsFromStorage(String prepStepsFromStorage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String[] split \u003d prepStepsFromStorage.split(\"/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.prepStepsList.add(split[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void insertStep(String position, String prepStep) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        prepStepsList.add(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET, prepStep);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void appendStep(String prepStep) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        prepStepsList.add(prepStep);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String deleteStep(String position) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String deletedPrepStep \u003d prepStepsList.get(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        prepStepsList.remove(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return deletedPrepStep;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void clearSteps() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        prepStepsList.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return prepStepsList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toViewString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String joinedString \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (prepStepsList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            joinedString \u003d \"    No preparation steps provided yet.\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            prepStepsList.remove(\"No preparation steps provided yet.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (prepStepsList.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                joinedString \u003d \"    No preparation steps provided yet.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                for (String step : prepStepsList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    prepStepsList.remove(\"No preparation steps provided yet.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ++i;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    joinedString \u003d joinedString.concat(\"    \" + i + \". \" + step + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return joinedString;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String joinedString \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (prepStepsList.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            joinedString \u003d \"No preparation steps provided yet.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            for (String step : prepStepsList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (joinedString.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    joinedString \u003d joinedString.concat(step);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    joinedString \u003d joinedString.concat(\" / \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    joinedString \u003d joinedString.concat(step);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return joinedString;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 7,
      "jiaweijwjw": 79
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/PrepTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class PrepTime {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private String prepTime \u003d \"Unknown preparation time\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepTime() {};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepTime(String prepTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void edit(String prepTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String getPrepTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return this.prepTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return prepTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return prepTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 29
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/Rating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public enum Rating {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    UNRATED, AVERAGE, GOOD, DELICIOUS"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "LJX0006": 2,
      "jiaweijwjw": 2
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/Recipe.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_PREPSTEPS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_REQ_INGREDIENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_FEEDBACK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.LABEL_PREPTIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    RecipeTitle recipeTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    PrepTime prepTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    Rating rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    PrepSteps prepSteps;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    RequiredIngredients requiredIngredients; // requiredIngredients is a list of recipeIngredient objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    Feedback feedback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Recipe(String recipeTitle) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.recipeTitle \u003d new RecipeTitle(recipeTitle);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepTime \u003d new PrepTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.rating \u003d Rating.UNRATED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.prepSteps \u003d new PrepSteps();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.requiredIngredients \u003d new RequiredIngredients();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.feedback \u003d new Feedback();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public Recipe(String recipeTitle, String prepTime, String rating, String prepSteps, String requiredIngredients, String feedback) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.recipeTitle \u003d new RecipeTitle(recipeTitle);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepTime \u003d new PrepTime(prepTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.rating \u003d assignRating(rating);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.prepSteps \u003d new PrepSteps(prepSteps);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.requiredIngredients \u003d new RequiredIngredients(requiredIngredients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.feedback \u003d new Feedback(feedback);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RecipeTitle getRecipeTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.recipeTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepTime getPrepTime(String prepTime) { return this.prepTime; }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.rating;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public PrepSteps getPrepSteps() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.prepSteps;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RequiredIngredients getRequiredIngredients() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.requiredIngredients;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getListOfIngredients() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.requiredIngredients.getList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void editRating(String rating) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (rating.equals(\"average\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.rating \u003d Rating.AVERAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (rating.equals(\"good\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.rating \u003d Rating.GOOD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (rating.equals(\"delicious\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.rating \u003d Rating.DELICIOUS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            this.rating \u003d Rating.UNRATED;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void editFeedback(String feedback) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.feedback.edit(feedback);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Feedback getFeedback() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.feedback;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void editPrepTime(String prepTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepTime.edit(prepTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.recipeTitle.toSaveString().trim() + \" | \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                + this.prepTime.toSaveString().trim() + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + this.checkRating().trim() + \" | \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + this.prepSteps.toSaveString().trim() + \" | \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + this.requiredIngredients.toSaveString().trim() + \" | \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + this.feedback.toSaveString().trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String getViewString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"    \" + LABEL_TITLE + this.recipeTitle.toString() + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"    \" +  LABEL_PREPTIME + this.prepTime.toString() + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"    \" + LABEL_RATING + this.checkRating() + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"    \" + LABEL_PREPSTEPS + this.prepSteps.toViewString()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"    \" + LABEL_REQ_INGREDIENTS + this.requiredIngredients.toViewString()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"    \" + LABEL_FEEDBACK + this.feedback.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getViewReqString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"    \" + LABEL_REQ_INGREDIENTS + this.requiredIngredients.toViewString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private Rating assignRating(String rating) { // can try switch statements too."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (rating.equals(\"Average\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return Rating.AVERAGE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (rating.equals(\"Good\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return Rating.GOOD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (rating.equals(\"Delicious\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return Rating.DELICIOUS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return Rating.UNRATED;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String checkRating() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        switch (this.rating) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case AVERAGE: return \"Average\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case GOOD: return \"Good\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            case DELICIOUS: return \"Delicious\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            default: return \"Unrated\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 19,
      "LJX0006": 12,
      "jiaweijwjw": 103
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/RecipeTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeTitle {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private String recipeTitle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RecipeTitle(String recipeTitle) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.recipeTitle \u003d recipeTitle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return recipeTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return recipeTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 15,
      "jiaweijwjw": 7
    }
  },
  {
    "path": "src/main/java/duke/model/task/recipetasks/RequiredIngredients.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.model.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class RequiredIngredients {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    ArrayList\u003cIngredient\u003e requiredIngredientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RequiredIngredients() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.requiredIngredientList \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RequiredIngredients(String requiredIngredientsFromStorage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.requiredIngredientList \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        parseIngredientsFromStorage(requiredIngredientsFromStorage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void parseIngredientsFromStorage(String requiredIngredientsFromStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String[] individualIng \u003d requiredIngredientsFromStorage.split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        for (int j \u003d 0; j \u003c individualIng.length; j++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String ingredientName, quantity, unit, additionalInfo, remaining, remaining2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String[] split \u003d individualIng[j].split(\",\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ingredientName \u003d split[0].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String[] split2 \u003d remaining.split(\",\", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (split2.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    quantity \u003d split2[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    remaining2 \u003d split2[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split3 \u003d remaining2.split(\",\", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (split3.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        unit \u003d split3[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        additionalInfo \u003d split3[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        this.requiredIngredientList.add(new Ingredient(ingredientName, quantity, unit, additionalInfo));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    else if (split3.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        unit \u003d split3[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        additionalInfo \u003d \"No additional information.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        this.requiredIngredientList.add(new Ingredient(ingredientName, quantity, unit, additionalInfo));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void insertIngredient(String position, String ingredientName, String quantity, String unit, String additionalInfo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        requiredIngredientList.add(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET, new Ingredient(ingredientName, quantity, unit, additionalInfo));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void appendIngredient(String ingredientName, String quantity, String unit, String additionalInfo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        requiredIngredientList.add(new Ingredient(ingredientName, quantity, unit, additionalInfo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String deleteIngredient(String position) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String deletedIngredientName \u003d requiredIngredientList.get(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET).getIngredientName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        requiredIngredientList.remove(Integer.parseInt(position) - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return deletedIngredientName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void clearIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        requiredIngredientList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    //@@author wjlingg"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void removeIngredient(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        requiredIngredientList.remove(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return requiredIngredientList.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    //@@author wjlingg"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public HashMap\u003cString, Double\u003e getAllIngredient() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        HashMap\u003cString, Double\u003e arrayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Ingredient ingredient : requiredIngredientList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayMap.put(ingredient.getIngredientName(), ingredient.getMass());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayMap;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toViewString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String joinedString \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (requiredIngredientList.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            joinedString \u003d \"    \" + \"No required ingredient.\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Ingredient ingredient : requiredIngredientList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                joinedString \u003d joinedString.concat(\"    \" + i + \".  \" + ingredient.toString() + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return joinedString;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.requiredIngredientList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    //@@author wjlingg"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e getRequiredIngredientList () {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Ingredient ingredient : requiredIngredientList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ingredient.toSaveString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String joinedString \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (requiredIngredientList.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            joinedString \u003d \"No required ingredient.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Ingredient Ingredient : requiredIngredientList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (joinedString.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    joinedString \u003d joinedString.concat(Ingredient.toSaveString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    joinedString \u003d joinedString.concat(\" / \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    joinedString \u003d joinedString.concat(Ingredient.toSaveString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return joinedString;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 78,
      "jiaweijwjw": 52
    }
  },
  {
    "path": "src/main/java/duke/storage/BookingStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the ability to read and write to the booking storage location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingStorage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final ArrayList\u003cBooking\u003e arrBookingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for the class BookingStorage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param filePath the directory in which the recipes are to be stored"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public BookingStorage(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Writes to file to save the bookings to file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList the list containing recipes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void saveFile(BookingList bookingList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                bufferedWriter.write(booking.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            exc.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Loads all the save bookings in the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return the list of bookings in booking list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cBooking\u003e load() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (Files.notExists(Paths.get(filePath))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                System.out.println(\"Unknown IO error when creating \u0027data/\u0027 folder.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            InputStream inputStream;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (filePath.equals(filePathBookingTest)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/datatest/bookingsTest.txt\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/data/bookings.txt\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            BufferedReader bufferedReader1 \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            ArrayList\u003cString\u003e arrayList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            ArrayList\u003cString\u003e arrayList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList1.add(content);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            while ((content \u003d bufferedReader1.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList2.add(content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            List\u003cString\u003e listTwoCopy \u003d new ArrayList\u003c\u003e(arrayList2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            listTwoCopy.removeAll(arrayList1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList1.addAll(listTwoCopy);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            for (String item : arrayList1){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if(item.split(\"\\\\|\",6)[0].trim().equals(\"booking\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String customerName \u003d item.split(\"\\\\|\",6)[1].trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String customerContact \u003d item.split(\"\\\\|\",6)[2].trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String numberOfPax \u003d item.split(\"\\\\|\",6)[3].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String bookingDate \u003d item.split(\"\\\\|\",6)[4].trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String orderName \u003d item.split(\"\\\\|\",6)[5].trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    Booking booking \u003d new Booking(customerName, customerContact, numberOfPax, bookingDate, orderName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrBookingList.add(booking);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrBookingList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 110,
      "wjlingg": 17
    }
  },
  {
    "path": "src/main/java/duke/storage/InventoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathInventoryTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": " * Handles the ability to read and write to the inventory storage location."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class InventoryStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static final HashMap\u003cString, Ingredient\u003e inventoryListHM \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private final String filePathInventory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for the class InventoryStorage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param filePathInventory the directory in which the inventory are to be stored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public InventoryStorage(String filePathInventory) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.filePathInventory \u003d filePathInventory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Writes to file to save the inventory to file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param inventoryList the list containing inventory"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void saveFile(InventoryList inventoryList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathInventory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            inventoryList.getInventoryList().forEach((String, Ingredient) -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    bufferedWriter.write(Ingredient.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Loads all the save inventory in the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the list of inventory in inventory list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public HashMap\u003cString, Ingredient\u003e load() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (Files.notExists(Paths.get(filePathInventory))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                File file \u003d new File(filePathInventory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"Unknown IO error when creating \u0027data/\u0027 folder.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            InputStream inputStream;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (filePathInventory.equals(filePathInventoryTest)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/datatest/inventoriesTest.txt\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/data/inventories.txt\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathInventory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader1 \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null || (content \u003d bufferedReader1.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String ingredientName, quantity, unit, additionalInfo, remaining, remaining2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String[] split \u003d content.split(\",\", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    ingredientName \u003d split[0].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    String[] split2 \u003d remaining.split(\",\", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (split2.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        quantity \u003d split2[0].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        remaining2 \u003d split2[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        String[] split3 \u003d remaining2.split(\",\", 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (split3.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            unit \u003d split3[0].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            additionalInfo \u003d split3[1].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            Ingredient ingredient \u003d new Ingredient(ingredientName, quantity, unit, additionalInfo);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            inventoryListHM.put(ingredientName, ingredient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathInventory + \"\u0027\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathInventory + \"\u0027\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return inventoryListHM;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 49,
      "LJX0006": 7,
      "jiaweijwjw": 63
    }
  },
  {
    "path": "src/main/java/duke/storage/RecipeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.task.recipetasks.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathTempTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": " * Handles the ability to read and write to the recipe storage location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class RecipeStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final TreeMap\u003cString, Recipe\u003e LHMRecipeList \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final String filePathRecipes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for the class RecipeStorage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param filePathRecipes the directory in which the recipes are to be stored"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RecipeStorage(String filePathRecipes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.filePathRecipes \u003d filePathRecipes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Writes to file to save the recipes to file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param recipeList the list containing recipes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void saveFile(RecipeList recipeList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathRecipes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeList.getRecipeList().forEach((String, Recipe) -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    bufferedWriter.write(Recipe.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Loads all the save recipes in the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the list of recipes in recipe list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TreeMap\u003cString, Recipe\u003e load() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (Files.notExists(Paths.get(filePathRecipes))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                File file \u003d new File(filePathRecipes);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"Unknown IO error when creating \u0027data/\u0027 folder.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            InputStream inputStream;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (filePathRecipes.equals(filePathRecipeTest)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/datatest/recipesTest.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (filePathRecipes.equals(filePathTempTest)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/datatest/tempTest.txt\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                inputStream \u003d getClass().getResourceAsStream(\"/data/recipes.txt\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathRecipes);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader1 \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null || (content \u003d bufferedReader1.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                // can use a splitMethod() here for tidyness?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String recipeTitle, prepTime, rating, prepSteps, requiredIngredients, feedback, remaining, remaining2, remaining3, remaining4;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String[] split \u003d content.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    recipeTitle \u003d split[0].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    remaining \u003d split[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    String[] split2 \u003d remaining.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (split2.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        prepTime \u003d split2[0].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        remaining2 \u003d split2[1].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        String[] split3 \u003d remaining2.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (split3.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            rating \u003d split3[0].trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            remaining3 \u003d split3[1].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            String[] split4 \u003d remaining3.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            if (split4.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                prepSteps \u003d split4[0].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                remaining4 \u003d split4[1].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                String[] split5 \u003d remaining4.split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                if (split5.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                    requiredIngredients \u003d split5[0].trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                    feedback \u003d split5[1].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    Recipe recipe \u003d new Recipe(recipeTitle, prepTime, rating,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                            prepSteps, requiredIngredients, feedback);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                                    LHMRecipeList.put(recipeTitle, recipe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathRecipes + \"\u0027\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathRecipes + \"\u0027\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return LHMRecipeList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 60,
      "LJX0006": 16,
      "jiaweijwjw": 59
    }
  },
  {
    "path": "src/main/java/duke/ui/AlertHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller to show prompt for help."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AlertHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Shows prompt message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setHeaderText(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.show();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * This control represents a dialog box consisting of a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getWelcome(String text) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return new DialogBox(text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates dialog box for Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param text Duke response"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return dialog box"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates dialog box for Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param text Duke response"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return dialog box"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getDukeDialog(String text) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/ExitWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller for ExitWindow."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ExitWindow extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label exitMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Are you sure to exit?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates a exit window."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ExitWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ExitWindow.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        exitMessage.setText(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void confirmExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void notConfirmExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d (Stage) noButton.getScene().getWindow();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 52
    }
  },
  {
    "path": "src/main/java/duke/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller for HelpWindow."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class HelpWindow extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String USERGUIDE_URL \u003d \"https://github.com/AY1920S1-CS2113T-T12-4/main/blob/master/docs/README.adoc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates a help window."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/HelpWindow.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Copies the URL of the user guide to the clipboard."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Window owner \u003d copyButton.getScene().getWindow();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AlertHelper.showAlert(Alert.AlertType.CONFIRMATION, owner, \"Copied URL\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"URL link has been copied\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 56
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_LOADING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_BYE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_HELP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.BookingMessages.COMMAND_VIEW_ORDERS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPE_INGREDIENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private AnchorPane root;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ListView\u003cString\u003e listView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ListView\u003cString\u003e listViewResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Initializes the ui."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Ui ui \u003d new Ui(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                DialogBox.getWelcome(duke.showWelcome())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleUserInput() throws ParseException, IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            showMessage(\"Pls input a command to proceed\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            resultDisplay.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    DialogBox.getUserDialog(input)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (input.trim().equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (input.trim().equals(COMMAND_HELP)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e(duke.runProgram(input));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                showMessage(arrayList.get(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (input.trim().contains(COMMAND_LIST_RECIPE_INGREDIENT)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        || input.trim().contains(COMMAND_VIEW_ORDERS)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    listViewResult.getItems().clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    for (int i \u003d 1; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        listViewResult.getItems().add(arrayList.get(i));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    listViewResult.getItems().clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    listView.getItems().clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    for (int i \u003d 1; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        listView.getItems().add(arrayList.get(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        resultDisplay.setText(message);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return userInput.getText();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void handleLoadingError() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        resultDisplay.setText(ERROR_MESSAGE_LOADING);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ExitWindow exitWindow \u003d new ExitWindow();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(new Scene(exitWindow));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"Exit\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setWidth(480);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setHeight(100);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(new Scene(helpWindow));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"Help\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setWidth(680);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setHeight(100);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 143
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Ui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Display welcome message of the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return DIVIDER + \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 16,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--@@author wjlingg--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cInsets left\u003d \"30.0\" right\u003d\"70.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 11,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ExitWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--@@author wjlingg--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cHBox alignment\u003d\"BASELINE_LEFT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"0.0\" prefWidth\u003d\"400.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cLabel fx:id\u003d\"exitMessage\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cButton fx:id\u003d\"yesButton\" cancelButton\u003d\"true\" mnemonicParsing\u003d\"false\" onAction\u003d\"#confirmExit\" text\u003d\"YES\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cButton fx:id\u003d\"noButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#notConfirmExit\" text\u003d\"NO\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 39
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--@@author wjlingg--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"800.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                 \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003c/Button\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--@@author wjlingg--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cAnchorPane id\u003d\"AnchorPane\" fx:id\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"1240.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cVBox prefHeight\u003d\"177.0\" prefWidth\u003d\"1240.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"25.0\" prefWidth\u003d\"1200.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c!--                user has the option to exit the program without typing in exit command--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c!--                link to user guide in case user need help--\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c!--        user to input command--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutY\u003d\"25.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"1200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"1200.0\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c!--            display the result of the user command--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"102.0\" minHeight\u003d\"93.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"1200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" prefHeight\u003d\"100.0\" prefWidth\u003d\"1200.0\" promptText\u003d\"Display error message here...\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"198.0\" prefHeight\u003d\"450.0\" prefWidth\u003d\"300.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"450.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane2\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"297.0\" layoutY\u003d\"198.0\" prefHeight\u003d\"275.0\" prefWidth\u003d\"940.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cListView fx:id\u003d\"listView\" prefHeight\u003d\"275.0\" prefWidth\u003d\"940.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane3\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"297.0\" layoutY\u003d\"473.0\" prefHeight\u003d\"175.0\" prefWidth\u003d\"940.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cListView fx:id\u003d\"listViewResult\" prefHeight\u003d\"175.0\" prefWidth\u003d\"940.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 58,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/WelcomeScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--@@author wjlingg--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cStackPane fx:id\u003d\"rootPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           prefHeight\u003d\"650.0\" prefWidth\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cImageView fitHeight\u003d\"650.0\" fitWidth\u003d\"1200.0\" pickOnBounds\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cImage url\u003d\"@../images/welcome.PNG\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 17
    }
  },
  {
    "path": "src/test/java/DataForTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DataForTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DataForTest(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"bookings\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.addAll(getStringFromFile(\"/datatest/bookingsTest.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.add(\"Error in reading bookingsTest.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"recipes\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.addAll(getStringFromFile(\"/datatest/recipesTest.txt\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.add(\"Error in reading recipesTest.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            case \"inventories\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.addAll(getStringFromFile(\"/datatest/inventoriesTest.txt\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    output.add(\"Error in reading inventoriesTest.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                output.add(\"No such text\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Reads help files from the resource folder of the JAR and returns the files as"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * a String."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param resourcePath Path to file in resources folder."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String format of entire file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws IOException when file cannot be read for some unknown error."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cString\u003e getStringFromFile(String resourcePath) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        InputStream inputStream \u003d getClass().getResourceAsStream(resourcePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            input.add(line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 75
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/AddBookingCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.AddBookingCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AddBookingCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testAddBookingCommand() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String testCase \u003d \"addbooking Kelvin 81234567 8 1/1/2000 orders/ beef burger\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedOutput \u003d \"New booking added:\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                \"       [Customer name: Kelvin] [Contact No.: 81234567] [No. of pax: 8] [Booking on: 1 January 2000] [Orders: beef burger]\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                \"Now you have 4 bookings in the list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(expectedOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand1 \u003d new DeleteBookingCommand(\"deletebooking 4\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        deleteBookingCommand1.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        AddBookingCommand addBookingCommand \u003d new AddBookingCommand(testCase);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(addBookingCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        deleteBookingCommand1.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 49,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/AllBookingsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.AllBookingsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_ALL_CURRENT_BOOKINGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AllBookingsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testAllBookingsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(MESSAGE_ALL_CURRENT_BOOKINGS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     1. [Customer name: Zihan] [Contact No.: 91520567] [No. of pax: 4] [Booking on: 12 December 2019] [Orders: prawn pasta, chicken pie]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     2. [Customer name: John_Lim] [Contact No.: 82738364] [No. of pax: 6] [Booking on: 30 June 2019] [Orders: chicken rice, fish and chips]\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     3. [Customer name: Jack] [Contact No.: 94847291] [No. of pax: 2] [Booking on: 13 May 2019] [Orders: beef pasta]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        AllBookingsCommand allBookingsCommand \u003d new AllBookingsCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(allBookingsCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 40,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/BookingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void BookingTest() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        Booking bookingTest \u003d new Booking(\"Kelvin\", \"81234567\", \"8\", \"1/1/2000\", \"beef burger, seafood pasta, chicken rice\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedToSaveString \u003d \"booking | Kelvin | 81234567 | 8 | 1/1/2000 | beef burger, seafood pasta, chicken rice\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(expectedToSaveString, bookingTest.toSaveString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedToString \u003d \"[Customer name: Kelvin] [Contact No.: 81234567] [No. of pax: 8] [Booking on: 1 January 2000] [Orders: beef burger, seafood pasta, chicken rice]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(expectedToString, bookingTest.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedCustomerName \u003d \"Kelvin\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(expectedCustomerName, bookingTest.getCustomerName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedBookingDate \u003d \"1/1/2000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(expectedBookingDate, bookingTest.getBookingDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedFormattedDate \u003d \"1 January 2000\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(expectedFormattedDate, bookingTest.getBookingDateFormatted());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 33,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/DeleteBookingCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.AddBookingCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class DeleteBookingCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testDeleteBookingCommand() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String testCase \u003d \"deletebooking 4\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedOutput \u003d \"     Noted. I\u0027ve removed this booking:\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                \"       [Customer name: Kelvin] [Contact No.: 81234567] [No. of pax: 8] [Booking on: 1 January 2000] [Orders: beef burger]\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                \"Now you have 3 bookings in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(expectedOutput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        AddBookingCommand addBookingCommand \u003d new AddBookingCommand(\"addbooking Kelvin 81234567 8 1/1/2000 orders/ beef burger\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        addBookingCommand.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        DeleteBookingCommand deleteBookingCommand \u003d new DeleteBookingCommand(testCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(deleteBookingCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 46,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/FindBookingCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.FindBookingCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.BookingMessages.MESSAGE_MATCHING_BOOKINGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class FindBookingCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testFindBookingCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(MESSAGE_MATCHING_BOOKINGS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     3. [Customer name: Jack] [Contact No.: 94847291] [No. of pax: 2] [Booking on: 13 May 2019] [Orders: beef pasta]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        FindBookingCommand findBookingCommand \u003d new FindBookingCommand(\"findbooking jack\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(findBookingCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 39,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/ViewBookingScheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.ViewBookingScheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewBookingScheduleCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testViewBookingSchedule() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String expectedOutput \u003d \"      No booking on 01 January 2000. \\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                \"      You may proceed with command: addbooking\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(expectedOutput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ViewBookingScheduleCommand viewBookingScheduleCommand \u003d new ViewBookingScheduleCommand(\"viewbookingschedule 1/1/2000\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(viewBookingScheduleCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 39,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/bookingcommandstest/ViewOrdersCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.bookingcommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.logic.command.bookingcommands.ViewOrdersCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.model.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.filePathBookingTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//@@author lizihan95"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewOrdersCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void testViewBookingSchedule() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookingTest);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     Here are your orders for: john_lim\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrExpectedOutput.add(\"     [chicken rice,  fish and chips] on 30 June 2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ViewOrdersCommand viewOrdersCommand \u003d new ViewOrdersCommand(\"vieworders john_lim\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrActualOutput \u003d new ArrayList\u003c\u003e(viewOrdersCommand.execute(bookingList, ui, bookingStorage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        assertEquals(arrExpectedOutput, arrActualOutput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        System.out.println(\"Test passed.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 37,
      "wjlingg": 2
    }
  },
  {
    "path": "src/test/java/duketest/inventorycommandstest/AddToInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.inventorycommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.AddToInventoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.DeleteFromInventoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathInventoryTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddToInventoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testAddToInventory() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventoryTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this ingredient to the inventory.\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       testingredient\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"Now you have 3 ingredient(s) in your inventory\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddToInventoryCommand addToInventoryCommand \u003d new AddToInventoryCommand(\"addtoinventory testingredient q/ 1 u/kg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(addToInventoryCommand.execute(inventoryList, ui, inventoryStorage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteFromInventoryCommand deleteFromInventoryCommand \u003d new DeleteFromInventoryCommand(\"deleterecipe testingredient\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteFromInventoryCommand.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 43
    }
  },
  {
    "path": "src/test/java/duketest/inventorycommandstest/ClearInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.inventorycommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.AddToInventoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.ClearInventoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathInventoryTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ClearInventoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testClearInventoryCommand() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventoryTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"All ingredients in the inventory has been cleared. The inventory list is now empty.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ClearInventoryCommand clearInventoryCommand \u003d new ClearInventoryCommand(\"clearinventory\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(clearInventoryCommand.execute(inventoryList, ui, inventoryStorage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddToInventoryCommand addInventoryCommand \u003d new AddToInventoryCommand(\"addtoinventory salt q/1 u/kg\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addInventoryCommand.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddToInventoryCommand addInventoryCommand1 \u003d new AddToInventoryCommand(\"addtoinventory sugar q/5 u/kg\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addInventoryCommand1.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 43
    }
  },
  {
    "path": "src/test/java/duketest/inventorycommandstest/DeleteFromInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.inventorycommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.AddToInventoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.DeleteFromInventoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathInventoryTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeleteFromInventoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testDeleteFromInventoryCommand() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventoryTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Noted. I\u0027ve removed this ingredient from the inventory:\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       testingredient\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"Now you have 2 ingredients(s) in the inventory.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddToInventoryCommand addInventoryCommand \u003d new AddToInventoryCommand(\"addtoinventory testingredient q/1 u/kg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addInventoryCommand.execute(inventoryList, ui, inventoryStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteFromInventoryCommand deleteFromInventoryCommand \u003d new DeleteFromInventoryCommand(\"deleteFromInventory testingredient\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(deleteFromInventoryCommand.execute(inventoryList, ui, inventoryStorage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 43
    }
  },
  {
    "path": "src/test/java/duketest/inventorycommandstest/ListInventoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.inventorycommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.ListInventoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.InventoryMessages.MESSAGE_HERE_ARE_THE_INGREDIENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathInventoryTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListInventoryCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testListInventoryCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventoryTest);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(MESSAGE_HERE_ARE_THE_INGREDIENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"     1. salt [1.0 | KG | No additional information.] \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"     2. sugar [5.0 | KG | No additional information.] \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ListInventoryCommand listInventoryCommand \u003d new ListInventoryCommand(\"listinventory\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(listInventoryCommand.execute(inventoryList, ui, inventoryStorage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 39
    }
  },
  {
    "path": "src/test/java/duketest/inventorycommandstest/UseRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.inventorycommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.inventorycommands.UseRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.inventorylist.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.InventoryStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class UseRecipeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testUserRecipe() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryStorage \u003d new InventoryStorage(filePathInventoryTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        inventoryList \u003d new InventoryList(inventoryStorage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathTempTest);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Your inventory list has been updated.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        UseRecipeCommand useRecipeCommand \u003d new UseRecipeCommand(\"userecipe cake\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(useRecipeCommand.execute(inventoryList, recipeList, inventoryStorage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 43
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/AddRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testAddRecipeCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this recipe:\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       testrecipe\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"Now you have 5 recipe(s) in the list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(addRecipeCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 43
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/DeleteRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testDeleteRecipeCommand() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Noted. I\u0027ve removed this recipe:\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       testrecipe\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"Now you have 4 recipe(s) in the list.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(deleteRecipeCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 44
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/EditFeedbackCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditFeedbackCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EditFeedbackCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditFeedbackCommand() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"The feedback of \u0027testrecipe\u0027 has been edited to: too salty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditFeedbackCommand editFeedbackCommand \u003d new EditFeedbackCommand(\"editfeedback testrecipe f/ too salty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editFeedbackCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 47
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/EditPrepStepCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditPrepStepCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EditPrepStepCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditPrepStepInsert() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this preparation step to the list of prep steps.\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       rinse\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepStepCommand editPrepStepCommand \u003d new EditPrepStepCommand(\"editprepstep testrecipe ins/ 1 step/ rinse\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editPrepStepCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditPrepStepDelete() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Noted. I\u0027ve removed this preparation step from the list of prep steps.\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       rinse\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepStepCommand editPrepStepinsert \u003d new EditPrepStepCommand(\"editprepstep testrecipe ins/ 1 step/ rinse\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        editPrepStepinsert.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepStepCommand editPrepStepCommand \u003d new EditPrepStepCommand(\"editprepstep testrecipe del/ 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editPrepStepCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditPrepStepAppend() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this preparation step to the list of prep steps.\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       rinse\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepStepCommand editPrepStepCommand \u003d new EditPrepStepCommand(\"editprepstep testrecipe app/step/ rinse\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editPrepStepCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditPrepStepClear() throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"The required prep step list for the recipe has been cleared.\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepStepCommand editPrepStepCommand \u003d new EditPrepStepCommand(\"editprepstep testrecipe clr/\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editPrepStepCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 113
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/EditPrepTimeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditFeedbackCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditPrepTimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EditPrepTimeCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditPrepTimeCommand() throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"The preparation time of \u0027testrecipe\u0027 has been edited to: 10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditPrepTimeCommand editPrepTimeCommand \u003d new EditPrepTimeCommand(\"editpreptime testrecipe t/ 10\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editPrepTimeCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 48
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/EditRatingCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditRatingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EditRatingCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRatingCommand() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"The rating of \u0027testrecipe\u0027 has been edited to: good\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRatingCommand editRatingCommand \u003d new EditRatingCommand(\"editrating testrecipe r/ good\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRatingCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 47
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/EditRequiredIngredientCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.AddRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.EditRequiredIngredientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EditRequiredIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientFullInsert() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this ingredient to the list of required ingredients.\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       dumplings\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe ins/ 1 n/ dumplings q/ 10 u/g\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientPartialInsert() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this ingredient to the list of required ingredients.\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       dumplings\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientinsert \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe ins/ 1 n/ dumplings q/ 10 u/g a/ fried\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        editRequiredIngredientinsert.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe ins/ 1 n/ dumplings q/ 5 u/a/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientDelete() throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Noted. I\u0027ve removed this ingredient from the list of required ingredients.\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       dumplings\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientinsert \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe ins/ 1 n/ dumplings q/ 10 u/g a/ fried\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        editRequiredIngredientinsert.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe del/ 1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientFullAppend() throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this ingredient to the list of required ingredients.\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       dumplings\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe app/n/ dumplings q/ 10 u/g a/ fried\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientPartialAppend() throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this ingredient to the list of required ingredients.\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"       dumplings\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientinsert \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe app/n/ dumplings q/ 10 u/g a/ fried\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        editRequiredIngredientinsert.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe app/n/ dumplings q/ 30 u/\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testEditRequiredIngredientClear() throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"The required ingredient list for the recipe has been cleared.\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(\"addrecipe testrecipe\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        addRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        EditRequiredIngredientCommand editRequiredIngredientCommand \u003d new EditRequiredIngredientCommand(\"editreqingredient testrecipe clr/\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(editRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(\"deleterecipe testrecipe\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deleteRecipeCommand.execute(recipeList, ui, recipeStorage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 164
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/ListAllRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ListAllRecipeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_HERE_ARE_THE_RECIPES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListAllRecipeCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        private RecipeList recipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        public void testListAllRecipeCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(MESSAGE_HERE_ARE_THE_RECIPES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    1. chicken rice\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    2. duck rice\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    3. rice\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    4. sphagetti\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ListAllRecipeCommand listAllRecipeCommand \u003d new ListAllRecipeCommand(\"listallrecipes\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(listAllRecipeCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 44
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/ViewRecipeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ViewRecipeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_RECIPE_TO_BE_VIEWED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ViewRecipeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testViewRecipe() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected \u003d \"    Title: chicken rice\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Preparation Time: 10\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Rating: Good\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Preparation Steps: \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    No preparation steps provided yet.\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Required Ingredients: \\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    1.  rice [1.0 | G | 50% brown rice] \\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    2.  brown rice [1.0 | G | No additional information.] \\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    3.  jasmine rice [11.0 | G | fried with garlic] \\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Feedback: \\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    the soya sauce was delicious\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(MESSAGE_RECIPE_TO_BE_VIEWED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ViewRecipeCommand viewRecipeCommand \u003d new ViewRecipeCommand(\"viewrecipe chicken rice\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(viewRecipeCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 55
    }
  },
  {
    "path": "src/test/java/duketest/recipecommandstest/ViewRequiredIngredientCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duketest.recipecommandstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.logic.command.recipecommands.ViewRequiredIngredientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.model.list.recipelist.RecipeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_RECIPE_TO_BE_VIEWED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePathRecipeTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//@@author wjlingg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ViewRequiredIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeStorage recipeStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void testViewRequiredIngredient() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeStorage \u003d new RecipeStorage(filePathRecipeTest);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeList \u003d new RecipeList(recipeStorage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected1 \u003d \"    Recipe Title: chicken rice\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Required Ingredients: \\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    1.  rice [1.0 | G | 50% brown rice] \\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    2.  brown rice [1.0 | G | No additional information.] \\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    3.  jasmine rice [11.0 | G | fried with garlic] \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String expected2 \u003d \"    Recipe Title: duck rice\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Required Ingredients: \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    1.  jasmine rice [10.0 | G | No additional information.] \\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    2.  brown rice [1.0 | G | No additional information.] \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(MESSAGE_RECIPE_TO_BE_VIEWED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(expected2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"    Combined list of ingredient with the respective amount: \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    1. jasmine rice | 21.0\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    2. rice | 1.0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayListExpectedOutput.add(\"    3. brown rice | 2.0\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ViewRequiredIngredientCommand viewRequiredIngredientCommand \u003d new ViewRequiredIngredientCommand(\"viewreqingredient chicken rice, duck rice\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayListActualOutput \u003d new ArrayList\u003c\u003e(viewRequiredIngredientCommand.execute(recipeList, ui, recipeStorage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(arrayListExpectedOutput, arrayListActualOutput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 56
    }
  }
]
