[
  {
    "path": "src/main/java/duke/command/ConfirmScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRMSCHEDULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_TENTATIVE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_CONFIRM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ConfirmScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ConfirmScheduleCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cInteger\u003e integerArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_CONFIRMSCHEDULE)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (task.getTaskType() \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    scheduleTasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    integerArrayList.add(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_TENTATIVE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Task task : scheduleTasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"      \" + integerArrayList.get(j++) + \". \" + task.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_FOLLOWUP_CONFIRM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().equals(COMMAND_CONFIRM)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(7) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                Task.TaskType currTaskType \u003d taskList.getTask(index - 1).getTaskType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (currTaskType \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.scheduledTask(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(MESSAGE_FOLLOWUP_CONFIRM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 85
    }
  },
  {
    "path": "src/main/java/duke/command/DetectAnomaliesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DetectAnomaliesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DetectAnomaliesCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DurationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DURATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DurationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class DurationCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DurationCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_DURATION)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.trim().charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (description.contains(\"/need\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/need\", 2)[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String need \u003d description.split(\"/need\", 2)[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || need.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.addDurationTask(details, need);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "LJX0006": 1,
      "wjlingg": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/duke/command/PeriodCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_PERIOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_PERIOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_PERIOD2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PeriodCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class PeriodCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PeriodCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Processes the period command to add period task to task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // Can refactor deep if-else nesting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_PERIOD)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.contains(\"/between\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String details \u003d description.split(\"/between\", 2)[0].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                String period \u003d description.split(\"/between\", 2)[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!period.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (period.contains(\"/and\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        String startDate \u003d period.trim().split(\"/and\", 2)[0].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        String endDate \u003d period.trim().split(\"/and\", 2)[1].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (startDate.isEmpty() || endDate.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_PERIOD2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            taskList.addPeriodTask(details, startDate, endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_PERIOD2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details.isEmpty() || period.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_PERIOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_PERIOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "jiawei": 8
    }
  },
  {
    "path": "src/main/java/duke/command/RecurringCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_RECURRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RECURRING_DETAILS_NULL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RECURRING_FREQUENCY_NULL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": " * Handles task that recur over time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String details \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String dayOrDate \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String frequency \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Constructor for class RecurringCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public RecurringCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Processes the recurring command to add recurring tasks to task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @throws ParseException if there is any error in parsing the day or date input by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_RECURRING)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(9) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            if (description.contains(\"/daily\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                this.frequency \u003d \"daily\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                this.details \u003d description.split(\"/daily\", 2)[0].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                if (details.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    taskList.addRecurringTask(details, frequency, dayOrDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (description.contains(\"/weekly\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                this.frequency \u003d \"weekly\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                this.details \u003d description.split(\"/weekly\", 2)[0].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                this.dayOrDate \u003d description.split(\"/weekly\", 2)[1].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                checkFullInfoProvided(taskList, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (description.contains(\"/monthly\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                frequency \u003d \"monthly\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                details \u003d description.split(\"/monthly\", 2)[0].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                dayOrDate \u003d description.split(\"/monthly\", 2)[1].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                checkFullInfoProvided(taskList, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RECURRING_FREQUENCY_NULL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Checks if both the details and the day or date of the recurring tasks have been input by the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * If either of the information is missing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @throws DukeException if either the details of the day/date is not input by the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @throws ParseException if there is any error in parsing the day or date input by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private void checkFullInfoProvided(TaskList taskList, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (details.isEmpty() || dayOrDate.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RECURRING_DETAILS_NULL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            taskList.addRecurringTask(details, frequency, dayOrDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 11,
      "jiawei": 86
    }
  },
  {
    "path": "src/main/java/duke/command/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_SNOOZE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DEADLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class SnoozeCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public SnoozeCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validate that user inputs an integer value for the index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the delete command to delete task in the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_SNOOZE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInputCommand.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + taskList.getSize() + \".\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    taskList.snoozeTask(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (description.contains(\" /by \")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String details \u003d taskList.getTask(index - 1).getDescription();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String date \u003d description.trim().split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        if (details \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            if (isParseDate(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                taskList.addDeadlineTask(details, date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                storage.saveFile(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                throw new DukeException(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else if (description.contains(\" /at \")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String details \u003d description.trim().split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String date \u003d description.trim().split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        if (details \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            taskList.addEventTask(details, date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        description \u003d userInputCommand.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        taskList.addTodoTask(description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        storage.saveFile(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validate the format of the input date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param dateStr String containing user input date and time"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if user input the correct format for the date and time and false otherwise"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static boolean isParseDate(String dateStr) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            simpleDateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 114,
      "wjlingg": 13
    }
  },
  {
    "path": "src/main/java/duke/command/TentativeScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_TENTATIVESCHEDULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_TENTATIVESCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the tentativeschedule command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TentativeScheduleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class TentativeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TentativeScheduleCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the tentativeschedule command to add tasks in multiple slots in the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an wrong format for the description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_TENTATIVESCHEDULE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(17) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.contains(\"/on\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String details \u003d description.split(\"/on\", 2)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String on \u003d description.split(\"/on\", 2)[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || on.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.addTentativeSchedulingTask(details, on);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 62
    }
  },
  {
    "path": "src/main/java/duke/command/ViewScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_VIEWSCHEDULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_VIEWSCHEDULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_VIEWSCHEDULE)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + ERROR_MESSAGE_VIEWSCHEDULE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputDate \u003d userInputCommand.substring(13).trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(inputDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.setTime(task.getDateTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    scheduleList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String outputDate \u003d new SimpleDateFormat(\"dd MMMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"      No tasks on \" + outputDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"      Here are your tasks for \" + outputDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"      \" + (i + 1) + \". \" + scheduleList.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 10,
      "-": 56
    }
  },
  {
    "path": "src/main/java/duke/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to store all the initialisation of the static error messages to String value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePath \u003d \"C:\\\\Users\\\\Wen Jian\\\\Desktop\\\\main\\\\src\\\\main\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"     Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"     Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"     Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_EMPTY_INDEX \u003d \"       Kindly enter the command again with an index.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_NUll \u003d \"       Kindly enter the command again with a description.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_CONFIRM \u003d \"      \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Kindly enter command with the index of the tasks. Eg: confirm 2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS1 \u003d \"     Now you have \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MARKED \u003d \"     Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_SCHEDULED \u003d \"     Nice! This task has been scheduled:\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TASKED \u003d \"     Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String MESSAGE_SNOOZE \u003d \"     Noted. I\u0027ve rescheduled this task:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REMIND \u003d \"     Here are your upcoming deadlines:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_TENTATIVE \u003d \"     Here are your tentative scheduled tasks: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DEADLINE \u003d \"       \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the deadline in this format: \\n       \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"deadline [event description] /by [day/month/year time]\\n         \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Eg: 28/8/2019 2359 (For date and time format)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_INDEX \u003d \"       OOPS!!! The index cannot be empty.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_LIST \u003d \"       OOPS!!! The list is empty.\\n     Kindly add a task.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_EVENT \u003d \"       \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the event details in this format: \\n       \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"event [event description] /at [event time or venue]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DO_AFTER \u003d \"       \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the todo details in this format: \\n       \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"todo [do after description] /after [specific time or task]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_GENERAL \u003d \"     OOPS!!! The description cannot be empty.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_DATE \u003d \"       \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the date and time in this format: \\n       \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[day/month/year time] Eg: 28/8/2019 2359\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_INDEX \u003d \"     Invalid index entered.\\n     \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter command with index not more than \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_UNKNOWN_INDEX \u003d \"     Unknown index entered.\\n     \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter an integer for the index.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_LOADING \u003d \"     OOPS!!! Error loading file: \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_NOTFOUND \u003d \"     \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! I\u0027m sorry, but there is no matching tasks in your list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_RANDOM \u003d \"     OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DURATION \u003d \"       \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"☹ OOPS!!! Please specify the fix duration task details in this format: \\n         \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"fixed [task description] /need [task duration]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_PERIOD \u003d \"     Please include the time period for this task.\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Tasks to be completed within a time period should be entered in this format:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     period [task description] /between [start date] /and [end date]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_PERIOD2 \u003d \"     Please provide both the start and end date for the task.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_VIEWSCHEDULE \u003d \"     Please specify date [day/month/year] in this format.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_TENTATIVESCHEDULE \u003d \"       \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"OOPS!!! Please specify tentative scheduling in this format: \\n       \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"tentativeschedule [task description] /on [day/month/year time], [day/month/year time], ......\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECURRING_FREQUENCY_NULL \u003d \"     \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please include the frequency of the recurrent task.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            + \"     Duke supports recurring tasks in this format:\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            + \"     1. recurring [task description] /daily\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"     2. recurring [task description] /weekly [day of week] Eg: thurs\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"     3. recurring [task description] /monthly [day of month \u0027dd\u0027] Eg: 01\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECURRING_DETAILS_NULL \u003d \"     \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please provide the task description and day or date of recurrence.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DURATION \u003d \"fixed\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_SNOOZE \u003d \"snooze\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_PERIOD \u003d \"period\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_REMIND \u003d \"reminders\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_VIEWSCHEDULE \u003d \"viewschedule\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_TENTATIVESCHEDULE \u003d \"tentativeschedule\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_CONFIRMSCHEDULE \u003d \"confirmschedule\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_CONFIRM \u003d \"confirm\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public static final String COMMAND_RECURRING \u003d \"recurring\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DETECTCLASHES \u003d \"detectclashes\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DIVIDER \u003d \"   ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 18,
      "LJX0006": 3,
      "-": 67,
      "jiawei": 3
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.TentativeScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.ConfirmScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.DurationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.PeriodCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ViewScheduleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.command.RecurringCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.DetectAnomaliesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_BYE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DEADLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DELETE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DONE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_EVENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_FIND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_LIST;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_TODO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_TENTATIVESCHEDULE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRMSCHEDULE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_VIEWSCHEDULE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_PERIOD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_REMIND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_DURATION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import static duke.common.Messages.COMMAND_RECURRING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.COMMAND_SNOOZE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_DETECTCLASHES;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Making sense of the user input command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the different user input command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the different command object corresponding to the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognise the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String userInputCommand) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand(userInputCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.trim().equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoneCommand(userInputCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 8).equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeadlineCommand(userInputCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 6).equals(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(userInputCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 5).equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EventCommand(userInputCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 4).equals(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                return new TodoCommand(userInputCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 4).equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommand(userInputCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DURATION)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 5).equals(COMMAND_DURATION)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DurationCommand(userInputCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_SNOOZE)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (userInputCommand.trim().substring(0, 6).equals(COMMAND_SNOOZE)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                return new SnoozeCommand(userInputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_PERIOD)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 6).equals(COMMAND_PERIOD)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                return new PeriodCommand(userInputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_REMIND)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 9).equals(COMMAND_REMIND)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                return new RemindCommand(userInputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_VIEWSCHEDULE)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userInputCommand.trim().substring(0, 12).equals(COMMAND_VIEWSCHEDULE)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewScheduleCommand(userInputCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_TENTATIVESCHEDULE)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 17).equals(COMMAND_TENTATIVESCHEDULE)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new TentativeScheduleCommand(userInputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_CONFIRMSCHEDULE)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 15).equals(COMMAND_CONFIRMSCHEDULE)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new ConfirmScheduleCommand(userInputCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_CONFIRM)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 7).equals(COMMAND_CONFIRM)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new ConfirmScheduleCommand(userInputCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_RECURRING)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            if (userInputCommand.trim().substring(0, 9).equals(COMMAND_RECURRING)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                return new RecurringCommand(userInputCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DETECTCLASHES)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 11).equals(COMMAND_DETECTCLASHES)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new DetectAnomaliesCommand(userInputCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 37,
      "LJX0006": 8,
      "-": 103,
      "jiawei": 8
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.TentativeScheduling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.task.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.task.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ArrayList\u003cTask\u003e arrTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFile(TaskList taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                bufferedWriter.write(task.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                if (content.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (content.charAt(1) \u003d\u003d \u0027S\u0027) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        String[] split \u003d content.substring(9).split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new TentativeScheduling(split[0], split[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(5) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        String details \u003d content.substring(8);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new Todo(details);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    //need to escape character in string for \"|\" by adding \"\\\\\" in front of \"|\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    //if not the split will be on the wrong place"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    String[] split \u003d content.substring(8).split(\" \\\\| \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (content.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Deadline(split[0], split[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Event(split[0], split[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027F\u0027) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Duration(split[0], split[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        if (split.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            Task task \u003d new Period(split[0], split[1], split[2]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027R\u0027) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        if (split.length \u003d\u003d 2) { // daily"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            Task task \u003d new Recurring(split[0], split[1], \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        } else if (split.length \u003d\u003d 3) { // weekly, monthly, yearly"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            Task task \u003d new Recurring(split[0], split[1], split[2]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException | ParseException ex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrTaskList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static void assignTaskMarker(String content, Task task) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        arrTaskList.add(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 19,
      "LJX0006": 1,
      "-": 89,
      "jiawei": 21
    }
  },
  {
    "path": "src/main/java/duke/task/Period.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Period extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String startDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String endDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class Period."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate String containing the initial date that a task should be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate String containing the last date that a task should be done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Period(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);//super class constructor call to the Task(description) constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \"P\" + super.toSaveString() + \" | \" + startDate + \" | \" + endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[P]\" + super.toString() + \" (between: \" + startDate + \" and \" + endDate + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "jiawei": 1
    }
  },
  {
    "path": "src/main/java/duke/task/Recurring.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String frequency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected SimpleDateFormat dateFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String formattedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Constructor for class Period."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param frequency String containing the frequency at which the task is recurring at."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     *                  Duke supports daily, weekly and monthly recurring tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param dayOrDate String containing the day or date that a task should be done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Recurring(String description, String frequency, String dayOrDate) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super(description); //super class constructor call to the Task(description) constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        // refactor with parseAndFormat() method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (frequency.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            date \u003d new SimpleDateFormat(\"EEEE\").parse(dayOrDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            dateFormatter \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            formattedDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else if (frequency.equals(\"monthly\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            date \u003d new SimpleDateFormat(\"dd\").parse(dayOrDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            dateFormatter \u003d new SimpleDateFormat(\"MMM\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            formattedDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        // include support for yearly recurring tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        else if (frequency.equals(\"yearly\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            date \u003d new SimpleDateFormat(\"dd/MM\").parse(dayOrDate); // ParseException here."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            System.out.println(\"parse year error\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            dateFormatter \u003d new SimpleDateFormat(\"dd MM\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            formattedDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (frequency.equals(\"daily\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"R\" + super.toSaveString() + \" | \" + frequency;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"R\" + super.toSaveString() + \" | \" + frequency + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (frequency.equals(\"daily\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"[R]\" + super.toString() + \" (\" + frequency + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"[R]\" + super.toString() + \" (\" + frequency + \": \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiawei": 73
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class to represent task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description; //User input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone; //To check if the task is completed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DEADLINE, TENTATIVESCHEDULING, EVENT, TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description; //user input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false; //initially marked as not completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the description of the different tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the description of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the task as done after completion."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    } //marked as completed when done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the current status of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing plus symbol if completed and minus symbol otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return plus or minus symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \" | \" + getStatusIcon() + \" | \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the type of Task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Enumerated type of task which is declared"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Date getDateTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/duke/task/TentativeScheduling.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TentativeScheduling extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String on;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected SimpleDateFormat dateFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class TentativeScheduling."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param on String containing multiple dates and time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TentativeScheduling(String description, String on) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskType \u003d TaskType.TENTATIVESCHEDULING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        date \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(on);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dateFormatter \u003d new SimpleDateFormat(\"d MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"TS\" + super.toSaveString() + \" | \" + on;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[TS]\" + super.toString() + \" (on: \" + dateFormatter.format(date) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 38
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.TentativeScheduling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import duke.task.Recurring;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.concurrent.CopyOnWriteArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_ADDED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_DELETE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_ITEMS1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_MARKED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_NOTFOUND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_TENTATIVE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_SCHEDULED;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_SNOOZE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles all the operations for the task in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the class TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to initialize taskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList loaded tasklist from file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Search for matching tasks in taskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the targeted search"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of matching tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if not able to find any matching task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e findTask(String description) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskList.get(i).getDescription().contains(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                arrFind.add(taskList.get(i).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_NOTFOUND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return arrFind;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get all the tasks in the current taskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of tasks in the taskList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e listTask() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            arrList.add(\"     \" + displayIndex + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for deadline type task in taskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of deadlines"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e remindDeadlineTask() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrRemind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskList.get(i).getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                arrRemind.add(taskList.get(i).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrRemind;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get number of tasks in taskList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Integer corresponding to the number of tasks in taskList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds deadline task to taskList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by String containing the date and time of the deadline for the task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDeadlineTask(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds event task to taskList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at String containing the venue of the event"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEventTask(String description, String at) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Event(description, at));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds todo task to taskList."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTodoTask(String description) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Todo(description));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds fixed duration task to taskList."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param need String containing time needed for the task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDurationTask(String description, String need) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Duration(description, need));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Adds task that has to be done within a certain period of time."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate String containing the start date of the period to complete the task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate String containing the end date of the period to complete the task."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPeriodTask(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Period(description, startDate, endDate));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * Adds tasks that will recur daily, weekly, monthly or yearly."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param frequency String containing the frequency of recurrence of the task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     * @param dayOrDate String containing either the day of the date of the recurring task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiawei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public void addRecurringTask(String description, String frequency, String dayOrDate) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        taskList.add(new Recurring(description, frequency, dayOrDate));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds todo task need to be done after a specific time or task."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param after String containing the specific time or task"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDoAfterTask(String description, String after) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new DoAfter(description, after));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Adds tentative schedule task to taskList."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param on String containing the multiple dates and time"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addTentativeSchedulingTask(String description, String on) throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String[] items \u003d on.split(\",\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cTask\u003e tentativeTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c items.length; i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            tentativeTasks.add(new TentativeScheduling(description, items[i].trim()));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            taskList.add(new TentativeScheduling(description, items[i].trim()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_TENTATIVE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Task task : tentativeTasks) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"      \" + i++ + \". \" + task.toString());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(\"      Pls confirm the scheduling anytime with the command: confirmschedule\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneTask(int i) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.get(i).markAsDone();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_MARKED + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Schedules task in one of the slots."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void scheduledTask(int i) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String description \u003d taskList.get(i).getDescription();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // to avoid concurrent modification exception."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        List\u003cTask\u003e myList \u003d new CopyOnWriteArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        myList.addAll(taskList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        myList.get(i).markAsDone();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Task task : myList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (task.getStatusIcon().equals(\"-\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        myList.remove(task);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_SCHEDULED + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addAll(myList);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete task in taskList."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(int i) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + taskList.get(i)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (taskList.size() - 1) + msg);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.remove(taskList.get(i));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void snoozeTask(int i) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_SNOOZE + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        taskList.remove(taskList.get(i));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the current taskList in file."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList containing tasks"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 54,
      "LJX0006": 9,
      "-": 223,
      "jiawei": 19
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineToSaveString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"D | - | return book | 2/12/2019 1800\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toSaveString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][-] return book (by: 2/12/2019 1800)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineDateConversion() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String date \u003d new Deadline(\"return book\", \"2/12/2019 1800\").convertDate(\"2/12/2019 1800\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"2nd of December 2019, 6.00pm\", date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineGetStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Task deadline \u003d new Deadline(\"borrow book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"+\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "-": 38
    }
  }
]
