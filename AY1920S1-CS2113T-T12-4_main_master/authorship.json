[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"mid-v1.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    // https://mvnrepository.com/artifact/org.javatuples/javatuples"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    compile group: \u0027org.javatuples\u0027, name: \u0027javatuples\u0027, version: \u00271.2\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.src.main.java.duke.Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 6,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandIngredients;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeIngredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeTitle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeTitleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeIngredientStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeTitleStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "//import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.Feedback;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeIngredient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.IngredientMessages.COMMAND_ADD_INGREDIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.*;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Duke processes different commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private IngredientStorage ingredientStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeIngredientStorage recipeIngredientStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingStorage bookingStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeTitleStorage recipeTitleStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private IngredientList ingredientList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeIngredientList recipeIngredientList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private BookingList bookingList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeTitleList recipeTitleList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private RecipeIngredient recipeIngredient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Feedback feedback;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * Constructor for Duke class to instantiation Ui, Storage, TaskList classes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ingredientStorage \u003d new IngredientStorage(filePathIngredients);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeIngredientStorage \u003d new RecipeIngredientStorage(filePathRecipeIngredients);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeTitleStorage \u003d new RecipeTitleStorage(filePathRecipeTitle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingStorage \u003d new BookingStorage(filePathBookings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ingredientList \u003d new IngredientList(ingredientStorage.load());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeIngredientList \u003d new RecipeIngredientList(recipeIngredientStorage.load());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeTitleList \u003d new RecipeTitleList(recipeTitleStorage.load());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            bookingList \u003d new BookingList(bookingStorage.load());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            ui.showIngredientLoadingError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e runProgram(String userInput) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(\"stuck here4\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.contains(COMMAND_ADD_RECIPE_TITLE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_ADD_RECIPE_TITLE)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandRecipeTitle command \u003d Parser.parseRecipeTitle(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeTitleList, ui, recipeTitleStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"stuck here5\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandRecipeTitle command \u003d Parser.parseRecipeTitle(userInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeTitleList, ui, recipeTitleStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_LIST_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 14).equals(COMMAND_LIST_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandRecipeIngredient command \u003d Parser.parseRecipeIngredient(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeIngredientList, ui, recipeIngredientStorage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"stuck here11\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_ADD_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 19).equals(COMMAND_ADD_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandRecipeIngredient command \u003d Parser.parseRecipeIngredient(userInput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeIngredientList, ui, recipeIngredientStorage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"stuck here10\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_DELETE_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 3).equals(COMMAND_DELETE_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandRecipeIngredient command \u003d Parser.parseRecipeIngredient(userInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(recipeIngredientList, ui, recipeIngredientStorage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"stuck here10\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.contains(COMMAND_ADD_INGREDIENT)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInput.trim().substring(0, 13).equals(COMMAND_ADD_INGREDIENT)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                CommandIngredients command \u003d Parser.parseIngredient(userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return command.execute(ingredientList, ui, ingredientStorage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return arrayList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInput.contains(\"booking\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            CommandBooking command \u003d Parser.parseBooking(userInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return command.execute(bookingList, ui, bookingStorage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"stuck here3\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return arrayList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 13,
      "wjlingg": 98,
      "jiaweijwjw": 6,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    static Boolean isScreenLoaded \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private Ui ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private Duke duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"ChefDuke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        Parent root \u003d FXMLLoader.load(getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        Scene scene \u003d new Scene(root);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        stage.setScene(scene);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        stage.setTitle(\"ChefDuke\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 37
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.animation.FadeTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPES;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPE_INGREDIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private AnchorPane root;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ListView\u003cString\u003e listView, listViewResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void initialize() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (!Main.isScreenLoaded) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            loadStartingScreen();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Ui ui \u003d new Ui(this);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                DialogBox.getWelcome(duke.showWelcome())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        duke \u003d d;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleUserInput() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            showMessage(\"Pls input a command to proceed\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            resultDisplay.setText(\"Pls input a command to proceed\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            resultDisplay.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            listViewResult.getItems().clear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    DialogBox.getUserDialog(input)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (input.trim().equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (input.trim().equals(COMMAND_HELP)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //will need to copy the arraylist if not duke.runProgram will be ran twice"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //causing items to be added twice"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e(duke.runProgram(input));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                showMessage(arrayList.get(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                showMessage(duke.runProgram(input).get(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                resultDisplay.setText(duke.runProgram(input).get(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (input.trim().contains(COMMAND_LIST_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    for (int i \u003d 1; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        listViewResult.getItems().add(arrayList.get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    listView.getItems().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    for (int i \u003d 1; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        listView.getItems().add(arrayList.get(i));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        resultDisplay.setText(message);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return userInput.getText();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void handleLoadingError() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        resultDisplay.setText(ERROR_MESSAGE_LOADING);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleAddRecipe(String input) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        RecipeWindow recipeWindow \u003d new RecipeWindow();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(new Scene(recipeWindow));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setWidth(600);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setHeight(400);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ExitWindow exitWindow \u003d new ExitWindow();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(new Scene(exitWindow));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"Help\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setWidth(480);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setHeight(100);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setScene(new Scene(helpWindow));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setTitle(\"Help\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setWidth(680);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.setHeight(100);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void loadStartingScreen() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            Main.isScreenLoaded \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            StackPane pane \u003d FXMLLoader.load(getClass().getResource((\"/view/WelcomeScreen.fxml\")));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            root.getChildren().setAll(pane);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FadeTransition fadeIn \u003d new FadeTransition(Duration.seconds(1), pane);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeIn.setFromValue(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeIn.setToValue(1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeIn.setCycleCount(1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FadeTransition fadeOut \u003d new FadeTransition(Duration.seconds(1), pane);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeOut.setFromValue(1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeOut.setToValue(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeOut.setCycleCount(1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeIn.play();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeIn.setOnFinished((e) -\u003e {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                fadeOut.play();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            });"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fadeOut.setOnFinished((e) -\u003e {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                Main.isScreenLoaded \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    root.getChildren().setAll(ap);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                    fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } catch (IOException ex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            });"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 4,
      "wjlingg": 200
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class to represent command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public CommandType commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public abstract TaskList exe(Ui ui, Storage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        BOOKING, RECIPE, INGREDIENT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public abstract void execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 4,
      "jiaweijwjw": 7,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/command/CommandBooking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Abstract class to represent command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public abstract class CommandBooking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInputCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected CommandIngredients.CommandType commandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        BOOKING, RECIPE, INGREDIENT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 14,
      "wjlingg": 13
    }
  },
  {
    "path": "src/main/java/duke/command/CommandFeedback.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.FeedbackList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.FeedbackStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public abstract class CommandFeedback {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(FeedbackList feedbackList, Ui ui, FeedbackStorage feedbackStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandIngredients.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class CommandIngredients {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected CommandType commandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        BOOKING, RECIPE, INGREDIENT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 22
    }
  },
  {
    "path": "src/main/java/duke/command/CommandPrepStep.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.PrepStepList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.PrepStepStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public abstract class CommandPrepStep {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(PrepStepList prepStepList, Ui ui, PrepStepStorage ratingStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandRating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.RatingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.RatingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public abstract class CommandRating {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(RatingList ratingList, Ui ui, RatingStorage ratingStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandRecipeIngredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeIngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class CommandRecipeIngredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(RecipeIngredientList recipeIngredientList, Ui ui, RecipeIngredientStorage recipeIngredientStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CommandRecipeTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeTitleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeTitleStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.Feedback;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.Rating;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeIngredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class CommandRecipeTitle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(RecipeTitleList recipeTitleList, Ui ui, RecipeTitleStorage recipeTitleStorage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 20
    }
  },
  {
    "path": "src/main/java/duke/command/CommandTest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public CommandType commandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        BOOKING, RECIPE, INGREDIENT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 22
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_FIND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the find command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class FindCommand extends CommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * Processes the find command to search for tasks in task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param taskList contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @throws DukeException if Duke cannot recognize the user input or there is no matching task found in tbe list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (userInput.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            System.out.println(MESSAGE_FIND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.addAll(taskList.findTask(description));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(MESSAGE_FIND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            return taskList.findTask(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void exec(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (userInput.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(MESSAGE_FIND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            return taskList.findTask(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 63,
      "-": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_TASKED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListCommand extends CommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayList.add(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayList.addAll(taskList.listTask());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        System.out.println(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        for (int i \u003d 0; i \u003c taskList.listTask().size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            System.out.println(taskList.listTask().get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 19,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/command/bookingcommands/AddBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AddBookingCommand extends CommandBooking {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public AddBookingCommand(String userInputCommand){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isDateParsable(String bookingDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String[] temp \u003d userInputCommand.split(\"\\\\s\", 6);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"addbooking\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Booking details cannot be empty!\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       addbooking \u003ccustomer_name\u003e \u003ccustomer_contact\u003e \u003cnumber_of_pax\u003e \u003cbooking_date_dd/MM/yyyy\u003e \u003corder_name\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.trim().charAt(10) \u003d\u003d \u0027 \u0027 \u0026\u0026 temp.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String customerName \u003d temp[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String customerContact \u003d temp[2].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String numberOfPax \u003d temp[3].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String bookingDate \u003d temp[4].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String orderName \u003d temp[5].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if(isDateParsable(bookingDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                bookingList.addBooking(customerName, customerContact, numberOfPax, bookingDate, orderName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                bookingStorage.saveFile(bookingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int size \u003d bookingList.getSize();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    msg \u003d \" booking in the list.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    msg \u003d \" bookings in the list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(\"New booking added:\\n\" + \"       \" + bookingList.getBookingList().get(size - 1) + \"\\n\" + \"Now you have \" + size + msg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(\"Invalid booking date entered.\\n Please enter again in the format: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Incorrect Booking details.\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       addbooking \u003ccustomer_name\u003e \u003ccustomer_contact\u003e \u003cnumber_of_pax\u003e \u003cbooking_date_dd/MM/yyyy\u003e \u003corder_name\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 73
    }
  },
  {
    "path": "src/main/java/duke/command/bookingcommands/AllBookingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class AllBookingsCommand extends CommandBooking {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList contains the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrayList.add(\"     Here are all the current bookings in your list:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        arrayList.addAll(bookingList.listAllBooking());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 16,
      "wjlingg": 20
    }
  },
  {
    "path": "src/main/java/duke/command/bookingcommands/DeleteBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class DeleteBookingCommand extends CommandBooking {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public DeleteBookingCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the delete command to delete booking in the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList contains the booking list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"deletebooking\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Booking index cannot be empty!\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       deletebooking \u003cbooking_index\u003e\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.trim().charAt(13) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String input \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (isParsable(input)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (index \u003e bookingList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (bookingList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(\"Booking list is empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_INDEX + bookingList.getSize() + \".\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (bookingList.getSize() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" booking in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        msg \u003d \" bookings in the list.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(\"     Noted. I\u0027ve removed this booking:\\n\" + \"       \" + bookingList.getBookingList().get(index - 1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                            + \"\\n\" + \"Now you have \" + (bookingList.getSize() - 1) + msg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingList.deleteBooking(index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingStorage.saveFile(bookingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Incorrect delete booking command.\\n \" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       deletebooking \u003cbooking_index\u003e\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 44,
      "wjlingg": 52
    }
  },
  {
    "path": "src/main/java/duke/command/bookingcommands/FindBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class FindBookingCommand extends CommandBooking {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public FindBookingCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"findbooking\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Customer name cannot be empty!\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       findbooking \u003ccustomer_name\u003e\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.trim().charAt(11) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String customerName \u003d userInputCommand.split(\"\\\\s\", 2)[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"     Here are the matching bookings in your list:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.addAll(bookingList.findBooking(customerName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Incorrect find booking command.\\n \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       findbooking \u003ccustomer_name\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 40
    }
  },
  {
    "path": "src/main/java/duke/command/bookingcommands/ViewBookingScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewBookingScheduleCommand extends CommandBooking {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ViewBookingScheduleCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static boolean isDateParsable(String bookingDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"viewbookingschedule\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Booking date cannot be empty!\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       viewbookingschedule \u003cdate: dd/MM/yyyy\u003e\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.trim().charAt(19) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String inputDate \u003d userInputCommand.substring(20).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (isDateParsable(inputDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Date currDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(inputDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                calendar.setTime(currDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                ArrayList\u003cBooking\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    calendar.setTime(booking.getDateTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        scheduleList.add(booking);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String outputDate \u003d new SimpleDateFormat(\"dd MMMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(\"      No booking on \" + outputDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrayList.add(\"      Here are your bookings for \" + outputDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    for (int i \u003d 0; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        arrayList.add(\"      \" + (i + 1) + \". \" + scheduleList.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrayList.add(\"Invalid booking date entered.\\n Please enter again in the format: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrayList.add(\"Incorrect view booking schedule command.\\n \" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       Please enter in the following format:\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    \"       viewbookingschedule \u003cdate: dd/MM/yyyy\u003e\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 83,
      "wjlingg": 4
    }
  },
  {
    "path": "src/main/java/duke/command/inventorycommands/AddIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandIngredients;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.IngredientMessages.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddIngredientCommand extends CommandIngredients {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public AddIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.commandType \u003d CommandType.INGREDIENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_INGREDIENT)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"stuck here1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(13) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (description.contains(\"q/\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String ingredientName \u003d description.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String quantity \u003d description.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (ingredientName.isEmpty() || quantity.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    System.out.println(\"stuck here\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INCOMPLETE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (isParsable(quantity)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        ingredientList.addIngredient(ingredientName, Integer.parseInt(quantity));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        ingredientStorage.saveFile(ingredientList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        int index \u003d ingredientList.getSize();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        System.out.println(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(MESSAGE_ADDED + \"       \" + ingredientList.listIngredients().get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + \" tasks in the list\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (userInput.trim().equals(COMMAND_ADD_INGREDIENT)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else if (userInput.trim().charAt(13) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            if (description.contains(\"q/\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                String ingredientName \u003d description.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                String quantity \u003d description.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                if (ingredientName.isEmpty() || quantity.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                    throw new DukeException(ERROR_MESSAGE_INCOMPLETE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                } else if (isParsable(quantity)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                    ingredientList.addIngredient(ingredientName, Integer.parseInt(quantity));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                    ingredientStorage.saveFile(ingredientList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 44,
      "jiaweijwjw": 45
    }
  },
  {
    "path": "src/main/java/duke/command/inventorycommands/DeleteIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.IngredientMessages.COMMAND_DELETE_INGREDIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DeleteIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the delete command to delete task in the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ingredientList contains the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ingredientStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_INGREDIENT)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (index \u003e ingredientList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    if (ingredientList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + ingredientList.getSize() + \".\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ingredientList.deleteIngredient(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ingredientStorage.saveFile(ingredientList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 2,
      "jiaweijwjw": 19,
      "-": 62
    }
  },
  {
    "path": "src/main/java/duke/command/inventorycommands/ListIngredientsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.inventorycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.IngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.MESSAGE_TASKED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class ListIngredientsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ListIngredientsCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ingredientList contains the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ingredientStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void execute(IngredientList ingredientList, Ui ui, IngredientStorage ingredientStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientList.listIngredients().size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(ingredientList.listIngredients().get(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 40
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/AddFeedbackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.command.CommandFeedback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.FeedbackList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.FeedbackStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_FEEDBACK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class AddFeedbackCommand extends CommandFeedback {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public AddFeedbackCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e execute(FeedbackList feedbackList, Ui ui, FeedbackStorage feedbackStorage) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_FEEDBACK)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"stuck here\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.trim().charAt(11) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (userInput.trim().contains(\"n/\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String feedback \u003d userInput.split(\"n/\", 2)[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                feedbackList.addFeedback(feedback);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                System.out.println(\"added feedback\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                feedbackStorage.saveFile(feedbackList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(MESSAGE_ADDED + \"       \" + feedbackList.getFeedbackList().get(feedbackList.getSize() - 1) + \"\\n\" + \"You have added the feedback.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 45
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/AddPrepStepCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.command.CommandPrepStep;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.PrepStepList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.PrepStepStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_PREPSTEP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class AddPrepStepCommand extends CommandPrepStep {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public AddPrepStepCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e execute(PrepStepList prepStepList, Ui ui, PrepStepStorage prepStepStorage) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_PREPSTEP)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"stuck here\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.trim().charAt(11) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (userInput.trim().contains(\"n/\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String prepStep \u003d userInput.split(\"n/\", 2)[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                prepStepList.addPrepStep(prepStep);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                System.out.println(\"added prepStep\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                prepStepStorage.saveFile(prepStepList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(MESSAGE_ADDED + \"       \" + prepStepList.getPrepStepList().get(prepStepList.getSize() - 1) + \"\\n\" + \"You have added the prep steps.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 45
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/AddRatingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.command.CommandRating;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.RatingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.RatingStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class AddRatingCommand extends CommandRating {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public AddRatingCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RatingList ratingList, Ui ui, RatingStorage ratingStorage) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_RATING)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"stuck here\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else if (userInput.trim().charAt(9) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (userInput.trim().contains(\"n/\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String rating \u003d userInput.split(\"n/\", 2)[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                ratingList.addRating(rating);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                System.out.println(\"added rating\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                ratingStorage.saveFile(ratingList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(MESSAGE_ADDED + \"       \" + ratingList.getRatingList().get(ratingList.getSize() - 1) + \"\\n\" + \"You have added the rating.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 45
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/AddRecipeIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeIngredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeIngredientStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddRecipeIngredientCommand extends CommandRecipeIngredient {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public AddRecipeIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeIngredientList recipeIngredientList, Ui ui, RecipeIngredientStorage recipeIngredientStorage) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String recipeIngredientWeight \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String recipeIngredientQuantity \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String recipeIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String recipeIndex \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"stuck here1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(19) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.contains(\"q/\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String temp \u003d description.split(\"q/\", 2)[0].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                recipeIndex \u003d temp.split(\"\\\\s\", 2)[0].trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (isParsableInt(recipeIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    recipeIngredientName \u003d temp.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    String remaining \u003d description.split(\"q/\", 2)[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (remaining.contains(\"w/\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        recipeIngredientQuantity \u003d remaining.split(\"w/\")[0].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        recipeIngredientWeight \u003d remaining.split(\"w/\")[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (isParsableDouble(recipeIngredientQuantity)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeIngredientList.addRecipeIngredient(Integer.parseInt(recipeIndex), recipeIngredientName, Double.parseDouble(recipeIngredientQuantity), recipeIngredientWeight);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            recipeIngredientStorage.saveFile(recipeIngredientList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            int index \u003d recipeIngredientList.getSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            System.out.println(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(MESSAGE_ADDED + \"       \" + recipeIngredientList.listRecipeIngredients().get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + \" tasks in the list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(recipeIngredientName + \"......\" + recipeIngredientQuantity + \".....\" + recipeIngredientWeight);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsableInt(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsableDouble(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Double.parseDouble(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 89
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/AddRecipeTitleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeTitle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeTitleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeTitleStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_ADD_RECIPE_TITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AddRecipeTitleCommand extends CommandRecipeTitle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public AddRecipeTitleCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeTitleList recipeTitleList, Ui ui, RecipeTitleStorage recipeTitleStorage) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_ADD_RECIPE_TITLE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"stuck here 7\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(14) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String recipeTitle \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeTitleList.addRecipeTitle(recipeTitle);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"added tasks\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            recipeTitleStorage.saveFile(recipeTitleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(MESSAGE_ADDED + \"       \" + recipeTitleList.getRecipeTitleList().get(recipeTitleList.getSize() - 1) + \"\\n\" + \"Now you have \" + recipeTitleList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 42
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/DeleteRecipeIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeIngredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeIngredientStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_DELETE_RECIPE_INGREDIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.MESSAGE_DELETE_RECIPE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeleteRecipeIngredientCommand extends CommandRecipeIngredient {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DeleteRecipeIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeIngredientList recipeIngredientList, Ui ui, RecipeIngredientStorage recipeIngredientStorage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(3) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (index \u003e recipeIngredientList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (recipeIngredientList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(ERROR_MESSAGE_INVALID_INDEX + recipeIngredientList.getSize() + \".\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrayList.add(MESSAGE_DELETE_RECIPE + \"         \" + recipeIngredientList.getRecipeIngredientList().get(index - 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    recipeIngredientList.deleteIngredient(index - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    recipeIngredientStorage.saveFile(recipeIngredientList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 82
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/ListAllRecipeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeTitle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeTitleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeTitleStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListAllRecipeCommand extends CommandRecipeTitle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ListAllRecipeCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeTitleList contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeTitleStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeTitleList recipeTitleList, Ui ui, RecipeTitleStorage recipeTitleStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_LIST_RECIPES)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.addAll(recipeTitleList.listRecipeTitle());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        System.out.println(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        for (int i \u003d 0; i \u003c recipeTitleList.listRecipeTitle().size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            System.out.println(recipeTitleList.listRecipeTitle().get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 52
    }
  },
  {
    "path": "src/main/java/duke/command/recipecommands/ListRecipeIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.command.recipecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandRecipeIngredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.RecipeIngredientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeIngredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.COMMAND_LIST_RECIPE_INGREDIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.ERROR_MESSAGE_INVALID_RECIPE_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListRecipeIngredientCommand extends CommandRecipeIngredient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ListRecipeIngredientCommand(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e execute(RecipeIngredientList recipeIngredientList, Ui ui, RecipeIngredientStorage recipeIngredientStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInput.trim().equals(COMMAND_LIST_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"stuck here1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInput.trim().charAt(14) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String index \u003d userInput.split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsableInt(index)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                for (RecipeIngredient recipeIngredient : recipeIngredientList.getRecipeIngredientList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (recipeIngredient.getRecipeIngredientIndex() \u003d\u003d Integer.parseInt(index)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrayList.add(recipeIngredient.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrayList.add(ERROR_MESSAGE_INVALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsableInt(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 64
    }
  },
  {
    "path": "src/main/java/duke/common/BookingMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_LIST_BOOKINGS \u003d \"listallbookings\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_ADD_BOOKING \u003d \"addbooking\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_DELETE_BOOKING \u003d \"deletebooking\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_VIEW_BOOKING_SCHEDULE \u003d \"viewbookingschedule\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_FIND_BOOKING \u003d \"findbooking\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 9
    }
  },
  {
    "path": "src/main/java/duke/common/IngredientMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class IngredientMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_ADD_INGREDIENT \u003d \"addingredient\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_LIST_INGREDIENTS \u003d \"listingredients\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_DELETE_INGREDIENT \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_QUANTITY \u003d \"Please input an integer for the quantity\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String ERROR_MESSAGE_INCOMPLETE \u003d \"     Please provide both the ingredient name and quantity.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_FORMAT \u003d \"     Please input in this format:\\n     Eg: addingredient apple q/ 10.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 2,
      "jiaweijwjw": 9
    }
  },
  {
    "path": "src/main/java/duke/common/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to store all the initialisation of the static error messages to String value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePath \u003d \"C:\\\\Users\\\\acern\\\\main\\\\src\\\\main\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePathIngredients \u003d \"C:\\\\Users\\\\acern\\\\main\\\\src\\\\main\\\\data\\\\ingredients.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePathRecipeIngredients \u003d \"C:\\\\Users\\\\acern\\\\main\\\\src\\\\main\\\\data\\\\recipeIngredients.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePathRecipeTitle \u003d \"C:\\\\Users\\\\acern\\\\main\\\\src\\\\main\\\\data\\\\recipeTitle.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePathBookings \u003d \"C:\\\\Users\\\\acern\\\\main\\\\src\\\\main\\\\data\\\\bookings.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String filePathRecipes \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"     Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"     Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"     Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_EMPTY_INDEX \u003d \"     Kindly enter the command again with an index.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_NUll \u003d \"     Kindly enter the command again with a description.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_CONFIRM \u003d \"      \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Kindly enter command with the index of the tasks. Eg: confirm 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS1 \u003d \"     Now you have \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MARKED \u003d \"     Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_SCHEDULED \u003d \"     Nice! This task has been scheduled:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TASKED \u003d \"     Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String MESSAGE_SNOOZE \u003d \"     Noted. I\u0027ve rescheduled this task:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REMIND \u003d \"     Here are your upcoming deadlines:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_TENTATIVE \u003d \"     Here are your tentative scheduled tasks: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DEADLINE \u003d \"       \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the deadline in this format: \\n       \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"deadline [event description] /by [day/month/year time]\\n         \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Eg: 28/8/2019 2359 (For date and time format)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_INDEX \u003d \"     OOPS!!! The index cannot be empty.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_LIST \u003d \"     OOPS!!! The list is empty.\\n     Kindly add a task.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_EVENT \u003d \"       \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the event details in this format: \\n       \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"event [event description] /at [event time or venue]\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DO_AFTER \u003d \"       \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the todo details in this format: \\n       \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"todo [do after description] /after [specific time or task]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_GENERAL \u003d \"     OOPS!!! The description cannot be empty.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_DATE \u003d \"       \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! Please specify the date and time in this format: \\n       \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[day/month/year time] Eg: 28/8/2019 2359\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_INDEX \u003d \"     Invalid index entered.\\n     \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter command with index not more than \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_UNKNOWN_INDEX \u003d \"     Unknown index entered.\\n     \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Kindly enter an integer for the index.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_LOADING \u003d \"     OOPS!!! Error loading file: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_NOTFOUND \u003d \"     \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"OOPS!!! I\u0027m sorry, but there is no matching tasks in your list.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_RANDOM \u003d \"     OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_DURATION \u003d \"       \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"☹ OOPS!!! Please specify the fix duration task details in this format: \\n         \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"fixed [task description] /need [task duration]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_PERIOD \u003d \"     Please include the time period for this task.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     Tasks to be completed within a time period should be entered in this format:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"     period [task description] /between [start date] /and [end date]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_MESSAGE_PERIOD2 \u003d \"     Please provide both the start and end date for the task.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String ERROR_MESSAGE_VIEWSCHEDULE \u003d \"     Please specify date [day/month/year] in this format.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_TENTATIVESCHEDULE \u003d \"       \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"OOPS!!! Please specify tentative scheduling in this format: \\n       \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"tentativeschedule [task description] /on [day/month/year time], [day/month/year time], ......\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECURRING_FREQUENCY_NULL \u003d \"     \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please include the frequency of the recurrent task.\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"     Duke supports recurring tasks in this format:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            + \"     1. recurring [task description] /daily\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"     2. recurring [task description] /weekly [day of week] Eg: thurs\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"     3. recurring [task description] /monthly [day of month \u0027dd\u0027] Eg: 01\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECURRING_DETAILS_NULL \u003d \"     \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Please provide the task description and day or date of recurrence.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_DURATION \u003d \"fixed\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_SNOOZE \u003d \"snooze\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_PERIOD \u003d \"period\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_REMIND \u003d \"reminders\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_VIEWSCHEDULE \u003d \"viewschedule\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_TENTATIVESCHEDULE \u003d \"tentativeschedule\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_CONFIRMSCHEDULE \u003d \"confirmschedule\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_CONFIRM \u003d \"confirm\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public static final String COMMAND_RECURRING \u003d \"recurring\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DETECTCLASHES \u003d \"detectclashes\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DIVIDER \u003d \"   ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 11,
      "wjlingg": 21,
      "LJX0006": 3,
      "jiaweijwjw": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/duke/common/RecipeMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class RecipeMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_ADD_RECIPE_TITLE \u003d \"addrecipetitle\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_ADD_RECIPE_INGREDIENT \u003d \"addrecipeingredient\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST_RECIPES \u003d \"listallrecipes\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST_RECIPE_INGREDIENT \u003d \"listingredient\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static final String COMMAND_DELETE_RECIPE_INGREDIENT \u003d \"delri \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_ADD_FEEDBACK \u003d \"addfeedback\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_ADD_RATING \u003d \"addrating\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public static final String COMMAND_ADD_PREPSTEP \u003d \"addprepstep\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE \u003d \"     Noted. I\u0027ve removed this ingredient:\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_QUANTITY \u003d \"Please input a valid value for the quantity\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_INDEX \u003d \"Please input a valid value for the index\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RECIPE_INCOMPLETE \u003d \"     Please provide all information needed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_RECIPE_FORMAT \u003d \"     Please input in this format:\\n     Eg: addrecipeingredient garlic 100 grams.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "LJX0006": 8,
      "wjlingg": 10
    }
  },
  {
    "path": "src/main/java/duke/list/bookinglist/BookingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.list.bookinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_NOTFOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private ArrayList\u003cBooking\u003e bookingList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public BookingList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.bookingList \u003d new ArrayList\u003cBooking\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public BookingList(ArrayList\u003cBooking\u003e bookingList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.bookingList \u003d bookingList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void addBooking(String customerName, String customerContact, String numberOfPax, String bookingDate, String orderName) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList.add(new Booking(customerName, customerContact, numberOfPax, bookingDate, orderName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void deleteBooking(int i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        bookingList.remove(bookingList.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e listAllBooking() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            arrList.add(\"     \" + displayIndex + \". \" + bookingList.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cString\u003e findBooking(String customerName) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cString\u003e arrFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (bookingList.get(i).getCustomerName().toLowerCase().contains(customerName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                arrFind.add(\"      \" + bookingList.get(i).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_NOTFOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return arrFind;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return bookingList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return bookingList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 64
    }
  },
  {
    "path": "src/main/java/duke/list/ingredientlist/IngredientList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.list.ingredientlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import static duke.common.Messages.MESSAGE_ITEMS1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class IngredientList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private ArrayList\u003cIngredient\u003e ingredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public IngredientList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.ingredientList \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public IngredientList(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.ingredientList \u003d ingredientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e listIngredients() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrList.add(\"     \" + displayedIndex + \". \" + ingredientList.get(i));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    // find ingredient to check the quantity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cString\u003e checkQuantity(String ingredientName) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (ingredientList.get(i).getName().contains(ingredientName)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                System.out.println(ingredientList.get(i).getQuantity());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_NOTFOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            return arrFind;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void addIngredient(String ingredientName, int Quantity) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ingredientList.add(new Ingredient(ingredientName, Quantity));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int index \u003d ingredientList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + ingredientList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    // delete ingredient by index on list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void deleteIngredient(int i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (ingredientList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + ingredientList.get(i)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (ingredientList.size() - 1) + msg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        ingredientList.remove(ingredientList.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    // delete ingredient by name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void deleteIngredient(String ingredientName) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (ingredientList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (ingredientList.get(i).getName.contains(ingredientName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    ingredientList.remove(ingredientList.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    System.out.println(MESSAGE_DELETE + \"       \" + ingredientList.get(i)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            + \"\\n\" + MESSAGE_ITEMS1 + (ingredientList.size() - 1) + msg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 96
    }
  },
  {
    "path": "src/main/java/duke/list/recipelist/FeedbackList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.Feedback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class FeedbackList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private ArrayList\u003cFeedback\u003e feedbackList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public FeedbackList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.feedbackList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public FeedbackList(ArrayList\u003cFeedback\u003e feedbackList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.feedbackList \u003d feedbackList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e listFeedback() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrList.add(feedbackList.get(i).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void addFeedback(String feedback) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        feedbackList.add(new Feedback(getSize() + 1, feedback));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        int index \u003d feedbackList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" feedback in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + feedbackList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    // delete ingredient by index on list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void deleteFeedback(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (feedbackList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" feedback in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + feedbackList.get(i)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (feedbackList.size() - 1) + msg);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        feedbackList.remove(feedbackList.get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return feedbackList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cFeedback\u003e getFeedbackList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return feedbackList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 61
    }
  },
  {
    "path": "src/main/java/duke/list/recipelist/PrepStepList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.PrepStep;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class PrepStepList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private ArrayList\u003cPrepStep\u003e prepStepList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepStepList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepStepList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepStepList(ArrayList\u003cPrepStep\u003e prepStepList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.prepStepList \u003d prepStepList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e listPrepStep() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrList.add(prepStepList.get(i).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void addPrepStep(String prepStep) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        prepStepList.add(new PrepStep(getSize() + 1, prepStep));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        int index \u003d prepStepList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" prep step in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" prep steps in the list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + prepStepList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    // delete prep step by index on list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void deletePrepStep(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (prepStepList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" prep step in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" prep steps in the list\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + prepStepList.get(i)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (prepStepList.size() - 1) + msg);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        prepStepList.remove(prepStepList.get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return prepStepList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cPrepStep\u003e getPrepStepList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return prepStepList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 61
    }
  },
  {
    "path": "src/main/java/duke/list/recipelist/RatingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.Rating;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class RatingList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private ArrayList\u003cRating\u003e ratingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public RatingList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.ratingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public RatingList(ArrayList\u003cRating\u003e ratingList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.ratingList \u003d ratingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cString\u003e listRating() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            arrList.add(ratingList.get(i).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void addRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ratingList.add(new Rating(getSize() + 1, rating));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        int index \u003d ratingList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" rating in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" +ratingList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    // delete ingredient by index on list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void deleteRating(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        if (ratingList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d \" rating in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + ratingList.get(i)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (ratingList.size() - 1) + msg);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        ratingList.remove(ratingList.get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return ratingList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cRating\u003e getRatingList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return ratingList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 61
    }
  },
  {
    "path": "src/main/java/duke/list/recipelist/RecipeIngredientList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeIngredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_ITEMS1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeIngredientList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cRecipeIngredient\u003e recipeIngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeIngredientList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIngredientList \u003d new ArrayList\u003cRecipeIngredient\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeIngredientList(ArrayList\u003cRecipeIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIngredientList \u003d ingredientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e listRecipeIngredients() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrList.add(\"     \" + displayedIndex + \". \" + recipeIngredientList.get(i));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addRecipeIngredient(int ingredientIndex, String ingredientName, double quantity, String weight) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeIngredientList.add(new RecipeIngredient(ingredientIndex, ingredientName, quantity, weight));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int index \u003d recipeIngredientList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + recipeIngredientList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    // delete ingredient by index on list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void deleteIngredient(int i) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (recipeIngredientList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + recipeIngredientList.get(i)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (recipeIngredientList.size() - 1) + msg);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeIngredientList.remove(recipeIngredientList.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIngredientList.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cRecipeIngredient\u003e getRecipeIngredientList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIngredientList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 63
    }
  },
  {
    "path": "src/main/java/duke/list/recipelist/RecipeTitleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.list.recipelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeTitleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cRecipeTitle\u003e recipeTitleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeTitleList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeTitleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeTitleList(ArrayList\u003cRecipeTitle\u003e recipeTitleList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeTitleList \u003d recipeTitleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e listRecipeTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            final int displayedIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrList.add(recipeTitleList.get(i).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addRecipeTitle(String recipeTitle) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeTitleList.add(new RecipeTitle(getSize() + 1, recipeTitle));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int index \u003d recipeTitleList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + recipeTitleList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    // delete ingredient by index on list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void deleteIngredient(int i) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (recipeTitleList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + recipeTitleList.get(i)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (recipeTitleList.size() - 1) + msg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        recipeTitleList.remove(recipeTitleList.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeTitleList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cRecipeTitle\u003e getRecipeTitleList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeTitleList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 62
    }
  },
  {
    "path": "src/main/java/duke/list/tasklist/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.list.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.concurrent.CopyOnWriteArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles all the operations for the task in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the class TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to initialize taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList loaded tasklist from file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Search for matching tasks in taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the targeted search"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of matching tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if not able to find any matching task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e findTask(String description) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize() / 3; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskList.get(i).getDescription().contains(description)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrFind.add(\"     \" + displayIndex + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_NOTFOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return arrFind;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get all the tasks in the current taskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of tasks in the taskList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e listTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize() / 3; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            arrList.add(\"     \" + displayIndex + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(\"this is the number of items in the list: \" + getSize());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for deadline type task in taskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of deadlines"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e remindDeadlineTask() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrRemind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskList.get(i).getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                arrRemind.add(taskList.get(i).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrRemind;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get number of tasks in taskList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Integer corresponding to the number of tasks in taskList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds deadline task to taskList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by String containing the date and time of the deadline for the task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/*    public void addDeadlineTask(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        taskList.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds event task to taskList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at String containing the venue of the event"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEventTask(String description, String at) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Event(description, at));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds todo task to taskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTodoTask(String description) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Todo(description));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds fixed duration task to taskList."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param need String containing time needed for the task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDurationTask(String description, String need) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Duration(description, need));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Adds task that has to be done within a certain period of time."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate String containing the start date of the period to complete the task."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate String containing the end date of the period to complete the task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPeriodTask(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new Period(description, startDate, endDate));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Adds tasks that will recur daily, weekly, monthly or yearly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param frequency String containing the frequency of recurrence of the task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param dayOrDate String containing either the day of the date of the recurring task."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void addRecurringTask(String description, String frequency, String dayOrDate) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        taskList.add(new Recurring(description, frequency, dayOrDate));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds todo task need to be done after a specific time or task."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param after String containing the specific time or task"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDoAfterTask(String description, String after) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(new DoAfter(description, after));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Adds tentative schedule task to taskList."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param on String containing the multiple dates and time"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addTentativeSchedulingTask(String description, String on) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String[] items \u003d on.split(\",\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cTask\u003e tentativeTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c items.length; i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            tentativeTasks.add(new TentativeScheduling(description, items[i].trim()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            taskList.add(new TentativeScheduling(description, items[i].trim()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_TENTATIVE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Task task : tentativeTasks) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"      \" + i++ + \". \" + task.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(\"      Pls confirm the scheduling anytime with the command: confirmschedule\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneTask(int i) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.get(i).markAsDone();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_MARKED + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Schedules task in one of the slots."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void scheduledTask(int i) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String description \u003d taskList.get(i).getDescription();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // to avoid concurrent modification exception."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        List\u003cTask\u003e myList \u003d new CopyOnWriteArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        myList.addAll(taskList);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        myList.get(i).markAsDone();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (Task task : myList) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (task.getStatusIcon().equals(\"-\")) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        myList.remove(task);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_SCHEDULED + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addAll(myList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete task in taskList."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(int i) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + taskList.get(i)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (taskList.size() - 1) + msg);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.remove(taskList.get(i));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void snoozeTask(int i) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        System.out.println(MESSAGE_SNOOZE + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        taskList.remove(taskList.get(i));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the current taskList in file."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList containing tasks"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 19,
      "wjlingg": 52,
      "LJX0006": 9,
      "jiaweijwjw": 16,
      "-": 196
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.inventorycommands.AddIngredientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.CommandIngredients;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.command.recipecommands.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import static duke.common.BookingMessages.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.RecipeMessages.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.bookingcommands.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Making sense of the user input command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static CommandIngredients parseIngredient(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return new AddIngredientCommand(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static CommandRecipeTitle parseRecipeTitle(String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (input.trim().contains(COMMAND_ADD_RECIPE_TITLE)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new AddRecipeTitleCommand(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ListAllRecipeCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static CommandRecipeIngredient parseRecipeIngredient(String input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (input.trim().contains(COMMAND_ADD_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new AddRecipeIngredientCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (input.trim().contains(COMMAND_LIST_RECIPE_INGREDIENT)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ListRecipeIngredientCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new DeleteRecipeIngredientCommand(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public static CommandBooking parseBooking(String userInputCommand) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_LIST_BOOKINGS)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            return new AllBookingsCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInputCommand.trim().substring(0, 10).equals(COMMAND_ADD_BOOKING)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return new AddBookingCommand(userInputCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInputCommand.trim().substring(0, 13).equals(COMMAND_DELETE_BOOKING)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return new DeleteBookingCommand(userInputCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInputCommand.trim().substring(0, 19).equals(COMMAND_VIEW_BOOKING_SCHEDULE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return new ViewBookingScheduleCommand(userInputCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (userInputCommand.trim().substring(0, 11).equals(COMMAND_FIND_BOOKING)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                return new FindBookingCommand(userInputCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 20,
      "wjlingg": 25,
      "LJX0006": 2,
      "jiaweijwjw": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/storage/BookingStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.bookinglist.BookingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class BookingStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private static final ArrayList\u003cBooking\u003e arrBookingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public BookingStorage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList contains the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void saveFile(BookingList bookingList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                bufferedWriter.write(booking.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ArrayList\u003cBooking\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if(content.split(\"\\\\|\",6)[0].trim().equals(\"booking\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String customerName \u003d content.split(\"\\\\|\",6)[1].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String customerContact \u003d content.split(\"\\\\|\",6)[2].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String numberOfPax \u003d content.split(\"\\\\|\",6)[3].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String bookingDate \u003d content.split(\"\\\\|\",6)[4].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    String orderName \u003d content.split(\"\\\\|\",6)[5].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    Booking booking \u003d new Booking(customerName, customerContact, numberOfPax, bookingDate, orderName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    arrBookingList.add(booking);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return arrBookingList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 87
    }
  },
  {
    "path": "src/main/java/duke/storage/FeedbackStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.FeedbackList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.Feedback;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class FeedbackStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final ArrayList\u003cFeedback\u003e arrFeedbackList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final String filePathFeedback;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param filePathFeedback String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public FeedbackStorage(String filePathFeedback) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.filePathFeedback \u003d filePathFeedback;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param feedbackList contains the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void saveFile(FeedbackList feedbackList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathFeedback);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            for (Feedback feedback : feedbackList.getFeedbackList()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                bufferedWriter.write(feedback.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cFeedback\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathFeedback);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    Feedback feedback \u003d new Feedback(index, split[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    arrFeedbackList.add(feedback);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathFeedback + \"\u0027\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathFeedback + \"\u0027\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrFeedbackList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 68
    }
  },
  {
    "path": "src/main/java/duke/storage/IngredientStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class IngredientStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e arrIngredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private final String filePathIngredients;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param filePathIngredients String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public IngredientStorage(String filePathIngredients) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.filePathIngredients \u003d filePathIngredients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ingredientList contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void saveFile(IngredientList ingredientList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathIngredients);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            for (Ingredient ingredient : ingredientList.getIngredientList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                bufferedWriter.write(ingredient.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ArrayList\u003cIngredient\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathIngredients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    int quantity \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    Ingredient ingredient \u003d new Ingredient(split[0], quantity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    arrIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathIngredients + \"\u0027\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathIngredients + \"\u0027\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return arrIngredientList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 77
    }
  },
  {
    "path": "src/main/java/duke/storage/PrepStepStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.PrepStepList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.PrepStep;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class PrepStepStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final ArrayList\u003cPrepStep\u003e arrPrepStepList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final String filePathPrepStep;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param filePathPrepStep String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepStepStorage(String filePathPrepStep) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.filePathPrepStep \u003d filePathPrepStep;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param prepStepList contains the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void saveFile(PrepStepList prepStepList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathPrepStep);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            for (PrepStep prepStep : prepStepList.getPrepStepList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                bufferedWriter.write(prepStep.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cPrepStep\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathPrepStep);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    PrepStep prepStep \u003d new PrepStep(index, split[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    arrPrepStepList.add(prepStep);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathPrepStep + \"\u0027\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathPrepStep + \"\u0027\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrPrepStepList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 69
    }
  },
  {
    "path": "src/main/java/duke/storage/RatingStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.list.recipelist.RatingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.task.recipetasks.Rating;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class RatingStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final ArrayList\u003cRating\u003e arrRatingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private final String filePathRating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param filePathRating String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public RatingStorage(String filePathRating) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.filePathRating \u003d filePathRating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param ratingList contains the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void saveFile(RatingList ratingList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathRating);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            for (Rating rating : ratingList.getRatingList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                bufferedWriter.write(rating.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public ArrayList\u003cRating\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathRating);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    Rating rating \u003d new Rating(index, split[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    arrRatingList.add(rating);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathRating + \"\u0027\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathRating + \"\u0027\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return arrRatingList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 69
    }
  },
  {
    "path": "src/main/java/duke/storage/RecipeIngredientStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeIngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.ingredienttasks.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.ingredientlist.IngredientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeIngredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeIngredientStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final ArrayList\u003cRecipeIngredient\u003e arrRecipeIngredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final String filePathRecipeIngredients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param filePathRecipeIngredients String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeIngredientStorage(String filePathRecipeIngredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.filePathRecipeIngredients \u003d filePathRecipeIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeIngredientList contains the task list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void saveFile(RecipeIngredientList recipeIngredientList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathRecipeIngredients);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (RecipeIngredient recipeIngredient : recipeIngredientList.getRecipeIngredientList()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                bufferedWriter.write(recipeIngredient.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cRecipeIngredient\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathRecipeIngredients);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (split.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    double quantity \u003d Double.parseDouble(split[2]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    RecipeIngredient recipeIngredient \u003d new RecipeIngredient(index, split[1], quantity, split[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrRecipeIngredientList.add(recipeIngredient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathRecipeIngredients + \"\u0027\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathRecipeIngredients + \"\u0027\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrRecipeIngredientList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 81
    }
  },
  {
    "path": "src/main/java/duke/storage/RecipeTitleStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.recipelist.RecipeTitleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.task.recipetasks.RecipeTitle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeTitleStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final ArrayList\u003cRecipeTitle\u003e arrRecipeTitleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final String filePathRecipeTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param filePathRecipeTitle String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeTitleStorage(String filePathRecipeTitle) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.filePathRecipeTitle \u003d filePathRecipeTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param recipeTitleList contains the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void saveFile(RecipeTitleList recipeTitleList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePathRecipeTitle);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (RecipeTitle recipeTitle : recipeTitleList.getRecipeTitleList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                bufferedWriter.write(recipeTitle.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cRecipeTitle\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePathRecipeTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String[] split \u003d content.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    RecipeTitle recipeTitle \u003d new RecipeTitle(index, split[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrRecipeTitleList.add(recipeTitle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePathRecipeTitle + \"\u0027\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePathRecipeTitle + \"\u0027\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrRecipeTitleList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 73
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ArrayList\u003cTask\u003e arrTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFile(TaskList taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                bufferedWriter.write(task.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "/*    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                if (content.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (content.charAt(1) \u003d\u003d \u0027S\u0027) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        String[] split \u003d content.substring(9).split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new TentativeScheduling(split[0], split[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(5) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        String details \u003d content.substring(8);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new Todo(details);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    //need to escape character in string for \"|\" by adding \"\\\\\" in front of \"|\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    //if not the split will be on the wrong place"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    String[] split \u003d content.substring(8).split(\" \\\\| \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (content.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Deadline(split[0], split[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Event(split[0], split[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027F\u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        Task task \u003d new Duration(split[0], split[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (split.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            Task task \u003d new Period(split[0], split[1], split[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027R\u0027) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        if (split.length \u003d\u003d 2) { // daily"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            Task task \u003d new Recurring(split[0], split[1], \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        } else if (split.length \u003d\u003d 3) { // weekly, monthly, yearly"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            Task task \u003d new Recurring(split[0], split[1], split[2]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                            assignTaskMarker(content, task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } catch (IOException | ParseException ex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrTaskList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static void assignTaskMarker(String content, Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        arrTaskList.add(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 4,
      "wjlingg": 18,
      "LJX0006": 1,
      "jiaweijwjw": 18,
      "-": 82
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class to represent task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description; //User input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone; //To check if the task is completed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        DEADLINE, TENTATIVESCHEDULING, EVENT, TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description; //user input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false; //initially marked as not completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the description of the different tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the description of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the task as done after completion."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    } //marked as completed when done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the current status of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing plus symbol if completed and minus symbol otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return plus or minus symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \" | \" + getStatusIcon() + \" | \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the type of Task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Enumerated type of task which is declared"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public abstract Date getDateTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 3,
      "wjlingg": 2,
      "-": 69
    }
  },
  {
    "path": "src/main/java/duke/task/bookingtasks/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.task.bookingtasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String customerName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String customerContact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String numberOfPax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String bookingDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected SimpleDateFormat dateFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    protected String orderName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public Booking(String customerName, String customerContact, String numberOfPax, String bookingDate, String orderName) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.customerContact \u003d customerContact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.numberOfPax \u003d numberOfPax;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.bookingDate \u003d bookingDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(bookingDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        dateFormatter \u003d new SimpleDateFormat(\"d MMMM yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return \"booking\" + \" | \" + customerName + \" | \" + customerContact + \" | \" + numberOfPax + \" | \" + bookingDate + \" | \" +  orderName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return \"[Customer name: \" + customerName + \"] \" + \"[Contact No.: \" + customerContact + \"] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                + \"[No. of pax: \" + numberOfPax+ \"] \" + \"[Booking on: \" + dateFormatter.format(date) + \"] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                + \"[Orders: \" + orderName + \"]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public String getCustomerName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return customerName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 47
    }
  },
  {
    "path": "src/main/java/duke/task/ingredienttasks/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.task.ingredienttasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public Ingredient(String ingredientName, int quantity) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientName + \" | \" + quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientName + \"[\" + quantity + \"] \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ingredientType getIngredientType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return ingredientType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private String ingredientName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private double ingredientAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    private String ingredientWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public Ingredient (String ingredientName, double ingredientAmount, String ingredientWeight) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        this.ingredientAmount \u003d ingredientAmount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        this.ingredientWeight \u003d ingredientWeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public String getIngredientName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        return ingredientName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public double getIngredientAmount() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        return ingredientAmount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public String getIngredientWeight() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        return ingredientWeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void setIngredientAmount(double ingredientAmt) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        ingredientAmount \u003d ingredientAmt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 26,
      "jiaweijwjw": 35
    }
  },
  {
    "path": "src/main/java/duke/task/recipetasks/Feedback.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class Feedback {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private String feedback;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public Feedback(int i, String feedback) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return this.feedback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 23
    }
  },
  {
    "path": "src/main/java/duke/task/recipetasks/PrepStep.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class PrepStep {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private String step;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public PrepStep(int index, String step) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getStep() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return index + \" | \" + step;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return \"[\" + index + \"]\" + step;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 27,
      "wjlingg": 4
    }
  },
  {
    "path": "src/main/java/duke/task/recipetasks/Rating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public Rating(int i, String rating) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return this.rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 23
    }
  },
  {
    "path": "src/main/java/duke/task/recipetasks/RecipeIngredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "package duke.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeIngredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private int recipeIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private String recipeIngredientName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private double recipeIngredientQuantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private String recipeIngredientWeight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeIngredient(int recipeIndex, String recipeIngredientName, double recipeIngredientQuantity, String recipeIngredientWeight) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIngredientName \u003d recipeIngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIngredientQuantity \u003d recipeIngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeIngredientWeight \u003d recipeIngredientWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getRecipeIngredientIndex() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public double getRecipeIngredientQuantity() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIngredientQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getRecipeIngredientName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIngredientName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getRecipeIngredientWeight() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIngredientWeight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return recipeIndex + \" | \" + recipeIngredientName + \" | \" + recipeIngredientQuantity + \" | \" + recipeIngredientWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[\" + recipeIndex + \"] \" + recipeIngredientName + \"[\" + recipeIngredientQuantity + \" \" + recipeIngredientWeight + \"] \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 13,
      "wjlingg": 27
    }
  },
  {
    "path": "src/main/java/duke/task/recipetasks/RecipeTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.task.recipetasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeTitle {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private String recipeTitle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeTitle(int index, String recipeTitle) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.recipeTitle \u003d recipeTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return this.recipeTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return index + \" | \" + recipeTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[\" + index + \"]\" + \"[Recipe Title: \" + recipeTitle + \"]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/AlertHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class AlertHelper {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setHeaderText(null);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        alert.show();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 16
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getWelcome(String text) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return new DialogBox(text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates dialog box for Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param text Duke response"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param img Duke image"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return dialog box"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getDukeDialog(String text) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 74
    }
  },
  {
    "path": "src/main/java/duke/ui/ExitWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ExitWindow extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label exitMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Are you sure to exit?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ExitWindow() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ExitWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        exitMessage.setText(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void confirmExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void notConfirmExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Stage stage \u003d (Stage) noButton.getScene().getWindow();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class HelpWindow extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String USERGUIDE_URL \u003d \"https://github.com/AY1920S1-CS2113T-T12-4/main/blob/master/docs/README.adoc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/HelpWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Copies the URL of the user guide to the clipboard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Window owner \u003d copyButton.getScene().getWindow();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        AlertHelper.showAlert(Alert.AlertType.CONFIRMATION, owner, \"Copied URL\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"URL link has been copied\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 50
    }
  },
  {
    "path": "src/main/java/duke/ui/RecipeWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class RecipeWindow extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextField writeContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public RecipeWindow() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/RecipeWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Ui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Display welcome message of the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return DIVIDER + \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return MESSAGE_BYE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        mainWindow.showMessage(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return DIVIDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        mainWindow.handleLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void showIngredientLoadingError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(ERROR_MESSAGE_LOADING + filePathIngredients);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void showBookingLoadingError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(ERROR_MESSAGE_LOADING + filePathBookings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void showRecipeLoadingError() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        System.out.println(ERROR_MESSAGE_LOADING + filePathRecipes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void showListTask() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        mainWindow.handleListTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 24,
      "jiaweijwjw": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/ConfirmScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_CONFIRMSCHEDULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_TENTATIVE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_CONFIRM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ConfirmScheduleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ConfirmScheduleCommand(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cInteger\u003e integerArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_CONFIRMSCHEDULE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (task.getTaskType() \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    scheduleTasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    integerArrayList.add(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_TENTATIVE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Task task : scheduleTasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"      \" + integerArrayList.get(j++) + \". \" + task.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_FOLLOWUP_CONFIRM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().equals(COMMAND_CONFIRM)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(7) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                Task.TaskType currTaskType \u003d taskList.getTask(index - 1).getTaskType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (currTaskType \u003d\u003d Task.TaskType.TENTATIVESCHEDULING) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.scheduledTask(index - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(MESSAGE_FOLLOWUP_CONFIRM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 77,
      "jiaweijwjw": 9
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DEADLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DEADLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the deadline command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class DeadlineCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DeadlineCommand(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the deadline command to add deadline task to task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.contains(\"/by\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/by\", 2)[0].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String date \u003d description.split(\"/by\", 2)[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details.isEmpty() || date.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isParseDate(date)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        taskList.addDeadlineTask(details, date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        storage.saveFile(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validate the format of the input date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateStr String containing user input date and time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if user input the correct format for the date and time and false otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isParseDate(String dateStr) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            simpleDateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 4,
      "wjlingg": 1,
      "jiaweijwjw": 8,
      "-": 73
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/dukecommands/DeleteCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.BookingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/main/java/duke/command/bookingcommands/DeleteBookingCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class DeleteBookingCommand extends CommandBooking {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/dukecommands/DeleteCommand.java"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public DeleteBookingCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/main/java/duke/command/bookingcommands/DeleteBookingCommand.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * Processes the delete command to delete booking in the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingList contains the booking list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "     * @param bookingStorage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/dukecommands/DeleteCommand.java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"deletebooking\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else if (userInputCommand.trim().charAt(13) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String input \u003d userInputCommand.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            if (isParsable(input)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/main/java/duke/command/bookingcommands/DeleteBookingCommand.java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (index \u003e bookingList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    if (bookingList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        throw new DukeException(\"Booking list is empty.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + bookingList.getSize() + \".\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingList.deleteBooking(index - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    bookingStorage.saveFile(bookingList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 35,
      "wjlingg": 61,
      "jiaweijwjw": 8
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/DetectAnomaliesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DetectAnomaliesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DetectAnomaliesCommand(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 22,
      "jiaweijwjw": 4
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the done command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class DoneCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput input command from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the done command to mark task as done in the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + taskList.getSize() + \".\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.doneTask(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 9,
      "-": 73
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/DurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_DURATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DurationCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class DurationCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public DurationCommand(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_DURATION)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (description.contains(\"/need\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/need\", 2)[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String need \u003d description.split(\"/need\", 2)[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || need.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.addDurationTask(details, need);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 2,
      "LJX0006": 1,
      "jiaweijwjw": 8,
      "-": 38
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the event command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class EventCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public EventCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the event command to add event task to task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.contains(\"/at\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/at\", 2)[0].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String date \u003d description.split(\"/at\", 2)[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details.isEmpty() || date.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.addEventTask(details, date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 1,
      "jiaweijwjw": 9,
      "-": 48
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_FIND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the find command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class FindCommand extends CommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class FindCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * Processes the find command to search for tasks in task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param taskList contains the task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     * @throws DukeException if Duke cannot recognize the user input or there is no matching task found in tbe list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (userInputCommand.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            String description \u003d userInputCommand.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            System.out.println(MESSAGE_FIND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e feedback(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            String description \u003d userInputCommand.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.addAll(taskList.findTask(description));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(MESSAGE_FIND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            return taskList.findTask(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the find command to search for tasks in task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or there is no matching task found in tbe list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_FIND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e jiawei/chefduke:src/main/oldduke/dukecommands/FindCommand.java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrayList.add(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    public void exec(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        if (userInputCommand.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            String description \u003d userInputCommand.split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(MESSAGE_FIND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            return taskList.findTask(description);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            ui.showMessage(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 107,
      "jiaweijwjw": 9
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e jiawei/chefduke:src/main/oldduke/dukecommands/ListCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_TASKED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListCommand extends CommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e feedback(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayList.add(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrayList.addAll(taskList.listTask());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.listTask().size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(taskList.listTask().get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e jiawei/chefduke:src/main/oldduke/dukecommands/ListCommand.java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 51,
      "jiaweijwjw": 6
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/PeriodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_PERIOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_PERIOD2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PeriodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class PeriodCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public PeriodCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Processes the period command to add period task to task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    // Can refactor deep if-else nesting."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_PERIOD)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.contains(\"/between\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/between\", 2)[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String period \u003d description.split(\"/between\", 2)[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!period.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (period.contains(\"/and\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        String startDate \u003d period.trim().split(\"/and\", 2)[0].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        String endDate \u003d period.trim().split(\"/and\", 2)[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (startDate.isEmpty() || endDate.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_PERIOD2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                            taskList.addPeriodTask(details, startDate, endDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_PERIOD2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details.isEmpty() || period.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_PERIOD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_PERIOD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 1,
      "jiaweijwjw": 17,
      "-": 52
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_RECURRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RECURRING_DETAILS_NULL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RECURRING_FREQUENCY_NULL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " * Handles task that recur over time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    protected String details \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    protected String dayOrDate \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    protected String frequency \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Constructor for class RecurringCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RecurringCommand(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Processes the recurring command to add recurring tasks to task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws ParseException if there is any error in parsing the day or date input by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_RECURRING)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(9) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            if (description.contains(\"/daily\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.frequency \u003d \"daily\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.details \u003d description.split(\"/daily\", 2)[0].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                if (details.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    taskList.addRecurringTask(details, frequency, dayOrDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (description.contains(\"/weekly\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.frequency \u003d \"weekly\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.details \u003d description.split(\"/weekly\", 2)[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                this.dayOrDate \u003d description.split(\"/weekly\", 2)[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                checkFullInfoProvided(taskList, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else if (description.contains(\"/monthly\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                frequency \u003d \"monthly\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                details \u003d description.split(\"/monthly\", 2)[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                dayOrDate \u003d description.split(\"/monthly\", 2)[1].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                checkFullInfoProvided(taskList, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RECURRING_FREQUENCY_NULL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * Checks if both the details and the day or date of the recurring tasks have been input by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * If either of the information is missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws DukeException if either the details of the day/date is not input by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @throws ParseException if there is any error in parsing the day or date input by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    private void checkFullInfoProvided(TaskList taskList, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (details.isEmpty() || dayOrDate.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RECURRING_DETAILS_NULL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            taskList.addRecurringTask(details, frequency, dayOrDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 10,
      "jiaweijwjw": 88
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_REMIND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the reminders command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class RemindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public RemindCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the reminders command to display all upcoming deadlines in task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui       deals with interactions with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage  deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(MESSAGE_REMIND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.remindDeadlineTask().size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"     \" + (i + 1) + \". \" + taskList.remindDeadlineTask().get(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 1,
      "jiaweijwjw": 6,
      "-": 34
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_SNOOZE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_EVENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DEADLINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class SnoozeCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public SnoozeCommand(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validate that user inputs an integer value for the index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the delete command to delete task in the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_SNOOZE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + taskList.getSize() + \".\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    taskList.snoozeTask(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    if (description.contains(\" /by \")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String details \u003d taskList.getTask(index - 1).getDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String date \u003d description.trim().split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        if (details \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            if (isParseDate(date)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                taskList.addDeadlineTask(details, date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                storage.saveFile(taskList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                                throw new DukeException(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else if (description.contains(\" /at \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String details \u003d description.trim().split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        String date \u003d description.trim().split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        if (details \u003d\u003d null || date \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            taskList.addEventTask(details, date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "                        description \u003d userInput.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        taskList.addTodoTask(description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                        storage.saveFile(taskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validate the format of the input date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @param dateStr String containing user input date and time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     * @return true if user input the correct format for the date and time and false otherwise"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    private static boolean isParseDate(String dateStr) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            simpleDateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LJX0006"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LJX0006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LJX0006": 104,
      "wjlingg": 14,
      "jiaweijwjw": 10
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/TentativeScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.COMMAND_TENTATIVESCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_TENTATIVESCHEDULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the tentativeschedule command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TentativeScheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class TentativeCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public TentativeScheduleCommand(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the tentativeschedule command to add tasks in multiple slots in the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an wrong format for the description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_TENTATIVESCHEDULE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(17) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.contains(\"/on\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String details \u003d description.split(\"/on\", 2)[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String on \u003d description.split(\"/on\", 2)[1].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || on.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.addTentativeSchedulingTask(details, on);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_TENTATIVESCHEDULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 54,
      "jiaweijwjw": 9
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_DO_AFTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static duke.common.Messages.COMMAND_TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles the todo command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class TodoCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "     * @param userInput String containing input command from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public TodoCommand(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the todo command to add tasks to task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        } else if (userInput.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            String description \u003d userInput.split(\"\\\\s\",2)[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.contains(\"/after\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String details \u003d description.split(\"/after\", 2)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                String doaftertask \u003d description.split(\"/after\", 2)[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details.isEmpty() || doaftertask.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_DO_AFTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.addDoAfterTask(details, doaftertask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.addTodoTask(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 2,
      "wjlingg": 1,
      "jiaweijwjw": 9,
      "-": 51
    }
  },
  {
    "path": "src/main/oldduke/dukecommands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/dukecommands/ViewScheduleCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "package duke.command.dukecommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "package duke.command.bookingcommands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.command.CommandBooking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.BookingList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.storage.BookingStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.task.bookingtasks.Booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/main/java/duke/command/bookingcommands/ViewBookingScheduleCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static duke.common.Messages.ERROR_MESSAGE_VIEWSCHEDULE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "public class ViewBookingScheduleCommand extends CommandBooking {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/dukecommands/ViewScheduleCommand.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "    public ViewScheduleCommand(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        if (userInput.trim().equals(COMMAND_VIEWSCHEDULE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + ERROR_MESSAGE_VIEWSCHEDULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "        String inputDate \u003d userInput.substring(13).trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public ViewBookingScheduleCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public void execute(BookingList bookingList, Ui ui, BookingStorage bookingStorage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (userInputCommand.trim().equals(\"viewbookingschedule\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + ERROR_MESSAGE_VIEWSCHEDULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String inputDate \u003d userInputCommand.substring(20).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/main/java/duke/command/bookingcommands/ViewBookingScheduleCommand.java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        Date currDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(inputDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        ArrayList\u003cBooking\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        for (Booking booking : bookingList.getBookingList()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    //        if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                calendar.setTime(booking.getDateTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                    scheduleList.add(booking);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "   //         }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        String outputDate \u003d new SimpleDateFormat(\"dd MMMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"      No booking on \" + outputDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            System.out.println(\"      Here are your bookings for \" + outputDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            for (int i \u003d 0; i \u003c scheduleList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"      \" + (i + 1) + \". \" + scheduleList.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 73,
      "wjlingg": 9,
      "jiaweijwjw": 8
    }
  },
  {
    "path": "src/main/oldduke/test/DeadlineTest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lizihan95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineToSaveString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"D | - | return book | 2/12/2019 1800\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toSaveString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][-] return book (by: 2/12/2019 1800)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineDateConversion() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String date \u003d new Deadline(\"return book\", \"2/12/2019 1800\").convertDate(\"2/12/2019 1800\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"2nd of December 2019, 6.00pm\", date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeadlineGetStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Task deadline \u003d new Deadline(\"borrow book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"+\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 1,
      "wjlingg": 1,
      "jiaweijwjw": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/oldduke/test/EventTest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestEventToSaveString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"E | - | project meeting | Aug 6th 2-4pm\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new Event(\"project meeting\", \"Aug 6th 2-4pm\").toSaveString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestEventToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[E][-] project meeting (at: Aug 6th 2-4pm)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new Event(\"project meeting\", \"Aug 6th 2-4pm\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestEventGetStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Task event \u003d new Event(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"+\", event.getStatusIcon());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweijwjw": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/oldduke/test/TaskListTest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:src/main/oldduke/test/TaskListTest.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import duke.list.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "import duke.list.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lizihan95"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-booking-list:src/test/java/duke/TaskListTest.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates test cases by adding tasks to taskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of tasks in taskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList taskListTestStr() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addDeadlineTask(\"return book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTodoTask(\"text ui testing\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addDeadlineTask(\"assignment 3\", \"9/9/2019 1800\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addEventTask(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTodoTask(\"JUnit testing\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests findTask method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of items corresponding to the found items"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if not able to find any matching items"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e findActualTestStr() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"test\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrListFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListTestStr().findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrListFind.add((i + 1) + \" \" + taskListTestStr().findTask(description).get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrListFind;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests deleteTask method."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of remaining tasks in taskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e deleteActualTestStr() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrListDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addDeadlineTask(\"return book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTodoTask(\"text ui testing\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addDeadlineTask(\"assignment 3\", \"9/9/2019 1800\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addEventTask(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTodoTask(\"JUnit testing\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "            arrListDelete.add((i + 1) + \" \" + taskList.getTaskList().get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrListDelete;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests listTask method."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of tasks in taskList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e listActualTestStr() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListTestStr().getTaskList().remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListTestStr().getSize(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            arrList.add(taskListTestStr().listTask().get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * States the expected results for findTask method."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedFindTestStr() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"1. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"2. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * States the expected results for deleteTask method."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedDeleteTestStr() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"1. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"2. [D][-] assignment 3 (by: 9th of September 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"3. [E][-] project meeting (at: Aug 6th 2-4pm)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"4. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * States the expected results for listTask method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedListTestStr() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"     1. [D][-] return book (by: 2nd of December 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"     2. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"     3. [D][-] assignment 3 (by: 9th of September 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"     4. [E][-] project meeting (at: Aug 6th 2-4pm)\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        arrListTest.add(\"     5. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestFindCommand() throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addExpectedFindTestStr(), findActualTestStr());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestDeleteCommand() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addExpectedDeleteTestStr(), deleteActualTestStr());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestListCommand() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addExpectedListTestStr(), listActualTestStr());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lizihan95": 4,
      "wjlingg": 1,
      "jiaweijwjw": 2,
      "-": 121
    }
  },
  {
    "path": "src/main/oldduke/test/TodoTest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweijwjw"
        },
        "content": "import duke.task.duketasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestTodoToSaveString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"T | - | borrow book\", new Todo(\"borrow book\").toSaveString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestTodoToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[T][-] borrow book\", new Todo(\"borrow book\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void shouldTestTodoGetStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Task todo \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"+\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweijwjw": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c!--        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cInsets left\u003d \"30.0\" right\u003d\"70.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/ExitWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cHBox alignment\u003d\"BASELINE_LEFT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"0.0\" prefWidth\u003d\"400.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cLabel fx:id\u003d\"exitMessage\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cButton fx:id\u003d\"yesButton\" cancelButton\u003d\"true\" mnemonicParsing\u003d\"false\" onAction\u003d\"#confirmExit\" text\u003d\"YES\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cButton fx:id\u003d\"noButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#notConfirmExit\" text\u003d\"NO\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 38
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"800.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                 \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003c/Button\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 33
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cAnchorPane id\u003d\"AnchorPane\" fx:id\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cVBox prefHeight\u003d\"177.0\" prefWidth\u003d\"1200.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"25.0\" prefWidth\u003d\"1184.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c!--                user has the option to exit the program without typing in exit command--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c!--                link to user guide in case user need help--\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c!--        user to input command--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutY\u003d\"25.0\" prefHeight\u003d\"51.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c!--            display the result of the user command--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"resultDisplay\" promptText\u003d\"Display error message here...\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"193.0\" prefHeight\u003d\"456.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"455.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "       \u003cScrollPane hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"399.0\" layoutY\u003d\"193.0\" prefHeight\u003d\"456.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "          \u003ccontent\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "             \u003cListView fx:id\u003d\"listView\" prefHeight\u003d\"455.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "          \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "       \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "       \u003cScrollPane hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"800.0\" layoutY\u003d\"193.0\" prefHeight\u003d\"456.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "          \u003ccontent\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "             \u003cListView fx:id\u003d\"listViewResult\" prefHeight\u003d\"455.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "          \u003c/content\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "       \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 52,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/RecipeWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "      \u003cStackPane fx:id\u003d\"writeContentPlaceHolder\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cTextField fx:id\u003d\"writeContent\" onAction\u003d\"#handleAddRecipe\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" promptText\u003d\"Write content here...\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 15
    }
  },
  {
    "path": "src/main/resources/view/WelcomeScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cStackPane fx:id\u003d\"rootPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "           prefHeight\u003d\"650.0\" prefWidth\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cImageView fitHeight\u003d\"650.0\" fitWidth\u003d\"1200.0\" pickOnBounds\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cImage url\u003d\"@../images/welcome.PNG\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 16
    }
  }
]
