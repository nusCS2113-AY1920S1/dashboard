[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    // mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    mainClassName \u003d \"duke.DukeLauncher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        xml.enabled \u003d true // coveralls plugin depends on xml format report"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 18,
      "aquohn": 17,
      "-": 43
    }
  },
  {
    "path": "src/main/java/duke/DukeCore.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.gui.Gui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeCore {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public final Gui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Create new DukeCore, generating taskList from the provided Ui and Storage objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage object to use in this context."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui      Ui object to use in this context."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeFatalException If unable to setup data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @see Gui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public DukeCore(Storage storage, Gui ui) throws DukeFatalException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeResetException excp) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            String resetStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printError(excp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            while (true) { //wait for user to respond"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                // TODO: Read user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                // resetStr \u003d ui.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                resetStr \u003d \"Y\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                if (resetStr.length() \u003e 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    resetStr \u003d resetStr.substring(0, 1); //extract first char"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (resetStr.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        storage.writeTaskFile(\"\"); //write empty string to data file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        ui.print(\"Your data has been reset!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (resetStr.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        ui.closeUi();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                        //System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            excp.killProgram(ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 9,
      "aquohn": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/DukeGui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.gui.Gui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * GUI version of Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class DukeGui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private DukeCore core; //holds the tasklist, ui and storage classes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates a new Duke object (GUI version), with an associated DukeCore."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param gui      Graphical User Interface (GUI) object used by Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param filePath The path where the data file will be located."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @see DukeCore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public DukeGui(Gui gui, String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            //construct tasklist from storage and ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            core \u003d new DukeCore(new Storage(filePath), gui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            String reminderStr \u003d core.taskList.listReminders().replace(System.lineSeparator(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    System.lineSeparator() + \"  \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            core.ui.print(\"Here are your reminders:\" + reminderStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            excp.killProgram(gui); //standard exit on fatal exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            core.ui.print(\"You have no reminders!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        core.ui.printHello();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Responds to the user message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void respond() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            Command c \u003d core.ui.parseCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            c.execute(core);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            core.ui.printError(excp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 48
    }
  },
  {
    "path": "src/main/java/duke/DukeLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.gui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * Class to launch Dr. Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Main function."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param args Arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        // TODO: mkdir in Storage class instead?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        File dataDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            dataDir.mkdir();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(DukeApplication.class, args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DukeApplication extends Application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public void start(Stage stage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                FXMLLoader fxmlLoader \u003d new FXMLLoader(DukeGui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Gui gui \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                gui.setDuke(new DukeGui(gui, \"data\" + File.separator + \"tasks.tsv\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                stage.setScene(new Scene(ap));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                stage.setTitle(\"Dr. Duke\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                stage.setResizable(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 17,
      "-": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ArgCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Abstract class for commands that involve an argument."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ArgCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected ArgLevel cmdArgLevel; //whether or not the command itself is required to have an argument"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected String arg \u003d null; //argument supplied to the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected String emptyArgMsg; //error message if the argument is empty"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected HashMap\u003cString, String\u003e switchVals \u003d new HashMap\u003cString, String\u003e(); //hashmap of switch parameters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected HashMap\u003cString, ArgLevel\u003e switches \u003d new HashMap\u003cString, ArgLevel\u003e(); //list of recognised switches"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Command needs to parse argument first!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String getEmptyArgMsg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return emptyArgMsg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    HashMap\u003cString, ArgLevel\u003e getSwitches() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return switches;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    void setSwitchVals(HashMap\u003cString, String\u003e switchVals) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        this.switchVals.putAll(switchVals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 25,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/command/ArgLevel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "enum ArgLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    REQUIRED,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    OPTIONAL"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 7
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeFatalException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.closeUi();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        //System.exit(0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "aquohn": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/command/Cmd.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// enum for generating hashmap of strings to commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "// TODO: Write different commands for different contexts"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Maintains the associations between command keywords and commands (e.g. \"list\" -\u003e ListCommand). For use in parsing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public enum Cmd {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    DOCTOR(\"doctor\") {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new DoctorCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    LIST(\"list\") {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    BYE(\"bye\") {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    DONE(\"done\") {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    DEL(\"delete\") {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    FIND(\"find\") {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    VIEW(\"view\") {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return new ViewCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String cmdStr;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the Cmd enum instance and associates the specified keyword with it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmdStr The keyword to be associated with the specified task type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Cmd(final String cmdStr) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cmdStr \u003d cmdStr;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return cmdStr;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty (all parameters null) new Command of the specified type, to be loaded with data using its"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new Command of the specified type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 2,
      "aquohn": 8,
      "-": 62
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Highest-level abstract class for Command objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the command using the parameters loaded with Command\u0027s parse method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param core The DukeCore object for this command to operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If command fails to execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see DukeCore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public abstract void execute(DukeCore core) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the command using the parameters loaded with Command\u0027s parse method, but without any changes to storage and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * returning output that would ordinarily be printed, although not necessarily in the same format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param core The DukeCore object for this command to operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing output would be printed during ordinary execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If command fails to execute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see DukeCore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String silentExecute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    //TODO: replace with abstract function that actually prints excerpts from the user guide"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String getHelp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"https://github.com/AY1920S1-CS2113-T14-1/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 12,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends ArgCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me which task to delete!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String delStr \u003d core.taskList.deleteTask(arg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getDelReport(System.lineSeparator() + \"  \" + delStr, 1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DoctorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Stub Command for testing new Parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DoctorCommand extends ArgCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Constructor for DoctorCommand command, specifying 1 possible switch."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public DoctorCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        cmdArgLevel \u003d ArgLevel.OPTIONAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me what to do!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switches.put(\"switch\", ArgLevel.OPTIONAL);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(\"Argument: \" + arg + System.lineSeparator() + \"Switch: \" + switchVals.get(\"switch\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends ArgCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String taskStr \u003d core.taskList.markDone(arg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        taskStr \u003d \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator() + \"  \" + taskStr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(taskStr);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends ArgCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me what to look for!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String findStr \u003d \"Here are the tasks that contain \u0027\" + arg + \"\u0027:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        findStr \u003d findStr + core.taskList.find(arg).replace(System.lineSeparator(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                System.lineSeparator() + \"  \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(findStr);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String listStr \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        listStr \u003d (listStr + core.taskList.listTasks()).replace(System.lineSeparator(),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                System.lineSeparator() + \"  \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(listStr);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/command/MultiArgCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class for commands with multiple arguments split by a common delimiter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class MultiArgCommand extends ArgCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: figure out the proper Javadoc for these parameters"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String[] argv; //array to store multiple arguments"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected int argc; //minimum number of arguments expected"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String delim; //delimiter to split arguments by, may be a regex"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String invalidArgMsg; //message to display if insufficient arguments are supplied"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Splits the input string into the argv array based on the common delimiter delim, stripping the strings in argv."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If, after being split the number of arguments is less than argc, the required number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        //remove excess whitespace between commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        //primarily to prevent space-delimited commands from throwing errors if there are two spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        argv \u003d arg.split(\"\\\\s*\" + delim + \"\\\\s*\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv.length \u003c argc) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(invalidArgMsg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c argv.length; ++i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            argv[i] \u003d argv[i].strip();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/command/NewDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewDeadlineCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewDeadlineCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewDeadlineCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"/by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid deadline! I need to know the date and time that it is due /by.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the deadline!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task description cannot be empty!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d core.taskList.addTask(new DeadlineTask(argv[0], taskDateTime));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String silentExecute(DukeCore core) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return core.taskList.addTask(new DeadlineTask(argv[0], taskDateTime));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 8,
      "-": 33
    }
  },
  {
    "path": "src/main/java/duke/command/NewDoWithinPeriodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DoWithinPeriodTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new DoWithinPeriod task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewDoWithinPeriodCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    LocalDateTime endDatetime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to create a new DoWithinPeriod task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * argc will throw an error if the number of arguments is less than 3."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewDoWithinPeriodCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"(/between|/and)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid period! I need to know the date and time that it is /between.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the task!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1], argv[2] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            endDatetime \u003d LocalDateTime.parse(argv[2], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d core.taskList.addTask(new DoWithinPeriodTask(argv[0], taskDateTime, endDatetime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/duke/command/NewEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new Event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewEventCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private LocalDateTime endDatetime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to create a new Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * argc will throw an error if the number of arguments is less than 3."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewEventCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewEventCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"(/at|/to)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid event! I need to know the date and time that it is /at.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the event!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1], argv[2] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            endDatetime \u003d LocalDateTime.parse(argv[2], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d core.taskList.addTask(new EventTask(argv[0], taskDateTime, endDatetime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String silentExecute(DukeCore core) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return core.taskList.addTask(new EventTask(argv[0], taskDateTime, endDatetime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "aquohn": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/duke/command/NewFixedDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDurationTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new FixedDuration task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewFixedDurationCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Duration period;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to create a new FixedDuration task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * argc will throw an error if the number of arguments is less than 2."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewFixedDurationCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"(/for)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid event! I need to know the duration it is /for.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the event!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1] as the period of time in the Duration data format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if duration is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.period \u003d Duration.parse(argv[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. P3DT3H4M5S parses as\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                    + \"3 Days, 3 Hours, 4 Minutes, 5 Seconds.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d core.taskList.addTask(new FixedDurationTask(argv[0], this.period));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "aquohn": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/duke/command/NewRecurringTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO This is complex enough that the generic Javadoc will not do"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewRecurringTaskCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewRecurringTaskCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewRecurringTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"/repeats\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the recurring tasks!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"You didn\u0027t tell me how the task is supposed to recur!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser recurParser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NewTimedTaskCommand refCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            refCommand \u003d (NewTimedTaskCommand) recurParser.parse(argv[0]); //find out what kind of command to execute"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ClassCastException excp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Can\u0027t have that as a recurring task!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        TemporalUnit period \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int firstSpaceIdx \u003d argv[1].indexOf(\" \"); //index of first space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (firstSpaceIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You didn\u0027t tell me how frequently this task should recur!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (argv[1].substring(0, firstSpaceIdx)) { //extract period from frequency, use fallthrough to add synonyms"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"I don\u0027t know how frequently that\u0027s supposed to be!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        argv[1] \u003d argv[1].substring(firstSpaceIdx).strip(); //remove frequency descriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String countDelim \u003d \"/count\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String untilDelim \u003d \"/until\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        long count \u003d 1; //for the task itself"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException invalidRecurrenceExcp \u003d new DukeException(\"You need to tell me how many times you want that \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"task to recur!\" + System.lineSeparator() + \"Either tell me to repeat it with e.g. \u0027/count 5\u0027 or\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"with e.g. \u0027/until \" + LocalDateTime.now().plus(3, period)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .format(TimedTask.getPatDatetime()) + \"\u0027.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (argv[1].matches(\"^\" + countDelim + \"\\\\s+\\\\d+$\")) { //fixed counter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            count +\u003d Long.parseLong(argv[1].substring(countDelim.length()).strip());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else if (argv[1].matches(\"^\" + untilDelim + \"\\\\s+[A-Za-z 0-9/]+$\")) { //until date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime until \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                until \u003d LocalDateTime.parse(argv[1].substring(untilDelim.length()).strip(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                throw invalidRecurrenceExcp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            count +\u003d period.between(refCommand.taskDateTime, until);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw invalidRecurrenceExcp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"This task will not recur!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //I\u0027m gonna do what\u0027s called a pro gamer move"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder addStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (long i \u003d 0; i \u003c count; ++i) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addStrBuilder.append(System.lineSeparator()).append(\"  \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    .append(refCommand.silentExecute(core));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            refCommand.taskDateTime \u003d refCommand.taskDateTime.plus(1, period);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(addStrBuilder.toString(), count));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 12,
      "-": 82
    }
  },
  {
    "path": "src/main/java/duke/command/NewReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to attach a new Reminder to a Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewReminderCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime reminderDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to set a Reminder for a Task, updating its inherited"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewReminderCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"/after\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid reminder! I need to know the date and time to remind you /after.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the reminder!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Description of reminder cannot be empty!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String remindStr \u003d \"Roger! I\u0027ve set a reminder for this task.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + \"  \" + core.taskList.setReminder(argv[0], new Reminder(reminderDateTime));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(remindStr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 6,
      "-": 48
    }
  },
  {
    "path": "src/main/java/duke/command/NewTimedTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class for Tasks that need to store a LocalDateTime object as part of their description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class NewTimedTaskCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected LocalDateTime taskDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/duke/command/NewToDoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewToDoCommand extends ArgCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewToDoCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewToDoCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"Task description cannot be empty!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(core);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d core.taskList.addTask(new ToDoTask(arg));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.storage.writeTaskFile(core.taskList.getFileStr());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeHelpException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import static duke.command.Parser.ParseState.EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import static java.lang.Math.min;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    enum ParseState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        EMPTY, //not parsing anything currently"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ARG, //parsing a single-word argument for a switch or the command itself"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        STRING, //parsing a quoted string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        SWITCH //parsing a switch name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final HashMap\u003cString, Cmd\u003e commandMap \u003d new HashMap\u003cString, Cmd\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private ArgCommand currCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private StringBuilder elementBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private ParseState state;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private String currSwitch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private boolean isEscaped;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private HashMap\u003cString, ArgLevel\u003e switches;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private HashMap\u003cString, String\u003e switchVals;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new Parser, generating a HashMap from Cmd enum values to allow fast lookup of command types."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Cmd cmd : Cmd.values()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            commandMap.put(cmd.toString(), cmd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command of the type requested by the user, and extracts the necessary data for the command from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * the arguments. Literal line separators in the text will be converted to \\n for consistency."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputStr The input to the command line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new instance of the Command object requested"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If there is no matching command or the arguments do not meet the command\u0027s requirements."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        inputStr \u003d inputStr.replace(\"\\t\", \"    \"); //sanitise input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int spaceIdx \u003d inputStr.indexOf(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int sepIdx \u003d inputStr.indexOf(System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String cmdStr \u003d inputStr;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (!(spaceIdx \u003d\u003d -1 \u0026\u0026 sepIdx \u003d\u003d -1)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (spaceIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                cmdStr \u003d inputStr.substring(0, sepIdx);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else if (sepIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                cmdStr \u003d inputStr.substring(0, spaceIdx);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                cmdStr \u003d inputStr.substring(0, min(sepIdx, spaceIdx));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Cmd cmd \u003d commandMap.get(cmdStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (cmd \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t recognise this command: \" + cmdStr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d cmd.getCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        // TODO: autocorrect system"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        // trim command and first space after it from input if needed, and standardise newlines"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (command instanceof ArgCommand) { // stripping not required otherwise"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            currCommand \u003d (ArgCommand) command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            inputStr \u003d inputStr.replaceAll(\"(\\\\r\\\\n|\\\\n|\\\\r)\", \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            parseArgument(inputStr.substring(cmdStr.length()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Parses the user\u0027s input after the Command name and loads the parameters for the Command from it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param inputStr The input provided by the user for this command, without the command keyword and stripped."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If input was in the wrong format, contained invalid values, or was otherwise unable to be"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     *                       parsed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void parseArgument(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        assert (!inputStr.contains(\"\\r\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (inputStr.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(currCommand.getEmptyArgMsg());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        state \u003d EMPTY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        currSwitch \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switches \u003d currCommand.getSwitches();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switchVals \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        elementBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        isEscaped \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        //FSM :D"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (int i \u003d 0; i \u003c inputStr.length(); ++i) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            char curr \u003d inputStr.charAt(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            switch (state) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            case EMPTY:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                handleEmpty(curr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            case ARG:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                handleArg(curr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                handleString(curr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            case SWITCH:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                handleSwitch(curr);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeException(\"Invalid parser state!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        //cleanup and check if states exited correctly"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case ARG:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            writeElement();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case STRING:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            // TODO: disambiguate/autocorrect?"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeHelpException(\"String in argument was not closed: \" + elementBuilder.toString(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    currCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case SWITCH:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            addSwitch();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"Invalid parser state!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        checkCommandValid();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        currCommand.setSwitchVals(switchVals);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void handleEmpty(char curr) throws DukeHelpException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switch (curr) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027-\u0027:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            state \u003d ParseState.SWITCH;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\"\u0027:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            checkInputAllowed();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            state \u003d ParseState.STRING;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\\n\u0027: //fallthrough"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027 \u0027: //skip spaces"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            checkInputAllowed();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            elementBuilder.append(curr);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            state \u003d ParseState.ARG;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void handleArg(char curr) throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switch (curr) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\"\u0027:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeException(\"Unescaped double quotes in argument: \" + elementBuilder.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027-\u0027:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeException(\"Unescaped hyphen in argument: \" + elementBuilder.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\\\\\u0027:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                isEscaped \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\\n\u0027: //fallthrough"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027 \u0027:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                writeElement();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            isEscaped \u003d false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            elementBuilder.append(curr);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void handleString(char curr) throws DukeHelpException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switch (curr) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\"\u0027:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                writeElement();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\\\\\u0027:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!isEscaped) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                isEscaped \u003d true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } //fallthrough"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            isEscaped \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            elementBuilder.append(curr);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    // TODO: requires major rewrite for autocorrect"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void handleSwitch(char curr) throws DukeHelpException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        switch (curr) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\"\u0027:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            state \u003d ParseState.STRING;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            addSwitch();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027\\n\u0027: //fallthrough"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027 \u0027:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            state \u003d EMPTY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            addSwitch();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        case \u0027-\u0027:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            addSwitch();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            elementBuilder.append(curr);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void writeElement() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        assert (currSwitch !\u003d null || currCommand.arg \u003d\u003d null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (currSwitch !\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            switchVals.put(currSwitch, elementBuilder.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            currSwitch \u003d null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else { //currCommand.arg \u003d\u003d null"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            currCommand.arg \u003d elementBuilder.toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        elementBuilder.setLength(0); //clear elementBuilder"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        state \u003d EMPTY;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    // TODO: this function is going to become very big with autocorrect"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void addSwitch() throws DukeHelpException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String newSwitch \u003d elementBuilder.toString();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (!switches.containsKey(newSwitch)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeHelpException(\"I don\u0027t know what this switch is: \" + newSwitch, currCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else if (switchVals.containsKey(newSwitch)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeHelpException(\"Multiple values supplied for switch: \" + newSwitch, currCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (switches.get(newSwitch) !\u003d ArgLevel.NONE) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                currSwitch \u003d newSwitch;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                switchVals.put(newSwitch, null);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            elementBuilder.setLength(0); //clear elementBuilder"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void checkInputAllowed() throws DukeHelpException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (currSwitch \u003d\u003d null) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (currCommand.cmdArgLevel \u003d\u003d ArgLevel.NONE) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeHelpException(\"This command should not have an argument!\", currCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else if (currCommand.arg !\u003d null) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeHelpException(\"Multiple arguments supplied! You already gave: \" + currCommand.arg,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        currCommand);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void checkCommandValid() throws DukeException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (currCommand.cmdArgLevel \u003d\u003d ArgLevel.REQUIRED) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeHelpException(\"You need to give an argument for the command!\", currCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (HashMap.Entry\u003cString, ArgLevel\u003e switchEntry : switches.entrySet()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (switchEntry.getValue() \u003d\u003d ArgLevel.REQUIRED"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    \u0026\u0026 switchVals.get(switchEntry.getKey()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeHelpException(\"You need to give me this switch: \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        + switchEntry.getKey(), currCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 242,
      "-": 36
    }
  },
  {
    "path": "src/main/java/duke/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new SnoozeCommand which can be executed to snooze a TimedTask. The constructor sets the parameters"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * for the command\u0027s inherited methods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"You need to specify the index of the task to be snoozed\" + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"followed by the new date and time given as e.g. snooze 1 01/02/2019 1800\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me what to snooze!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The snooze statement cannot be empty!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int idx \u003d core.taskList.getTaskIdx(argv[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String newDateTimeStr \u003d arg.substring(argv[0].length() + 1); // +1 to exclude the task number from DateTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime newDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(newDateTimeStr, TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(invalidArgMsg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(core.taskList.snooze(idx, newDateTime));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 4,
      "-": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * Class responsible for executing Command to view the scheduled Tasks on a specified date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class ViewCommand extends ArgCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private static final DateTimeFormatter PAT_DATE \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates a new Command object that can be executed to view the scheduled Tasks on a specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public ViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        emptyArgMsg \u003d \"Please give me a date to work with!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeCore core) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String scheduleStr \u003d \"Here are your tasks for \" + arg + \":\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.ui.print(scheduleStr + core.taskList.listSchedule(date));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 30,
      "aquohn": 3
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFatalException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.gui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Exceptions which result from conditions external to Duke rendering it incapable of normal operations (e.g."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * permissions issues, application code corruption, etc.)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeFatalException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a DukeFatalException with the specified message and an additional hint that Duke is being exited from."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param msg Custom message explaining the problem which makes Duke unusable and suggesting actions to rectify it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeFatalException(String msg) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(msg + \" Exiting Duke now...\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void killProgram(Gui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.print(getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        //System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeHelpException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeHelpException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public DukeHelpException(String msg, Command command) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super(msg + System.lineSeparator() + System.lineSeparator() + command.getHelp());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogHolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new DialogBox object to be displayed in the chat window of the GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.wrappingWidthProperty().bind(dialogHolder.prefWidthProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a dialog box for the user\u0027s input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new dialog box for Duke\u0027s response."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/duke/gui/Gui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.DukeGui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private DukeGui dukeGui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private String inputStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Gui() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        inputStr \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!inputStr.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            dialogContainer.getChildren().add(DialogBox.getUserDialog(inputStr, userImage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            dukeGui.respond();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(DukeGui dukeGui) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dukeGui \u003d dukeGui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Use the Parser to extract the requested command, which will be loaded with parameters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * extracted from the user\u0027s arguments."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @return The command specified by the user, with arguments parsed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeException If Parser fails to find a matching command or the arguments do not meet the command\u0027s"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *                       requirements."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Command parseCommand() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        // String inputStr \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        inputStr \u003d inputStr.replaceAll(\"\\t\", \"    \"); //sanitise input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return parser.parse(inputStr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param msg Message to be printed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void print(String msg) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(msg, dukeImage));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Prints hello message to indicate that setup is completed and Duke can now receive user input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void printHello() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String welcome \u003d Message.MESSAGE_WELCOME_GREET + \"\\n\" + Message.MESSAGE_WELCOME_QUESTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        print(welcome);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Prints the error message from an exception."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param excp Exception whose message we want to print."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void printError(DukeException excp) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        print(excp.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Disable UI inputs and print a goodbye message. UI should not be used anymore after calling this function."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void closeUi() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        print(Message.MESSAGE_EXIT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 51,
      "-": 54
    }
  },
  {
    "path": "src/main/java/duke/gui/Message.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND_EMPTY \u003d \"There are no matching tasks in your list. \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please try another keyword.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND_NON_EMPTY \u003d \"Here are the matching task(s) in your list:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"You have currently no tasks in your list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_NON_EMPTY \u003d \"Here are the task(s) in your list:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_WELCOME_GREET \u003d \"Hello! I\u0027m Duke.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_WELCOME_QUESTION \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/task/DukeData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public abstract class DukeData extends DukeObject {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private Impression impression;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Abstraction of the evidence or treatment data of a patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A DukeData object corresponds to the evidence or treatment a doctor has,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the impression that led to that data as well as an integer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * between 1-4 representing the priority or significance of the investigation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - name: the evidence or treatment needed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - impression: the impression object the data is tagged to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - priority: the priority level of the investigation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public DukeData(String name, Impression impression, int priority) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.impression \u003d impression;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This updatePriority function updates priority of treatment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param int the integer value of the priority between 1 to 4"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the integer of the updated priority"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public abstract int updatePriority(int priorityVal) throws DukeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Impression getImpression() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return impression;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setImpression(Impression impression) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.impression \u003d impression;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 48
    }
  },
  {
    "path": "src/main/java/duke/task/DukeObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * Highest level of abstraction for all DukeObjects storing Patient related Data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * A Duke object has a relevant name specifying what it is."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * Attributes:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * - name: what the object is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public abstract class DukeObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public DukeObject(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * The toString function returns a String representing the information stored in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the `DukeObject`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the String representation of the object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * The toDisplayString function returns a String formatted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * for pretty printing to the GUI / Display."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the String in pretty print format for display"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public abstract String toDisplayString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * The toReportString function returns a String formatted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * to be used in a Report about the relevant DukeObject."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the String in Report format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public abstract String toReportString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 45
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Event with Reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name description of event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time start time of event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endTime end time of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder reminder for event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventTask(String name, LocalDateTime time, LocalDateTime endTime, Reminder reminder) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, time, reminder);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Events without Reminders."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name description of event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at start time of event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endTime end time of event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventTask(String name, LocalDateTime at, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, at);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    String getEndTime() throws DateTimeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return endTime.format(getPatDatetimeDisplay());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toData() + \"\\t\" + endTime.format(getPatDatetime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() throws DateTimeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[\" + type + \"]\" + super.toString() + \" (at: \" + getTime() + \" - \" + getEndTime() + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + type + \"]\" + super.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Evidence.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * Abstraction of evidence constituting a medical diagnosis."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * An Evidence object corresponds to the notes of the doctor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * on a piece of medical evidence as well as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * an integer between 1-4 representing the priority or significance of the evidence."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * Attributes:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * - name: information on the evidence"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * - impression: the impression object the evidence is tagged to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " * - priority: the priority level of the evidence"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public abstract class Evidence extends DukeData {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Evidence(String name, Impression impression, int priority) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int updatePriority(int priorityVal) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (priorityVal \u003e\u003d 0 \u0026\u0026 priorityVal \u003c 5) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            super.setPriority(priorityVal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return super.getPriority();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"The priority must be within 0 to 4!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 31
    }
  },
  {
    "path": "src/main/java/duke/task/GsonStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class GsonStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private final File jsonFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private HashMap\u003cString, Patient\u003e patientMap \u003d new HashMap\u003cString, Patient\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Looks if a Json file exists at the specified filepath and creates one if it does not exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeFatalException If data file cannot be setup."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public GsonStorage(String path) throws DukeFatalException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        File dataDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            dataDir.mkdir();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        filePath \u003d path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        jsonFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!jsonFile.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                if (!jsonFile.createNewFile()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    throw new IOException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            } catch (IOException excp) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                throw new DukeFatalException(\"Unable to setup data file, try checking your permissions?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Loads all the patients in the Jsonfilen to the patient hashmap for quick patient lookup (Deserialization)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeFatalException If data file cannot be setup."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void loadPatientHashMap() throws DukeFatalException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            String json \u003d Files.readString(Paths.get(filePath), StandardCharsets.US_ASCII);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            Patient[] patientList \u003d new Gson().fromJson(json, Patient[].class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                addPatientToMap(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (IOException excp) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            throw new DukeFatalException(\"Unable to load data file, try checking your permissions?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates a list with the patients in the patient hash map and add the lists json representation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * to the json file (Serialization)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeFatalException If the file writer cannot be setup."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void writeJsonFile() throws DukeFatalException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        ArrayList\u003cPatient\u003e patientArrList \u003d new ArrayList\u003cPatient\u003e(patientMap.values());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(jsonFile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            fileWriter.write(new Gson().toJson(patientArrList));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            throw new DukeFatalException(\"Unable to write data! Some data may have been lost,\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Adds a patient object to the hash map with all the patients - used when testing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void addPatientToMap(Patient patient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        patientMap.put(patient.getName(), patient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Patient getPatient(String name) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return patientMap.get(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Clears the json file and the paitent hash map - used when testing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void resetAllData() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(jsonFile);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        patientMap.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 102
    }
  },
  {
    "path": "src/main/java/duke/task/Impression.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Impression extends DukeObject {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private ArrayList\u003cEvidence\u003e evidences;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private ArrayList\u003cTreatment\u003e treatments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents the impression a doctor has about a Patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * An Impression object corresponds to the impression a Doctor has of a patient’s Condition,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the impression, the description of an impression and a list of Evidences"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * that led to the impression as well as a Treatment list with the treatments determined by a Doctor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * It also has a handler to the Patient it is observed about."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - name: the name of the impression"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - description: the description of the patient"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - evidence: the list of evidences contributing to the impression"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - treatments: the list of treatments determined by a doctor to deal with the impression"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - patient: the Patient it is tagged to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Impression(String name, String description, String patientName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.evidences \u003d new ArrayList\u003cEvidence\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.treatments \u003d new ArrayList\u003cTreatment\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This find function returns a list of all DukeObjs related to the impression containing the search term."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param searchTerm String to be used to filter the DukeObj"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the list of DukeObjs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public ArrayList\u003cDukeObject\u003e find(String searchTerm) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        ArrayList\u003cDukeObject\u003e searchResult \u003d new ArrayList\u003cDukeObject\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        for (Evidence evidence : this.evidences) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            if (evidence.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                searchResult.add(evidence);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        for (Treatment treatment : this.treatments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            if (treatment.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                searchResult.add(treatment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"Can\u0027t find any matching tasks!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return searchResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This addNewEvidence function adds a new evidence to the evidence list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param newEvidence the evidence to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the Evidence added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Evidence addNewEvidence(Evidence newEvidence) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.evidences.add(newEvidence);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return newEvidence;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This deleteEvidence function deletes an evidence at the specified index from the evidence list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the evidence"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the deleted Evidence"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Evidence deleteEvidence(int idx) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.evidences.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            Evidence evidence \u003d this.evidences.get(idx);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            this.evidences.remove(idx);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return evidence;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This getEvidence function returns the evidence from the evidence list at the specified index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the evidence"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the evidence specified by the index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Evidence getEvidence(int idx) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.evidences.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return this.evidences.get(idx);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Adds a new treatment to the treatment list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param newTreatment the treatment to be added"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the treatment added"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Treatment addNewTreatment(Treatment newTreatment) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.treatments.add(newTreatment);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return newTreatment;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This deleteTreatment function deletes a treatment at the specified index from the treatment list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the treatment"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the deleted treatment"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Treatment deleteTreatment(int idx) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.treatments.size()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            Treatment treatment \u003d this.treatments.get(idx);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            this.treatments.remove(idx);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return treatment;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This getTreatment function returns the treatment from the treatment list at the specified index."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the treatment"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the treatment specified by the index"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Treatment getTreatment(int idx) throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.treatments.size()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return this.treatments.get(idx);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public String getPatient() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public ArrayList\u003cEvidence\u003e getEvidences() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return evidences;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public ArrayList\u003cTreatment\u003e getTreatments() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return treatments;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 5,
      "JeremyKwok": 172
    }
  },
  {
    "path": "src/main/java/duke/task/Investigation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Investigation extends Treatment {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents the investigation needed to investigate an impression the Doctor has about a patient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Investigation object corresponds to the investigation a doctor needs to better understand the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * signs and symptoms of a Patient, the impression that led to that particular investigation being necessary,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the status of the treatment, a description of the status, a summary of why the investigation is needed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * as well as an integer between 1-4 representing the priority or significance of the investigation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param name the investigation needed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param impression the impression object the investigation is tagged to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param priority the priority level of the investigation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param status the current status of the investigation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param statusArr description of the status tagged to this investigation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param summary description of the investigation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Investigation(String name, Impression impression, int priority,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                         int status, String[] statusArr, String summary) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority, status, statusArr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This toResult function returns the result or conclusion from the investigation done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param resultName name of result"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param resultPriority importance of the result between 1 to 4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param resultSummary description of the result"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the result object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Result toResult(String resultName, int resultPriority, String resultSummary) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        //String resultName \u003d \"Result of \" + this.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        //String resultSummary \u003d this.summary;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        //int resultPriority \u003d this.getPriority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        Result newResult \u003d new Result(resultName, this.getImpression(), resultPriority, resultSummary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return newResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setSummary(String summary) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Medicine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Medicine extends Treatment {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String dose;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents the medicine needed to treat a symptom or impression of a patient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Medicine object corresponds to the medicine prescribed by a doctor to treat the signs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * and symptoms of a Patient, the impression that led to that particular medicine being necessary,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the status of the treatment, a description of the status, the dosage, start date, duration of the treatment"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * as well as an integer between 1-4 representing the priority or significance of the investigation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param name the medicine needed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param impression the impression object the medicine is tagged to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param priority the priority level of the medicine"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param status the current status of the medicine"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param statusArr description of the status tagged to this medicine"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param dose the dosage of the medicine needed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param startDate the starting date when the patient should be on the medicine"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param duration the duration the patient needs to take the medicine"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Medicine(String name, Impression impression, int priority, int status, String[] statusArr,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                    String dose, String startDate, String duration) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority, status, statusArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.dose \u003d dose;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getDose() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return dose;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setDose(String dose) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.dose \u003d dose;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setDuration(String duration) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Observation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Observation extends Evidence {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private boolean isObjective;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents observations of a doctor about a patient."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * An Observation object corresponds to the observations of the doctor about the symptoms of a Patient,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the information that led to that particular observation, as well as an integer between 1-4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * representing the priority or significance of the evidence."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param name information on the observation / symptom"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param impression the impression object the evidence is tagged to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param summary a summary of what led to the observation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param isObjective whether the observation has physical evidence or is a symptom reported by the patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param priority the priority level of the evidence"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Observation(String name, Impression impression, int priority, String summary, boolean isObjective) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.isObjective \u003d isObjective;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public boolean isObjective() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return isObjective;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setObjective(boolean objective) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        isObjective \u003d objective;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setSummary(String summary) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Patient extends DukeObject {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int bedNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String allergies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private Impression priDiagnosis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private ArrayList\u003cImpression\u003e impressions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String history;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents the patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Patient object corresponds to the biometric information of a patient,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * patient details, medical history, the impressions the doctor has about a patient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - name: the name of the patient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - bedNo: the bed number of the patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - height: the height of the patient"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - weight: the weight of the patient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - age: the age of the patient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - number: the contact details of a patient\u0027s NOK"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - address: the residential address of a patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - history: the medical history of a patient"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - priDiagnosis: the chief complaint or most serious impression of a patient"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - allergies: the Food and Drug allergies a patient has"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - impression: the list of all impressions of a patient"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Patient(String name, int bedNo, String allergies) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.bedNo \u003d bedNo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.priDiagnosis \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.impressions \u003d new ArrayList\u003cImpression\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.height \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.weight \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.age \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.number \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.history \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This discharge function runs the procedure to discharges a patient from the hospital."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Todo write the function"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void discharge() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This addNewImpression function adds a new impression to the impressions list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param newImpression the impression to be added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the Impression newly added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Impression addNewImpression(Impression newImpression) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.impressions.add(newImpression);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return newImpression;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This deleteImpression function deletes an impression at the specified index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * from the impressions list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the impression"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the Impression of the deleted Impression"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Impression deleteImpression(int idx) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.impressions.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            Impression imp \u003d this.impressions.get(idx);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            this.impressions.remove(idx);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return imp;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This getImpression function returns the impression from the impressions list at the specified index."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the impression"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return Impression the impression specified by the index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Impression getImpression(int idx) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.impressions.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return this.impressions.get(idx);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Sets the Primary Diagnosis of the patient specified by the index chosen."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param idx index of the impression"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setPriDiagnosis(int idx) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.impressions.size()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            this.priDiagnosis \u003d this.impressions.get(idx);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * This function find returns a list of all DukeObjs"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * with names related to the patient containing the search term."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param searchTerm String to be used to filter the DukeObj"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @return the list of DukeObjs"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public ArrayList\u003cDukeObject\u003e find(String searchTerm) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        ArrayList\u003cDukeObject\u003e searchResult \u003d new ArrayList\u003cDukeObject\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        for (Impression imp : this.impressions) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            if (imp.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                searchResult.add(imp);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"Can\u0027t find any matching tasks!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return searchResult;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return getName() + \" \" +  getClass(); // change back to null later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // Todo"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getBedNo() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return bedNo;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public ArrayList\u003cImpression\u003e getImpressions() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return impressions;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getAllergies() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return allergies;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setAllergies(String allergies) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Impression getPriDiagnosis() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return priDiagnosis;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getWeight() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setWeight(int weight) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setNumber(int number) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getHistory() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return history;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setHistory(String history) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "JeremyKwok": 219
    }
  },
  {
    "path": "src/main/java/duke/task/Plan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Plan extends Treatment {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents the Plan devised by the doctor to treat a symptom or impression of a patient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Plan object corresponds to the plan devised by a doctor to treat the signs and symptoms of a Patient,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the impression that led to that particular plan being necessary, the status of the treatment,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * a description of the status, the summary of the plan as well as an integer between 1-4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * representing the priority or significance of the plan."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param name the generic plan name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param impression the impression object the plan is tagged to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param priority the priority level of the plan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param status the current status of the plan"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param statusArr description of the status tagged to this plan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param summary the summary of what the plan entails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Plan(String name, Impression impression, int priority, int status, String[] statusArr, String summary) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority, status, statusArr);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setSummary(String summary) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Result.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public class Result extends Evidence {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Represents results of an investigation based on the treatment prescribed for a patient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Result object corresponds to the result of an investigation into the symptoms of a Patient,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the particular impression, as well as an integer between 1-4 representing the priority"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * or significance of the result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - name: the result"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - impression: the impression object the result is tagged to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - summary: a summary of the result"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - priority: the priority level of the evidence"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Result(String name, Impression impression, int priority, String summary) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String toReportString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setSummary(String summary) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Highest-level abstract class for Task objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected char type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        reminder \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Task with Reminder."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name     Description of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder Reminder to be added to the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name, Reminder reminder) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks a Task as completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If Task has already been completed previously."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You already did that task!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            reminder \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the data about the task for display to the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Display-formatted task description."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String remind \u003d \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            remind \u003d reminder.toString() + remind;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + (isDone ? \"Y\" : \"N\") + \"]\" + remind + name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the data about the task to write to the data file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Data-formatted (tab-separated) task description."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String remind \u003d \"-\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            remind \u003d reminder.toData();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return type + \"\\t\" + (isDone ? \"1\" : \"0\") + \"\\t\" + remind + \"\\t\" + name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set Reminder for Task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder Reminder to be added to the Task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If Task has already been completed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminder(Reminder reminder) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"This task has already been completed! I can\u0027t set a reminder for it.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the time that the task should be snoozed until."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newDateTime The new LocalDateTime to be assigned to the task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If the user tries to snooze a task that is not timed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeTime(LocalDateTime newDateTime) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeException(\"Only timed tasks can be snoozed\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }    // might be better to just define changeTime in TimedTask instead but I could not get it to work?"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 5,
      "-": 113
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // TSV files will have one entry per line, tabs disallowed in input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new TaskList, loading data from the Storage object provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object pointing to the TSV file containing the data to load."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeResetException If file is corrupted or the data has been edited to be unreadable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeFatalException If unable to write data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(Storage storage) throws DukeResetException, DukeFatalException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList \u003d storage.parseTaskFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new, empty TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the string representation of each task, numbering them from first added to last, and returns this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * list as a String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String representation of all tasks, numbered chronologically."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If there are no tasks yet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listTasks() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You don\u0027t have any tasks yet!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder taskListBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; ++i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Task currTask \u003d taskArrList.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListBuilder.append(System.lineSeparator()).append(i + 1).append(\".\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(currTask.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskListBuilder.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the data representation of each task, for writing to the data file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Concatenated data representations of all tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFileStr() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder fileStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            fileStrBuilder.append(task.toData()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileStrBuilder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks a task as in the list as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be marked done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly completed task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String markDone(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Task currTask \u003d taskArrList.get(getTaskIdx(idxStr));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        currTask.markDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return currTask.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message, with the String representation of the newly added task, and a message"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         reporting the number of tasks in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String addTask(Task newTask) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.add(newTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly deleted task, and a message reporting the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *         number of tasks in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String deleteTask(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        int idx \u003d getTaskIdx(idxStr);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String delStr \u003d taskArrList.get(idx).toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.remove(idx);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return delStr;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the descriptions of all tasks whose names contain the searchTerm."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param searchTerm String to search through the tasks for."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Concatenated descriptions of matching tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String find(String searchTerm) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder searchBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                searchBuilder.append(System.lineSeparator()).append(i).append(\".\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        .append(task.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Can\u0027t find any matching tasks!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return searchBuilder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String to extract an integer, and checks if this integer is a valid index for the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr A String representing an integer, without leading/trailing spaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return An integer that is a valid index for an entry on the list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be parsed, or the integer is not a valid index"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTaskIdx(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (idxStr.matches(\"^\\\\d+$\")) { //if second arg is an integer"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            int idx \u003d Integer.parseInt(idxStr) - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c taskArrList.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                return idx;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You need to tell me what the number of the entry is!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the addition of a number of tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param addStr    The descriptions of the tasks, formatted with two spaces behind each task and a leading line"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     *                  separator."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskCount Number of tasks added."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the addition of one or more tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddReport(String addStr, long taskCount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addStr \u003d ((taskCount \u003d\u003d 1) ? \"Got it, I\u0027ve added this task:\" + addStr :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Got it, I\u0027ve added these \" + taskCount + \" tasks:\" + addStr);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return addStr + System.lineSeparator() + getTaskCountStr();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the deletion of a number of tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param delStr    The descriptions of the tasks, formatted with two spaces behind each task and a leading line"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     *                  separator."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskCount Number of tasks added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the deletion of one or more tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDelReport(String delStr, long taskCount) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        delStr \u003d ((taskCount \u003d\u003d 1) ? \"Noted. I\u0027ve removed this task:\" + delStr :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Noted. I\u0027ve removed these \" + taskCount + \" tasks:\" + delStr);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return delStr + System.lineSeparator() + getTaskCountStr();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the number of tasks currently in the list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the current number of tasks."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getTaskCountStr() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskCountStr \u003d taskCount + ((taskCount \u003d\u003d 1) ? \" task\" : \" tasks\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Now you have \" + taskCountStr + \" in the list.\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Reports the schedule of the user on a specified date."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @return Concatenated data representations of all scheduled tasks on the specified date."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeException If the user has no scheduled tasks on the specified date."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public String listSchedule(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        List\u003cTimedTask\u003e timedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        for (Task currTask : taskArrList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            // TODO: Code smell"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            if (!currTask.isDone() \u0026\u0026 currTask instanceof TimedTask) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                LocalDate taskDate \u003d ((TimedTask) currTask).getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                if (taskDate.isEqual(date)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    timedTaskList.add((TimedTask) currTask);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Collections.sort(timedTaskList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        StringBuilder scheduleBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        int scheduleCount \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        for (Task timedTask : timedTaskList) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            scheduleCount \u003d scheduleCount + 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            scheduleBuilder.append(System.lineSeparator()).append(scheduleCount).append(\".\")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    .append(timedTask.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (scheduleCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            throw new DukeException(\"You have no tasks due on \" + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    + \"!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return scheduleBuilder.toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that indicates if snooze was successful."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the tasks to be snoozed index in the list of all tasks"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param datetime the new time that the task will be snoozed to"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return message to user that states that the snooze was successful"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the event of a invalid snooze input"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public String snooze(int index, LocalDateTime datetime) throws DukeException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.get(index).changeTime(datetime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"The task have been snoozed;\\n\\t\" + taskArrList.get(index);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a reminder for a task in the list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr   The argument given by the user to identify the task."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder The reminder to set for the task."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly added reminder."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public String setReminder(String idxStr, Reminder reminder) throws DukeException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Task currTask \u003d taskArrList.get(getTaskIdx(idxStr));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        currTask.setReminder(reminder);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return currTask.toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the string representation of each reminder, and returns this list as a String."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String representation of all reminders, numbered chronologically."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listReminders() throws DukeException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder reminderListBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        int reminderCount \u003d 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task currTask : taskArrList) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            Reminder currReminder \u003d currTask.getReminder();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            if (currReminder !\u003d null \u0026\u0026 currReminder.getDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                reminderCount \u003d reminderCount + 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                reminderListBuilder.append(System.lineSeparator()).append(reminderCount).append(\".\")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                        .append(currTask.toString());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminderCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You have no reminders.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderListBuilder.toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 49,
      "aquohn": 5,
      "-": 230
    }
  },
  {
    "path": "src/main/java/duke/task/TimedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public abstract class TimedTask extends Task implements Comparable\u003cTimedTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME_DISPLAY \u003d DateTimeFormatter.ofPattern(\"eee, d MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    TimedTask(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    TimedTask(String name, LocalDateTime time, Reminder reminder) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, reminder);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter getPatDatetime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return PAT_DATETIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter getPatDatetimeDisplay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return PAT_DATETIME_DISPLAY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toData() + \"\\t\" + time.format(PAT_DATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String getTime() throws DateTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return time.format(PAT_DATETIME_DISPLAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public int compareTo(TimedTask o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return getDateTime().compareTo(o.getDateTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeTime(LocalDateTime newTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d newTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // --Commented out by Inspection START (03/09/2019 11:57):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static DateTimeFormatter getDisplayFormatter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return PAT_DATETIME_DISPLAY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // --Commented out by Inspection STOP (03/09/2019 11:57)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 11,
      "aquohn": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Treatment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "public abstract class Treatment extends DukeData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private int status;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    private String[] statusArr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Abstraction of the actions taken to treat an impression the Doctor has about a patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * A Treatment object corresponds to what actions the doctor is taking to treat the symptoms of a Patient,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * the information that led to that particular treatment, the status of the treatment,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * as well as an integer between 1-4 representing the priority or significance of the evidence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Attributes:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - name: the treatment given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - impression: the impression object the treatment is tagged to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - status: the current status of the treatment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - statusArr: description of the status tagged to this treatment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * - priority: the priority level of the treatment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public Treatment(String name, Impression impression, int priority, int status, String[] statusArr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        super(name, impression, priority);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.statusArr \u003d statusArr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int updatePriority(int priorityVal) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        if (priorityVal \u003e\u003d 0 \u0026\u0026 priorityVal \u003c 5) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            super.setPriority(priorityVal);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            return super.getPriority();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "            throw new DukeException(\"The priority must be within 0 to 4!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * Updates status of the observation, i.e. the stage of completion"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     * @param int the integer value of the status"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void updateStatus(int statusIdx, String[] statusArr) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        setStatus(statusIdx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        setStatusArr(statusArr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public int getStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setStatus(int status) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public String[] getStatusArr() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        return statusArr;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    public void setStatusArr(String[] statusArr) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "        this.statusArr \u003d statusArr;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyKwok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyKwok": 62
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeCore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.gui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class CommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    protected static DukeCore core;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected static ByteArrayOutputStream testOut \u003d new ByteArrayOutputStream(); //stores printed output"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected static PrintStream testPrint \u003d new PrintStream(testOut); //System.out replacement, prints to testOut"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Create data directory if necessary and use a test task file to create test DukeCore, with output directed to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * testOut."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public static void setupCore() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        File dataDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!dataDir.exists() \u0026\u0026 !dataDir.mkdir()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Could not create data directory!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Gui ui \u003d new Gui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            core \u003d new DukeCore(new Storage(\"data\" + File.separator + \"test.tsv\"), ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            core.storage.writeTaskFile(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Could not setup storage for testing!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reset taskList and testOut, and flush the testPrint stream after each test is done with them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        core.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        testPrint.flush();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        testOut.reset();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes testing data after test is completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearTestData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        File testData \u003d new File(\"data\" + File.separator + \"test.tsv\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!testData.delete()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to delete test data file!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 6,
      "aquohn": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/GsonStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.task.GsonStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.task.Impression;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.task.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * JUnit class testing the class GsonStorage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class GsonStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private String filePath \u003d \"data/patients.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private GsonStorage gsonStorage \u003d new GsonStorage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Patient dummy1 \u003d new Patient(\"dummy1\", 100, \"nuts\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Patient dummy2 \u003d new Patient(\"dummy2\", 200, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Patient dummy3 \u003d new Patient(\"dummy3\", 300, \"cats\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private String expected \u003d \"[{\\\"bedNo\\\":100,\\\"allergies\\\":\\\"nuts\\\",\\\"impressions\\\":[],\\\"height\\\":0,\\\"we\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            + \"ight\\\":0,\\\"age\\\":0,\\\"number\\\":0,\\\"name\\\":\\\"dummy1\\\"},{\\\"bedNo\\\":200,\\\"impressions\\\":[],\\\"heig\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            + \"ht\\\":0,\\\"weight\\\":0,\\\"age\\\":0,\\\"number\\\":0,\\\"name\\\":\\\"dummy2\\\"},{\\\"bedNo\\\":300,\\\"allergies\\\":\\\"ca\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            + \"ts\\\",\\\"impressions\\\":[],\\\"height\\\":0,\\\"weight\\\":0,\\\"age\\\":0,\\\"number\\\":0,\\\"name\\\":\\\"dummy3\\\"}]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    GsonStorageTest() throws DukeFatalException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.resetAllData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates a patient object and assign values to all of its attributes - used to test if the nesting works."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Patient createComplexPatient() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Patient complexPatient \u003d new Patient(\"Complexia\", 100, \"cookies\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.addNewImpression(new Impression(\"Afraid\", \"bit me\", complexPatient.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setPriDiagnosis(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setAllergies(\"dogs\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setHeight(124);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setWeight(250);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setAge(84);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setNumber(6582447);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setAddress(\"Broadway 12a\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        complexPatient.setHistory(\"Operated the left arm in 2014 and have been feeling weak ever since\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return complexPatient;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Compares all the attributes of two patients and returns true if they all are the same, otherwise it returns"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * false."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * TODO: compare impressions as well"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private boolean identical(Patient patient1, Patient patient2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (patient1.getBedNo() !\u003d patient2.getBedNo()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (!(java.util.Objects.equals(patient1.getAllergies(), patient2.getAllergies()))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (patient1.getHeight() !\u003d patient2.getHeight()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (patient1.getWeight() !\u003d patient2.getWeight()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (patient1.getAge() !\u003d patient2.getAge()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (patient1.getNumber() !\u003d patient2.getNumber()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else if (!(java.util.Objects.equals(patient1.getAddress(), patient2.getAddress()))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return java.util.Objects.equals(patient1.getHistory(), patient2.getHistory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests if patients are transformed from the json file to the hashmap properly."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void loadPatientHashMapTest() throws DukeFatalException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.resetAllData();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(new File(gsonStorage.getFilePath()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        fileWriter.write(expected);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.loadPatientHashMap();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertTrue(identical(gsonStorage.getPatient(\"dummy1\"), dummy1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertTrue(identical(gsonStorage.getPatient(\"dummy2\"), dummy2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertTrue(identical(gsonStorage.getPatient(\"dummy3\"), dummy3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates the Json representation of a dummy patient"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Then recreates the patient objects based on what is in the json file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * When the recreation is done it checks if the first patients are identical to the new ones."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void identicalDummyPatient() throws IOException, DukeException, DukeFatalException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.resetAllData();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.addPatientToMap(dummy1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.writeJsonFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.loadPatientHashMap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Patient dummyPatientRecreated \u003d gsonStorage.getPatient(dummy1.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        boolean equals \u003d identical(dummy1, dummyPatientRecreated);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertTrue(equals);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates the Json representation of a complex patient"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Then recreates the patient objects based on what is in the json file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * When the recreation is done it checks if the first patients are identical to the new ones."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void identicalComplexPatient() throws IOException, DukeException, DukeFatalException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.resetAllData();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Patient complexPatient \u003d createComplexPatient();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.addPatientToMap(complexPatient);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.writeJsonFile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.loadPatientHashMap();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Patient complexPatientRecreated \u003d gsonStorage.getPatient(\"Complexia\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        boolean equals \u003d identical(complexPatient, complexPatientRecreated);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertTrue(equals);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests if patients are transformed from the hashmap to the json file properly."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void writeJsonFileTest() throws DukeFatalException, IOException, DukeFatalException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.resetAllData();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.addPatientToMap(dummy1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.addPatientToMap(dummy2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.addPatientToMap(dummy3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        gsonStorage.writeJsonFile();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String json \u003d Files.readString(Paths.get(filePath), StandardCharsets.US_ASCII);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertEquals(expected, json);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 141
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    // TODO check whether every task can be detected"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    // TODO check if exception are thrown for incorrect input formats"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    //private Parser uut \u003d new Parser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommands_validCommands_correctCommandsReturned() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(uut.parse(\"list\").getClass(), ListCommand.class);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(uut.parse(\"todo JUnit tests\").getClass(), NewToDoCommand.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(uut.parse(\"event tutorial /at 12/09/2019 1400 /to 12/10/2019 1200\").getClass(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                        NewEventCommand.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       } catch (DukeException excp) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Exception thrown while extracting commands!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 6,
      "-": 13
    }
  },
  {
    "path": "src/test/java/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * JUnit class testing the class Reminder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class ReminderTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME_DISPLAY \u003d DateTimeFormatter.ofPattern(\"eee, d MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime reminderDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Reminder reminder \u003d new Reminder(reminderDateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the LocalDateTime object returned by getDatetime() called by the Reminder object with the LocalDateTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * object created in this JUnit class. Expect both objects to be equal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testGetDatetime_datetimeNow_correctDatetime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.getDateTime(), reminderDateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by toString() called by the Reminder object with the correct output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testToString_datetimeNow_correctOutput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.toString(), \"[R: \" + reminderDateTime.format(PAT_DATETIME_DISPLAY) + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by toData() called by the Reminder object with the correct output."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testToData_datetimeNow_correctOutput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.toData(), reminderDateTime.format(PAT_DATETIME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds tasks to an empty TaskList. This is executed before each JUnit test."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setupTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(\"JUnit tests\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime t \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        EventTask event \u003d new EventTask(\"tutorial\", t, t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineTask deadline \u003d new DeadlineTask(\"submission\", t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTasks_validTasks_successMessageReturned() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(\"JUnit tests\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime t \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EventTask event \u003d new EventTask(\"tutorial\", t, t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineTask deadline \u003d new DeadlineTask(\"submission\", t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(todo), 1).contains(\"1 task\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(event), 1).contains(\"2 tasks\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(deadline), 1).contains(\"3 tasks\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Total number of tasks added is not 3!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][N] JUnit tests\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"No tasks in the list after adding!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not listed correctly!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTasks_validIdx_successMessageReturned() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"2\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to find added tasks!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not deleted correctly!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test //also tests for failure of other \"getIdx\" tasks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTasks_invalidIdx_exceptionThrownAndListNotChanged() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"100\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][N] JUnit tests\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Task list empty after invalid deletion!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Task list modified by invalid deletion!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks_matchingTasks_matchingTasksReturned() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSearchResult \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"2.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSearchResult, taskList.find(\"u\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Failed to find tasks!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks_noMatchingTasks_exceptionThrown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.find(\"CS2113\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone_validIdx_tasksMarkedDone() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"1\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"2\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"3\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Not able to find tasks to mark as done!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][Y] JUnit tests\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][Y] tutorial (at: \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][Y] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Marking tasks as done somehow deleted all tasks in the list!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not correctly marked as done!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests listSchedule() with an empty list. Expect an exception to be thrown."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void listSchedule_emptyList_exceptionThrown() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e list.listSchedule(LocalDate.now()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests listSchedule() with a list of unscheduled and scheduled Tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Expect the uncompleted scheduled Tasks to be returned."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeException If there are no uncompleted scheduled Tasks present in the user\u0027s original Task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void listSchedule_scheduledTasks_scheduledTasksReturned() throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        LocalDate date \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime()).toLocalDate();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String expectedScheduleStr \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: Thu, 12 Sep 2019 2:00 PM \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"- Thu, 12 Sep 2019 2:00 PM)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"2.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertEquals(expectedScheduleStr, taskList.listSchedule(date));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        taskList.markDone(\"3\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        expectedScheduleStr \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: Thu, 12 Sep 2019 2:00 PM \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"- Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertEquals(expectedScheduleStr, taskList.listSchedule(date));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by setReminder() with the correct output."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal if validIdx is given."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminder_validIdx_successMessageReturned() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime datetime \u003d LocalDateTime.parse(\"18/09/2019 0200\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"1\", new Reminder(datetime));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 2:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            datetime \u003d LocalDateTime.parse(\"18/09/2019 0300\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"1\", new Reminder(datetime));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 3:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"3\", new Reminder(datetime));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 3:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][N][R: Wed, 18 Sep 2019 3:00 AM] \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"submission (by: Thu, 12 Sep 2019 2:00 PM)\", taskList.listTasks());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to find added tasks!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Reminder not set correctly!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    //code for debugging test outputs"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /*for (int i \u003d 0; i \u003c \u003cexpected\u003e.length(); ++i) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (i \u003e\u003d \u003cactual\u003e.length()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        char achar \u003d \u003cactual\u003e.charAt(i);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        char echar \u003d \u003cexpected\u003e.charAt(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if (achar !\u003d echar) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Found \" + achar + \", expected \" + echar);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 30,
      "-": 188
    }
  }
]
