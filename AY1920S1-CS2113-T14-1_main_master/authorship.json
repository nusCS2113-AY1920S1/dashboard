[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // mainClassName \u003d \"duke.DukeLauncher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "John Khoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "John Khoo": 18,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ArgCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "John Khoo"
        },
        "content": " * Abstract class for commands that involve an argument."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "John Khoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ArgCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String arg; //argument supplied to the command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String emptyArgMsg; //error message if the argument is empty"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parse the input string entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputStr The input provided by the user for this command, without the command keyword and stripped."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If the input string entered is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        arg \u003d inputStr.strip();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arg.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(emptyArgMsg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException, DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Command needs to parse argument first!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 2,
      "John Khoo": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Cmd.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// enum for generating hashmap of strings to commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Maintains the associations between command keywords and commands (e.g. \"list\" -\u003e ListCommand). For use in parsing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public enum Cmd {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    LIST(\"list\") {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    BYE(\"bye\") {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    DONE(\"done\") {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    TODO(\"todo\") {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewToDoCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    EVENT(\"event\") {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewEventCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    DLINE(\"deadline\") {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewDeadlineCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    RECUR(\"recurring\") {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewRecurringTaskCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    DEL(\"delete\") {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    FIND(\"find\") {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    VIEW(\"view\") {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            return new ViewCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    SNOOZE(\"snooze\") {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SnoozeCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    REMIND(\"remind\") {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewReminderCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    FORP(\"fixedduration\") {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewFixedDurationCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    BETWN(\"doin\") {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new NewDoWithinPeriodCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String cmdStr;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the Cmd enum instance and associates the specified keyword with it."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmdStr The keyword to be associated with the specified task type."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    Cmd(final String cmdStr) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cmdStr \u003d cmdStr;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return cmdStr;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty (all parameters null) new Command of the specified type, to be loaded with data using its"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new Command of the specified type."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 5,
      "-": 100
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Highest-level abstract class for Command objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user\u0027s input and loads the parameters for this Command from it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputStr The input provided by the user for this command, without the command keyword and stripped."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If input was in the wrong format, contained invalid values, or was otherwise unable to be"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       parsed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the command using the parameters loaded with Command\u0027s parse method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ctx The DukeContext object for this command to operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If command fails to execute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DukeContext"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(DukeContext ctx) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the command using the parameters loaded with Command\u0027s parse method, but without any changes to storage and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * returning output that would ordinarily be printed, although not necessarily in the same format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ctx The DukeContext object for this command to operate on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing output would be printed during ordinary execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If command fails to execute."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DukeContext"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String silentExecute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/duke/command/MultiArgCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class for commands with multiple arguments split by a common delimiter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class MultiArgCommand extends ArgCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: figure out the proper Javadoc for these parameters"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String[] argv; //array to store multiple arguments"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected int argc; //minimum number of arguments expected"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String delim; //delimiter to split arguments by, may be a regex"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String invalidArgMsg; //message to display if insufficient arguments are supplied"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Splits the input string into the argv array based on the common delimiter delim, stripping the strings in argv."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If, after being split the number of arguments is less than argc, the required number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        //remove excess whitespace between commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        //primarily to prevent space-delimited commands from throwing errors if there are two spaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        argv \u003d arg.split(\"\\\\s*\" + delim + \"\\\\s*\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv.length \u003c argc) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(invalidArgMsg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c argv.length; ++i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            argv[i] \u003d argv[i].strip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/duke/command/NewEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new Event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewEventCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private LocalDateTime endDatetime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to create a new Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * argc will throw an error if the number of arguments is less than 3."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewEventCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewEventCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"(/at|/to)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid event! I need to know the date and time that it is /at.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the event!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1], argv[2] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            endDatetime \u003d LocalDateTime.parse(argv[2], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String addStr \u003d ctx.taskList.addTask(new EventTask(argv[0], taskDateTime, endDatetime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.ui.print(ctx.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String silentExecute(DukeContext ctx) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return ctx.taskList.addTask(new EventTask(argv[0], taskDateTime, endDatetime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/duke/command/NewFixedDurationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDurationTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class responsible for executing Command to create a new FixedDuration task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewFixedDurationCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private Duration period;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Command object that can be executed to create a new FixedDuration task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * argc will throw an error if the number of arguments is less than 2."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewFixedDurationCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"(/for)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"Invalid event! I need to know the duration it is /for.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the event!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1] as the period of time in the Duration data format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if duration is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.period \u003d Duration.parse(argv[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. P3DT3H4M5S parses as\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                    + \"3 Days, 3 Hours, 4 Minutes, 5 Seconds.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String addStr \u003d ctx.taskList.addTask(new FixedDurationTask(argv[0], this.period));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.ui.print(ctx.taskList.getAddReport(System.lineSeparator() + \"  \" + addStr, 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/duke/command/NewRecurringTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO This is complex enough that the generic Javadoc will not do"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewRecurringTaskCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new NewRecurringTaskCommand, setting the parameters for its inherited methods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewRecurringTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        delim \u003d \"/repeats\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the recurring tasks!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidArgMsg \u003d \"You didn\u0027t tell me how the task is supposed to recur!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser recurParser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NewTimedTaskCommand refCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            refCommand \u003d (NewTimedTaskCommand) recurParser.parse(argv[0]); //find out what kind of command to execute"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ClassCastException excp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Can\u0027t have that as a recurring task!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        TemporalUnit period \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int firstSpaceIdx \u003d argv[1].indexOf(\" \"); //index of first space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (firstSpaceIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You didn\u0027t tell me how frequently this task should recur!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (argv[1].substring(0, firstSpaceIdx)) { //extract period from frequency, use fallthrough to add synonyms"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            period \u003d ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"I don\u0027t know how frequently that\u0027s supposed to be!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        argv[1] \u003d argv[1].substring(firstSpaceIdx).strip(); //remove frequency descriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String countDelim \u003d \"/count\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String untilDelim \u003d \"/until\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "        long count \u003d 1; //for the task itself"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException invalidRecurrenceExcp \u003d new DukeException(\"You need to tell me how many times you want that \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"task to recur!\" + System.lineSeparator() + \"Either tell me to repeat it with e.g. \u0027/count 5\u0027 or\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"with e.g. \u0027/until \" + LocalDateTime.now().plus(3, period)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .format(TimedTask.getPatDatetime()) + \"\u0027.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "        if (argv[1].matches(\"^\" + countDelim + \"\\\\s+\\\\d+$\")) { //fixed counter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "            count +\u003d Long.parseLong(argv[1].substring(countDelim.length()).strip());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "        } else if (argv[1].matches(\"^\" + untilDelim + \"\\\\s+[A-Za-z 0-9/]+$\")) { //until date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime until \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                until \u003d LocalDateTime.parse(argv[1].substring(untilDelim.length()).strip(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                throw invalidRecurrenceExcp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "            count +\u003d period.between(refCommand.taskDateTime, until);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw invalidRecurrenceExcp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"This task will not recur!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //I\u0027m gonna do what\u0027s called a pro gamer move"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder addStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (long i \u003d 0; i \u003c count; ++i) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addStrBuilder.append(System.lineSeparator()).append(\"  \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(refCommand.silentExecute(ctx));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            refCommand.taskDateTime \u003d refCommand.taskDateTime.plus(1, period);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.ui.print(ctx.taskList.getAddReport(addStrBuilder.toString(), count));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "John Khoo": 6,
      "-": 88
    }
  },
  {
    "path": "src/main/java/duke/command/NewTimedTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class for Tasks that need to store a LocalDateTime object as part of their description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class NewTimedTaskCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected LocalDateTime taskDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * with argv[0] as the description and argv[1] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDateTime \u003d LocalDateTime.parse(argv[1], TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getPatDatetime()) + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * Class responsible for executing Command to view the scheduled Tasks on a specified date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class ViewCommand extends ArgCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private static final DateTimeFormatter PAT_DATE \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Creates a new Command object that can be executed to view the scheduled Tasks on a specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public ViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        emptyArgMsg \u003d \"Please give me a date to work with!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            date \u003d LocalDate.parse(arg, PAT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            throw new DukeException(\"Date must be given as e.g. \" + LocalDateTime.now().format(PAT_DATE) + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String scheduleStr \u003d \"Here are your tasks for \" + arg + \":\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        ctx.ui.print(scheduleStr + ctx.taskList.listSchedule(date));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 44
    }
  },
  {
    "path": "src/main/java/duke/gui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND_EMPTY \u003d \"There are no matching tasks in your list. \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please try another keyword.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FIND_NON_EMPTY \u003d \"Here are the matching task(s) in your list:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"You have currently no tasks in your list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_LIST_NON_EMPTY \u003d \"Here are the task(s) in your list:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_WELCOME_GREET \u003d \"Hello! I\u0027m Duke.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_WELCOME_QUESTION \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Highest-level abstract class for Task objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected char type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        reminder \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Task with Reminder."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name     Description of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder Reminder to be added to the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name, Reminder reminder) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks a Task as completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If Task has already been completed previously."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You already did that task!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            reminder \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the data about the task for display to the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Display-formatted task description."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String remind \u003d \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            remind \u003d reminder.toString() + remind;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + (isDone ? \"Y\" : \"N\") + \"]\" + remind + name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the data about the task to write to the data file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Data-formatted (tab-separated) task description."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String remind \u003d \"-\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            remind \u003d reminder.toData();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return type + \"\\t\" + (isDone ? \"1\" : \"0\") + \"\\t\" + remind + \"\\t\" + name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set Reminder for Task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder Reminder to be added to the Task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If Task has already been completed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminder(Reminder reminder) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"This task has already been completed! I can\u0027t set a reminder for it.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the time that the task should be snoozed until."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newDateTime The new LocalDateTime to be assigned to the task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If the user tries to snooze a task that is not timed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeTime(LocalDateTime newDateTime) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeException(\"Only timed tasks can be snoozed\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }    // might be better to just define changeTime in TimedTask instead but I could not get it to work?"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 5,
      "-": 113
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // TSV files will have one entry per line, tabs disallowed in input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new TaskList, loading data from the Storage object provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object pointing to the TSV file containing the data to load."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeResetException If file is corrupted or the data has been edited to be unreadable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeFatalException If unable to write data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(Storage storage) throws DukeResetException, DukeFatalException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList \u003d storage.parseTaskFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new, empty TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the string representation of each task, numbering them from first added to last, and returns this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * list as a String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String representation of all tasks, numbered chronologically."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If there are no tasks yet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listTasks() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You don\u0027t have any tasks yet!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder taskListBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; ++i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Task currTask \u003d taskArrList.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            taskListBuilder.append(System.lineSeparator()).append(i + 1).append(\".\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(currTask.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskListBuilder.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the data representation of each task, for writing to the data file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Concatenated data representations of all tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFileStr() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder fileStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            fileStrBuilder.append(task.toData()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileStrBuilder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks a task as in the list as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be marked done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly completed task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String markDone(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Task currTask \u003d taskArrList.get(getTaskIdx(idxStr));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        currTask.markDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return currTask.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message, with the String representation of the newly added task, and a message"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         reporting the number of tasks in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String addTask(Task newTask) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.add(newTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly deleted task, and a message reporting the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *         number of tasks in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String deleteTask(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        int idx \u003d getTaskIdx(idxStr);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String delStr \u003d taskArrList.get(idx).toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.remove(idx);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return delStr;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the descriptions of all tasks whose names contain the searchTerm."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param searchTerm String to search through the tasks for."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Concatenated descriptions of matching tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String find(String searchTerm) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder searchBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                searchBuilder.append(System.lineSeparator()).append(i).append(\".\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        .append(task.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Can\u0027t find any matching tasks!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return searchBuilder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String to extract an integer, and checks if this integer is a valid index for the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr A String representing an integer, without leading/trailing spaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return An integer that is a valid index for an entry on the list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be parsed, or the integer is not a valid index"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTaskIdx(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (idxStr.matches(\"^\\\\d+$\")) { //if second arg is an integer"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            int idx \u003d Integer.parseInt(idxStr) - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            if (idx \u003e\u003d 0 \u0026\u0026 idx \u003c taskArrList.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                return idx;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You need to tell me what the number of the entry is!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the addition of a number of tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "     * @param addStr    The descriptions of the tasks, formatted with two spaces behind each task and a leading line"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "     *                  separator."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskCount Number of tasks added."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the addition of one or more tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddReport(String addStr, long taskCount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addStr \u003d ((taskCount \u003d\u003d 1) ? \"Got it, I\u0027ve added this task:\" + addStr :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Got it, I\u0027ve added these \" + taskCount + \" tasks:\" + addStr);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return addStr + System.lineSeparator() + getTaskCountStr();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the deletion of a number of tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "     * @param delStr    The descriptions of the tasks, formatted with two spaces behind each task and a leading line"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "     *                  separator."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskCount Number of tasks added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the deletion of one or more tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDelReport(String delStr, long taskCount) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        delStr \u003d ((taskCount \u003d\u003d 1) ? \"Noted. I\u0027ve removed this task:\" + delStr :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Noted. I\u0027ve removed these \" + taskCount + \" tasks:\" + delStr);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return delStr + System.lineSeparator() + getTaskCountStr();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reports the number of tasks currently in the list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String reporting the current number of tasks."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getTaskCountStr() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskCountStr \u003d taskCount + ((taskCount \u003d\u003d 1) ? \" task\" : \" tasks\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Now you have \" + taskCountStr + \" in the list.\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Reports the schedule of the user on a specified date."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @return Concatenated data representations of all scheduled tasks on the specified date."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeException If the user has no scheduled tasks on the specified date."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public String listSchedule(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        List\u003cTimedTask\u003e timedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        for (Task currTask : taskArrList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            // TODO: Code smell"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            if (!currTask.isDone() \u0026\u0026 currTask instanceof TimedTask) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                LocalDate taskDate \u003d ((TimedTask) currTask).getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                if (taskDate.isEqual(date)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    timedTaskList.add((TimedTask) currTask);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        Collections.sort(timedTaskList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        StringBuilder scheduleBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        int scheduleCount \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        for (Task timedTask : timedTaskList) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            scheduleCount \u003d scheduleCount + 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            scheduleBuilder.append(System.lineSeparator()).append(scheduleCount).append(\".\")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    .append(timedTask.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (scheduleCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            throw new DukeException(\"You have no tasks due on \" + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                    + \"!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return scheduleBuilder.toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that indicates if snooze was successful."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the tasks to be snoozed index in the list of all tasks"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param datetime the new time that the task will be snoozed to"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return message to user that states that the snooze was successful"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the event of a invalid snooze input"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public String snooze(int index, LocalDateTime datetime) throws DukeException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        taskArrList.get(index).changeTime(datetime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"The task have been snoozed;\\n\\t\" + taskArrList.get(index);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a reminder for a task in the list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param idxStr   The argument given by the user to identify the task."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder The reminder to set for the task."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A success message with the String representation of the newly added reminder."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public String setReminder(String idxStr, Reminder reminder) throws DukeException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Task currTask \u003d taskArrList.get(getTaskIdx(idxStr));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        currTask.setReminder(reminder);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return currTask.toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Concatenates the string representation of each reminder, and returns this list as a String."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String representation of all reminders, numbered chronologically."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listReminders() throws DukeException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder reminderListBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        int reminderCount \u003d 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task currTask : taskArrList) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            Reminder currReminder \u003d currTask.getReminder();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "            if (currReminder !\u003d null \u0026\u0026 currReminder.getDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                reminderCount \u003d reminderCount + 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                reminderListBuilder.append(System.lineSeparator()).append(reminderCount).append(\".\")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                        .append(currTask.toString());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminderCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"You have no reminders.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderListBuilder.toString();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 49,
      "aquohn": 1,
      "John Khoo": 4,
      "-": 230
    }
  },
  {
    "path": "src/main/java/duke/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public abstract class TimedTask extends Task implements Comparable\u003cTimedTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME_DISPLAY \u003d DateTimeFormatter.ofPattern(\"eee, d MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    TimedTask(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    TimedTask(String name, LocalDateTime time, Reminder reminder) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, reminder);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter getPatDatetime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return PAT_DATETIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter getPatDatetimeDisplay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return PAT_DATETIME_DISPLAY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toData() + \"\\t\" + time.format(PAT_DATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected String getTime() throws DateTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return time.format(PAT_DATETIME_DISPLAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public int compareTo(TimedTask o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        return getDateTime().compareTo(o.getDateTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeTime(LocalDateTime newTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d newTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // --Commented out by Inspection START (03/09/2019 11:57):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static DateTimeFormatter getDisplayFormatter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return PAT_DATETIME_DISPLAY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // --Commented out by Inspection STOP (03/09/2019 11:57)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 11,
      "John Khoo": 1,
      "-": 51
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class CommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected static DukeContext ctx;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected static ByteArrayOutputStream testOut \u003d new ByteArrayOutputStream(); //stores printed output"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    protected static PrintStream testPrint \u003d new PrintStream(testOut); //System.out replacement, prints to testOut"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create data directory if necessary and use a test task file to create test DukeContext, with output directed to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * testOut."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupCtx() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        File dataDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        if (!dataDir.exists() \u0026\u0026 !dataDir.mkdir()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "            fail(\"Could not create data directory!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui(System.in, testPrint);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            ctx \u003d new DukeContext(new Storage(\"data\" + File.separator + \"test.tsv\"), ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ctx.storage.writeTaskFile(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Could not setup storage for testing!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reset taskList and testOut, and flush the testPrint stream after each test is done with them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ctx.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        testPrint.flush();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        testOut.reset();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes testing data after test is completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearTestData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        File testData \u003d new File(\"data\" + File.separator + \"test.tsv\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!testData.delete()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to delete test data file!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 5,
      "John Khoo": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/NewRecurringTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.NewRecurringTaskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewRecurringTaskCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String successStr \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "                    + System.lineSeparator() + \"    Got it, I\u0027ve added these 10 tasks:\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 18 Sep 2019 11:59 PM)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 25 Sep 2019 11:59 PM)\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 2 Oct 2019 11:59 PM)\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 9 Oct 2019 11:59 PM)\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 16 Oct 2019 11:59 PM)\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 23 Oct 2019 11:59 PM)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 30 Oct 2019 11:59 PM)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 6 Nov 2019 11:59 PM)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 13 Nov 2019 11:59 PM)\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "                    + System.lineSeparator() + \"      [D][N] submission (by: Wed, 20 Nov 2019 11:59 PM)\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "John Khoo"
        },
        "content": "                    + System.lineSeparator() + \"    Now you have 10 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRecurringTasks_countNumber_successMessageReturned() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NewRecurringTaskCommand uut \u003d new NewRecurringTaskCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly /count 9\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.execute(ctx);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Exception thrown on valid recurring task!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(successStr, testOut.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRecurringTasks_untilDate_successMessageReturned() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        NewRecurringTaskCommand uut \u003d new NewRecurringTaskCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/until 23/11/2019 1300\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.execute(ctx);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Exception thrown on valid recurring task!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(successStr, testOut.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO create unit tests for abstract Command classes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRecurringTasks_ambiguousOrMissingCount_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NewRecurringTaskCommand uut \u003d new NewRecurringTaskCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/until 23/11/2019 1300 /count 100\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/until 231119 1300\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/count -100\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/until 23/11/2019 1300 /until 23/11/2019 1500\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            uut.parse(\"deadline submission /by 18/09/2019 2359 /repeats weekly \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"/count 100 /count 10\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                uut.execute(ctx);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Parser failed to recognise valid command with \u0027/repeats\u0027!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Command failed to reject ambiguous count!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "John Khoo": 3,
      "-": 91
    }
  },
  {
    "path": "src/test/java/NewReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.NewReminderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * JUnit class testing the class NewReminderCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "public class NewReminderCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests parse() with valid input. Except test to be successful."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If the input specified is in an incorrect format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputs_validInputs_success() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        new NewReminderCommand().parse(\"remind 1 /after 18/09/2019 0200\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        //TODO: assert"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests parse() with invalid inputs. Expect exceptions to be thrown."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputs_invalidInputs_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind 1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind 1 /after\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind 1 /after 18/09/2019\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind 1 /after 0200\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new NewReminderCommand().parse(\"remind 1 18/09/2019 0200\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/ReminderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * JUnit class testing the class Reminder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Pang Jia Jun Vernon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class ReminderTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME_DISPLAY \u003d DateTimeFormatter.ofPattern(\"eee, d MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime reminderDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Reminder reminder \u003d new Reminder(reminderDateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the LocalDateTime object returned by getDatetime() called by the Reminder object with the LocalDateTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * object created in this JUnit class. Expect both objects to be equal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testGetDatetime_datetimeNow_correctDatetime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.getDateTime(), reminderDateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by toString() called by the Reminder object with the correct output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testToString_datetimeNow_correctOutput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.toString(), \"[R: \" + reminderDateTime.format(PAT_DATETIME_DISPLAY) + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by toData() called by the Reminder object with the correct output."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void testToData_datetimeNow_correctOutput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(reminder.toData(), reminderDateTime.format(PAT_DATETIME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds tasks to an empty TaskList. This is executed before each JUnit test."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setupTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(\"JUnit tests\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime t \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        EventTask event \u003d new EventTask(\"tutorial\", t, t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineTask deadline \u003d new DeadlineTask(\"submission\", t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTasks_validTasks_successMessageReturned() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(\"JUnit tests\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime t \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EventTask event \u003d new EventTask(\"tutorial\", t, t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineTask deadline \u003d new DeadlineTask(\"submission\", t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(todo), 1).contains(\"1 task\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(event), 1).contains(\"2 tasks\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(taskList.getAddReport(taskList.addTask(deadline), 1).contains(\"3 tasks\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Total number of tasks added is not 3!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][N] JUnit tests\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"No tasks in the list after adding!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not listed correctly!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTasks_validIdx_successMessageReturned() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"2\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to find added tasks!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not deleted correctly!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test //also tests for failure of other \"getIdx\" tasks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTasks_invalidIdx_exceptionThrownAndListNotChanged() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTask(\"100\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][N] JUnit tests\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Task list empty after invalid deletion!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Task list modified by invalid deletion!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks_matchingTasks_matchingTasksReturned() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSearchResult \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + System.lineSeparator() + \"2.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSearchResult, taskList.find(\"u\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Failed to find tasks!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks_noMatchingTasks_exceptionThrown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.find(\"CS2113\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone_validIdx_tasksMarkedDone() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"1\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"2\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.markDone(\"3\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Not able to find tasks to mark as done!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][Y] JUnit tests\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][Y] tutorial (at: \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][Y] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Marking tasks as done somehow deleted all tasks in the list!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Tasks not correctly marked as done!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests listSchedule() with an empty list. Expect an exception to be thrown."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void listSchedule_emptyList_exceptionThrown() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e list.listSchedule(LocalDate.now()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Tests listSchedule() with a list of unscheduled and scheduled Tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * Expect the uncompleted scheduled Tasks to be returned."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     * @throws DukeException If there are no uncompleted scheduled Tasks present in the user\u0027s original Task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    public void listSchedule_scheduledTasks_scheduledTasksReturned() throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        LocalDate date \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getPatDatetime()).toLocalDate();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        String expectedScheduleStr \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: Thu, 12 Sep 2019 2:00 PM \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"- Thu, 12 Sep 2019 2:00 PM)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"2.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertEquals(expectedScheduleStr, taskList.listSchedule(date));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        taskList.markDone(\"3\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        expectedScheduleStr \u003d System.lineSeparator() + \"1.[E][N] tutorial (at: Thu, 12 Sep 2019 2:00 PM \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "                + \"- Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "        assertEquals(expectedScheduleStr, taskList.listSchedule(date));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gowgos5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gowgos5"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the output returned by setReminder() with the correct output."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Expect them to be equal if validIdx is given."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminder_validIdx_successMessageReturned() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime datetime \u003d LocalDateTime.parse(\"18/09/2019 0200\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"1\", new Reminder(datetime));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 2:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            datetime \u003d LocalDateTime.parse(\"18/09/2019 0300\", TimedTask.getPatDatetime());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"1\", new Reminder(datetime));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 3:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                            + System.lineSeparator() + \"3.[D][N] submission (by: Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.listTasks());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.setReminder(\"3\", new Reminder(datetime));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(System.lineSeparator() + \"1.[T][N][R: Wed, 18 Sep 2019 3:00 AM] JUnit tests\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][N] tutorial (at: \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Thu, 12 Sep 2019 2:00 PM - Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][N][R: Wed, 18 Sep 2019 3:00 AM] \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"submission (by: Thu, 12 Sep 2019 2:00 PM)\", taskList.listTasks());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Unable to find added tasks!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Reminder not set correctly!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    //code for debugging test outputs"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /*for (int i \u003d 0; i \u003c \u003cexpected\u003e.length(); ++i) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (i \u003e\u003d \u003cactual\u003e.length()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        char achar \u003d \u003cactual\u003e.charAt(i);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        char echar \u003d \u003cexpected\u003e.charAt(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        if (achar !\u003d echar) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Found \" + achar + \", expected \" + echar);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gowgos5": 30,
      "-": 188
    }
  }
]
