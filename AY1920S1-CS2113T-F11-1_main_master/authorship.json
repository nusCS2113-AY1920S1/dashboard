[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    archiveBaseName \u003d \"spongeBob\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    archiveVersion \u003d \"1.2.1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-core\u0027, version: \u00272.9.10\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    compile \u0027com.opencsv:opencsv:5.0\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 1,
      "Tejasvas123": 27,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FileHandling storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerList lockers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor instantiates the Duke class by loading data from a file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filename stores the file name from which the data is being loaded."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String filename) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            storage \u003d new FileHandling(filename);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockers \u003d new LockerList(storage.retrieveData().getAllLockers());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockers \u003d new LockerList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function is responsible for executing various tasks/commands related to Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                c.execute(lockers, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function is responsible for instantiating Duke with the file name \"storeData.txt\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * storeData.txt is the file from which the data is loaded for the list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args contains the supplied command-line arguments as an array of String objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        new Duke(\"storeData.json\").run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 12,
      "-": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddBatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddBatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final List\u003cLocker\u003e batchOfLockers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddBatchCommand(List\u003cLocker\u003e batchOfLockers) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(batchOfLockers);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.batchOfLockers \u003d batchOfLockers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerList.areLockersPresent(batchOfLockers)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\"Duplicate entries not allowed. Serial number \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \" for every locker should be unique\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addAllLockersInList(batchOfLockers);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printBatch(batchOfLockers.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddLockerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Locker addLocker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddLockerCommand(Locker addLocker) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(addLocker);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.addLocker \u003d addLocker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerList.isPresentLocker(addLocker)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Duplicate entries not allowed. The serial number \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"should be unique.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addLocker(addLocker);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String lockerA \u003d addLocker.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printAddLocker(lockerList.getAllLockers(),lockerA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AssignLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.InUseLocker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AssignLockerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final List\u003cZone\u003e preferences;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final int FIRST_FREE_LOCKER \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates all the fields necessary for assigning a locker to a student."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param student stores the information ond details of the student"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate stores the starting date of the subscription"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate stores the ending date of the subscription"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param preferences  stores the preferences as a list of zones for the student"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AssignLockerCommand(Student student, LockerDate startDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                               LockerDate endDate, List\u003cZone\u003e preferences) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(preferences);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.preferences \u003d preferences;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d assignLockerToStudent(lockerList,ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printSuccessfulAllocation(lockerList.getLocker(storeIndex).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private int assignLockerToStudent(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker freeLocker \u003d getFreeLocker(lockerList,ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d lockerList.getIndexOfLocker(freeLocker);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        freeLocker.setStatusAsInUse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerAssignedToStudent \u003d getLockerToAssign(freeLocker);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addLockerInPosition(lockerAssignedToStudent,storeIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return storeIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getLockerToAssign(Locker freeLocker) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new InUseLocker(freeLocker.getSerialNumber(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                freeLocker.getAddress(),freeLocker.getZone(),freeLocker.getTag(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                student, startDate, endDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Predicate\u003cLocker\u003e findLockerBasedOnPreferences(Zone zone) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag checkTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return p -\u003e p.getTag().equals(checkTag)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 p.getZone().equals(zone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Predicate\u003cLocker\u003e findLockersInAnyZone() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag checkTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return p -\u003e p.getTag().equals(checkTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getFreeLocker(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (Zone zone: preferences) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            List\u003cLocker\u003e freeLockersInZone \u003d lockerList.getMatchingLockers("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    findLockerBasedOnPreferences(zone));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (freeLockersInZone.size() \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return freeLockersInZone.get(FIRST_FREE_LOCKER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //If the control reaches here, that means SpongeBob was unable to allocate"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //any Lockers in the given preferences and hence we will arbitrarily"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //assign any locker that is free"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e freeLockersInAnyZone \u003d lockerList.getMatchingLockers("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                findLockersInAnyZone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (freeLockersInAnyZone.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" There are no available lockers at the moment\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //We need to inform the user that a locker has been assigned not in the preferred"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //location"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showNoLockersFoundInPreferences();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return freeLockersInAnyZone.get(FIRST_FREE_LOCKER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 106
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.exitDuke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public abstract void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/CommandCheck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class CommandCheck {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int GET_FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static List\u003cLocker\u003e findLockersInAnyZone(LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag checkAvailableTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.getMatchingLockers(findLocker());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is ued to check if the given locker is already present in the lockerlist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stroes the serial number of the locker to be checked"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerList stores the lockerlist"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the user the locker is not present"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the locker is already present"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean isAlreadyPresent(SerialNumber serialNumber,LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if ((lockerList.getMatchingLockers(p -\u003e p.getSerialNumber().equals(serialNumber)))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                 .size() \u003e 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Duplicate entries are not allowed. All serial numbers\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \" must be unique\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static Predicate\u003cLocker\u003e findLocker() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag checkTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return p -\u003e p.getTag().equals(checkTag);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to return the locker details for a given serial number."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerList stores the current state of the locker list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker whose properties are to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *                    be extracted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the locker details"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there is no match for the serial number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Locker getLockerToEdit(LockerList lockerList,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                         SerialNumber serialNumber) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e listOfLockers;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        listOfLockers \u003d lockerList.getMatchingLockers(isMatchingSerialNumber(serialNumber));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (listOfLockers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" There are no lockers associated to the serial number entered\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return listOfLockers.get(GET_FIRST_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static Predicate\u003cLocker\u003e isMatchingSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return p -\u003e p.getSerialNumber().equals(serialNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteLockerCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteLockerCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int temp \u003d Integer.parseInt(splitInput.get(0)) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String lockerA \u003d lockerList.getLocker(temp).toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerList.deleteLocker(lockerList.getLocker(temp));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.deleteMessage(lockerList.getAllLockers(), lockerA);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(lockerList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"delete\\\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.InUseLocker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditLockerCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberOfLockerToEdit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditLocker editLocker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int GET_FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EDIT_LOCKER_ERROR \u003d \" The following constraints are to be satisfied\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" for editing locker states:\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 1. If a locker is currently not in the InUse state then its state cannot\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" be edited to InUse state\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 2. A locker currently in InUse state can only be changed to broken state\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 3. If a state change from InUse to Broken does take place then a new locker is\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" allocated to the student, if there are available locker at the moment.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 4. If there are no available lockers for the student, then his/hers subscription\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n is terminated.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This contructor instantiates the editLockerCommand object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editLocker stores the contents that are to be edited."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditLockerCommand(SerialNumber serialNumber,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                             EditLocker editLocker) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editLocker);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        serialNumberOfLockerToEdit \u003d serialNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editLocker \u003d new EditLocker(editLocker);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d editLockerDetails(lockerList,ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showSuccessfullyEdited(editedLocker.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker editLockerDetails(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToEdit \u003d CommandCheck.getLockerToEdit(lockerList,serialNumberOfLockerToEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d createEditedLocker(lockerToEdit,editLocker);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(editedLocker.getSerialNumber().equals(lockerToEdit.getSerialNumber()))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            CommandCheck.isAlreadyPresent(editedLocker.getSerialNumber(),lockerList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!validationChecks(lockerToEdit,editedLocker)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(EDIT_LOCKER_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (isOfTypeInUseLocker(lockerToEdit) \u0026\u0026 isOfTypeInUseLocker(editedLocker)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editedLocker \u003d getEditedLockerInUse(editedLocker);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (isOfTypeInUseLocker(lockerToEdit) \u0026\u0026 !isOfTypeInUseLocker(editedLocker)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            assignNewLocker(lockerToEdit, lockerList, ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addLockerInPosition(editedLocker,lockerList.getIndexOfLocker(lockerToEdit));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return editedLocker;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getEditedLockerInUse(Locker editedLocker) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert editedLocker instanceof InUseLocker;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new InUseLocker(editedLocker.getSerialNumber(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                editedLocker.getAddress(),editedLocker.getZone(),editedLocker.getTag(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ((InUseLocker) editedLocker).getStudent(),((InUseLocker) (editedLocker)).getStartDate(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ((InUseLocker) editedLocker).getEndDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void assignNewLocker(Locker lockerToEdit, LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit instanceof InUseLocker;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        InUseLocker inUseLocker \u003d ((InUseLocker) lockerToEdit);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e getFreeLockers \u003d CommandCheck.findLockersInAnyZone(lockerList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (getFreeLockers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.showNoAvailableLockers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Locker freeLocker \u003d getFreeLockers.get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            freeLocker.setStatusAsInUse();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int storeIndex \u003d lockerList.getIndexOfLocker(freeLocker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerList.addLockerInPosition(new InUseLocker(freeLocker.getSerialNumber(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    freeLocker.getAddress(),freeLocker.getZone(),freeLocker.getTag(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    inUseLocker.getStudent(),inUseLocker.getStartDate(),inUseLocker.getEndDate()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    storeIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.printSuccessfulAllocation(lockerList.getLocker(storeIndex).toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private boolean validationChecks(Locker lockerToEdit,Locker editedLocker) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag testInUse \u003d new Tag(Tag.IN_USE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag testBroken \u003d new Tag(Tag.BROKEN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerToEdit.getTag().equals(editedLocker.getTag())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (editedLocker.getTag().equals(testInUse)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerToEdit.getTag().equals(testInUse)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 !(editedLocker.getTag().equals(testBroken))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker createEditedLocker(Locker lockerToEdit,EditLocker editLocker) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber editedSerialNumber \u003d editLocker.getSerialNumber()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getSerialNumber());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address editedAddress \u003d editLocker.getAddress().orElse(lockerToEdit.getAddress());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone editedZone \u003d editLocker.getZone().orElse(lockerToEdit.getZone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag editedTag \u003d editLocker.getCondition().orElse(lockerToEdit.getTag());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Locker(editedSerialNumber,editedAddress,editedZone,editedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private boolean isOfTypeInUseLocker(Locker locker) throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (locker.getTag().equals(new Tag(Tag.IN_USE))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditLocker {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLocker() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * A copy constructor used to copy the contents of the edited locker."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLocker(EditLocker copyEditLocker) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setSerialNumber(copyEditLocker.serialNumber);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setAddress(copyEditLocker.address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setZone(copyEditLocker.zone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setCondition(copyEditLocker.tag);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return (serialNumber !\u003d null || address !\u003d null"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    || zone !\u003d null || tag !\u003d null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setCondition(Tag tag) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cSerialNumber\u003e getSerialNumber() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(serialNumber);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cTag\u003e getCondition() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 199
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditUsageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.InUseLocker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.MatricNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.ParserCheck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditUsageCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberToEdit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditStudent editStudent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditLockerDate editDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the edit usage command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker to edit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editStudent stores the details of the student to be edited"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editDate stores the details of the dates to be edited for usage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditUsageCommand(SerialNumber serialNumber,EditStudent editStudent,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                            EditLockerDate editDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editStudent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberToEdit \u003d serialNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editStudent \u003d new EditStudent(editStudent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editDate \u003d new EditLockerDate(editDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d editUsageDetails(lockerList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showSuccessfullyEdited(editedLocker.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker editUsageDetails(LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToEdit \u003d CommandCheck.getLockerToEdit(lockerList,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                serialNumberToEdit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d lockerList.getIndexOfLocker(lockerToEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag tag \u003d new Tag(Tag.IN_USE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!lockerToEdit.getTag().equals(tag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" You are allowed to edit usage of only type In-Use Locker\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d getEditedLocker((InUseLocker)lockerToEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addLockerInPosition(editedLocker,storeIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return editedLocker;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getEditedLocker(InUseLocker lockerToEdit) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(lockerToEdit,editStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate editedStartDate \u003d createEditedStartDate(lockerToEdit,editDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate editedEndDate \u003d createEditedEndDate(lockerToEdit,editDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ParserCheck.parseDifferenceBetweenStartAndEndDate(editedStartDate,editedEndDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new InUseLocker(lockerToEdit.getSerialNumber(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerToEdit.getAddress(),lockerToEdit.getZone(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerToEdit.getTag(),editedStudent,editedStartDate,editedEndDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Student createEditedStudent(InUseLocker lockerToEdit,EditStudent editStudent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Name editedName \u003d editStudent.getName()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getStudent().getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Major editedMajor \u003d editStudent.getMajor()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getStudent().getMajor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Email editedEmail \u003d editStudent.getEmail()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getStudent().getEmail());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MatricNumber editedMatricNumber \u003d editStudent.getMatricNumber()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getStudent().getMatricNumber());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Student(editedName,editedMatricNumber,editedEmail,editedMajor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerDate createEditedStartDate(InUseLocker lockerToEdit, EditLockerDate editDate) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate((editDate.getStartDate()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getStartDate())).getDate());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerDate createEditedEndDate(InUseLocker lockerToEdit, EditLockerDate editDate) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate((editDate.getEndDate()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getEndDate())).getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditStudent {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditStudent() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * This is a copy constructor used for editing student details."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * @param copyStudent stores the fields that are to be edited"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditStudent(EditStudent copyStudent) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setName(copyStudent.name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setMatricNumber(copyStudent.matricNumber);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setEmail(copyStudent.email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setMajor(copyStudent.major);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return name !\u003d null || email !\u003d null || major !\u003d null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    || matricNumber !\u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cMatricNumber\u003e getMatricNumber() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(matricNumber);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cMajor\u003e getMajor() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditLockerDate {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private LockerDate startDate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private LockerDate endDate;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLockerDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * A copy constructor to store the details of the edited usage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * @param copyEditDate stores the details that are to be edited"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLockerDate(EditLockerDate copyEditDate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setStartDate(copyEditDate.startDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setEndDate(copyEditDate.endDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return startDate !\u003d null || endDate !\u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setStartDate(LockerDate startDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setEndDate(LockerDate endDate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cLockerDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cLockerDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 200
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExportLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.storage.OpenCsv;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportLockerCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        ui.exportMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        OpenCsv.exportLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printList(lockerList.getLockerList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RemindersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class RemindersCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 13
    }
  },
  {
    "path": "src/main/java/duke/models/LockerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cLocker\u003e lockerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList(List\u003cLocker\u003e lockerList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.lockerList \u003d lockerList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isPresentLocker(Locker newLocker) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .anyMatch(locker -\u003e locker.isPresent(newLocker));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Used to check if the lockers are already present in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param newLockers list of lockers to be checked"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if atleast one of the locker is present"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean areLockersPresent(List\u003cLocker\u003e newLockers) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(newLockers);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (Locker newLocker: newLockers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (isPresentLocker(newLocker)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addLocker(Locker locker) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.add(locker);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addLockerInPosition(Locker locker, int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.set(index,locker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addAllLockersInList(List\u003cLocker\u003e lockers) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addAll(lockers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteLocker(Locker locker) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.remove(locker);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Locker getLocker(int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int getIndexOfLocker(Locker locker) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.indexOf(locker);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int numLockers() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * returns all the lockers that match a given property."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param isMatching stores the predicate for matching"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return list of lockers that match the given predicate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getMatchingLockers(Predicate\u003cLocker\u003e isMatching) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .filter(isMatching)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getAllLockers() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"lockers\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getLockerList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonSetter(\"lockers\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setLLockerList(List\u003cLocker\u003e lockerList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.lockerList \u003d lockerList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 99
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Addresses can take any value,\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"but it should not be empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor initializes the object with the address value passed to it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the address"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the address is in a invalid format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Address(@JsonProperty(\"lockerAddress\") String address) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidAddress(address)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidAddress(String address) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"lockerAddress\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /*We need to override equals and hashCode in order to account"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    for user defined checks for streams"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are same"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Address //handles all the cases for null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 address.equalsIgnoreCase(((Address) other).address));// check for equality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 54
    }
  },
  {
    "path": "src/main/java/duke/models/locker/InUseLocker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class InUseLocker extends Locker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates a locker that is currently being used by a student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the location of the locker"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone assigned to the locker"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tag stores the status of the locker (in-use)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param student stores the details associated with students"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate stores the starting date of the locker subscription"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate stores the ending date of the locker subscription"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public InUseLocker(SerialNumber serialNumber, Address address, Zone zone, Tag tag,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       Student student,LockerDate startDate,LockerDate endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        super(serialNumber,address,zone,tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate getStartDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate getEndDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isPresent(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof InUseLocker)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.getSerialNumber().equals(((InUseLocker) other).getSerialNumber());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return super.toString() + \"\\n\" + \" Name: \" + student.getName().getStudentName()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" StudentID:\" + student.getMatricNumber().getStudentCourse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both represent the same objects"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof InUseLocker)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //accounts for all null cases and irrelevant references"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        InUseLocker otherLocker \u003d (InUseLocker) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherLocker.getStudent().equals(this.getStudent())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getStartDate().equals(this.getStartDate())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getEndDate().equals(this.getEndDate()); //all equality checks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(student,startDate,endDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 91
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Locker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Locker {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Zone zone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Locker stores all the information regarding the status of the locker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial numbers associated with each locker"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address      stores the location of the locker"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone         stores the zone to which the locker belongs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tag          instance of the class Tag that stores the status of the locker"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Locker(@JsonProperty(\"serial\") SerialNumber serialNumber,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"address\") Address address,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"zone\") Zone zone,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"tag\") Tag tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.zone \u003d zone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setTagAs(String tagName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d tagName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStatusAsBroken() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d Tag.BROKEN;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStatusAsUnAuthorized() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d Tag.UNAUTHORIZED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStatusAsNotInUse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d Tag.NOT_IN_USE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStatusAsInUse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d Tag.IN_USE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * checks if the locker is already present in the lockerList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param other to check if the object is already present"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the object is present, false otherwise"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isPresent(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Locker)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.getSerialNumber().equals(((Locker) other).getSerialNumber());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to convert the locker info into displayable strings."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a string in a format that can be used for printing out the current locker"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return \"Locker #\" + serialNumber.getSerialNumberForLocker() + \": \" + \"Area: \" + address.getAddress()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" Zone: \" + zone.getZone()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" [\" + getTag().tagName + \"]\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"tag\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"serial\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"address\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"zone\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Zone getZone() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both objects are the same"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Locker)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //handles all the cases for null and irrelevant references"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker otherLocker \u003d (Locker) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherLocker.getSerialNumber().equals(this.getSerialNumber())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getZone().equals(this.getZone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getTag().equals(this.getTag());//handles checks for equality"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(serialNumber, address, zone, tag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 136
    }
  },
  {
    "path": "src/main/java/duke/models/locker/LockerDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerDate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" The date should be a valid date as per the\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" Gregorian Calendar and should be in the format \u003cDD-MM-YYYY\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final DateTimeFormatter checkDateFormat \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor is used to instantiate a valid Date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date that is to be assigned to the member field"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date is in invalid format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidDate(date)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to check whether the date is in correct format or not."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date that is to be tested for its validity."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the date is in valid format, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LocalDate.parse(date,checkDateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to check if the there is a difference of at least 7 days"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * between the two dates."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate the starting date of locker subscription"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate the end date of locker subscription"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the difference is valid, false otherwise"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean isDifferenceBetweenDatesValid(String startDate,String endDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localStartDate \u003d LocalDate.parse(startDate,checkDateFormat);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localEndDate \u003d LocalDate.parse(endDate,checkDateFormat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        long daysBetween \u003d localStartDate.until(localEndDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (daysBetween \u003c\u003d 6 || daysBetween \u003e 365) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override function equals and hashCode() in order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       to account for user defined checks for equality using streams"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if both the objects are the same"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof LockerDate //checks for all instances of null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 date.equals(((LockerDate) other).date)); //check for equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 84
    }
  },
  {
    "path": "src/main/java/duke/models/locker/SerialNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class SerialNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Serial number can only be a positive integer with no more\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"than six digits and it cannot be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String serialNumberForLocker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor is used to instantiate the class with the serial number passed to it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serialnumber assigned to a locker"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the serial number is in invalid format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public SerialNumber(@JsonProperty(\"serialNumber\") String serialNumber) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberForLocker \u003d serialNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidSerialNumber(String serialNumberForLocker) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker.matches(CHECK_REGEX)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 serialNumberForLocker.length() \u003c\u003d 6;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"serialNumber\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getSerialNumberForLocker() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals() and hashCode() in order to account for"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       used defined checking for equality while using streams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are the same"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof SerialNumber //handles all cases for null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 serialNumberForLocker.equals(((SerialNumber) other)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .serialNumberForLocker)); //checks for equality"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 58
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Zone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Zone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Zone should have only 1 alphanumeric character \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "           + \"and cannot be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"^[a-zA-Z]*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String zone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor is used to instantiate the class with the zone value passed to it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone assigned to a locker"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when zone is in invalid format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Zone(@JsonProperty(\"lockerZone\") String zone) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidZone(zone)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.zone \u003d zone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidZone(String zone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone.matches(CHECK_REGEX) \u0026\u0026 zone.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"lockerZone\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getZone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals() and hashCode() in order to account for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "      used defined checking for equality while using streams"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are the same"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Zone //handles all cases for null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 zone.equalsIgnoreCase(((Zone) other).zone)); //checks for equality"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 56
    }
  },
  {
    "path": "src/main/java/duke/models/student/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Email ID consists of two parts local-part@domain\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and should satisfy the following constraints:\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 1. The local-part and the domain name are separated by \u0027@\u0027\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 2. The local-part should contain only aplhanumeric characters and special symbols\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" like (!#$%\u0026\u0027*+/\u003d?`{|}~^.-)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 3. The domain name should contain at least two characters and start and end with \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"alphanumeric characters\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 4. The domain name should consists of only alphanumeric characters, a \u0027.\u0027 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"or a \u0027-\u0027 in the middle (optional)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String VALID_REGEX \u003d \"^[\\\\w\" + \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\" + \"]+\" + \"@\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"[^\\\\W_]\" +  \"[a-zA-Z0-9.-]*\" + \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the email id of a student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of a student"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user enters invalid email id"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Email(String email) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidEmail(email)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidEmail(String email) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email.matches(VALID_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals and hashCode() in order to account"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks for equality while using streams."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit if both objects are the same"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Email // checks for all null values and irrelevant instances"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.email.equals(((Email) other).email)); //checks for equality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 54
    }
  },
  {
    "path": "src/main/java/duke/models/student/Major.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Major should contain only aphanumeric characters\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and spaces and it should not be empty\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String course;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the course/major of the student."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param course stores the course that the student is currently pursuing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the course is in invalid format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Major(String course) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(course);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidCourse(course)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidCourse(String course) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return course.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals and hashCode in order to account for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks for equality while using streams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit if both the objects are the same"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Major //handles all null instances and other irrelevant references"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 course.equalsIgnoreCase(((Major) other).course)); //checks for equality"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return course.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 47
    }
  },
  {
    "path": "src/main/java/duke/models/student/MatricNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class MatricNumber {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Matriculation number should contain only \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"alpha numeric characters and should have only 9 characters. It should satisfy\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"the following constraints:\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 1. It should start with the character \u0027A\u0027\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 2. It should end with a letter\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n 3. It should contain only digits between the first and the last character\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[Aa]\\\\d{7}[a-zA-Z]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String matricId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the student ID / the matric number of the student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param matricId stores the matric number of the student"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the matric number is in invalid format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public MatricNumber(String matricId) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(matricId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidMatricNumber(matricId)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.matricId \u003d matricId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidMatricNumber(String matricId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return matricId.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getStudentCourse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return matricId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals() and hashCode() in order to account for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks about equality while using streams"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //checks if the two objects are the same"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof MatricNumber //checks for all null instances and irrelevant references"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 matricId.equalsIgnoreCase(((MatricNumber) other).matricId)); //checks for equality"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return matricId.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 55
    }
  },
  {
    "path": "src/main/java/duke/models/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Name should contain only alpha numeric characters\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and should not be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the name of the student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the name is in invalid format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Name(String name) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidName(name)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getStudentName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals and hashCode in order to account for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks for equality while using streams."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //checks whether the two objects are the same and short circuit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Name //checks for null references and other irrelevant cases"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 name.equalsIgnoreCase(((Name) other).name)); //checks for the equality"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 51
    }
  },
  {
    "path": "src/main/java/duke/models/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final MatricNumber matricNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the student and all its properties."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param matricNumber stores the student ID/ matric number of the student"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of the student"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param major stores the major/course of the student"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Student(Name name, MatricNumber matricNumber, Email email, Major major) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public MatricNumber getMatricNumber() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "      for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both the objects are the same"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //checks for all null cases and irrelevant instances"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (this.getName().equals(otherStudent.getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getEmail().equals(otherStudent.getEmail())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getMatricNumber().equals(otherStudent.getMatricNumber())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getMajor().equals(otherStudent.getMajor())); //checks for equality"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(name,matricNumber,email,major);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 71
    }
  },
  {
    "path": "src/main/java/duke/models/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String IN_USE \u003d \"in-use\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String NOT_IN_USE \u003d \"not-in-use\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String UNAUTHORIZED \u003d \"unauthorized\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String BROKEN \u003d \"broken\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_TAG_NAME \u003d \"Tag names can either be \u003cin-use\u003e,\u003cnot-in-use\u003e,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\u003cunauthorized\u003e or \u003cbroken\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Tag is used to store the status of the locker that it is associated with."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tagName stores a valid tagName"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the tagName is invalid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Tag(@JsonProperty(\"tagName\") String tagName) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkValidTagName(tagName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(INVALID_TAG_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (test.equalsIgnoreCase(IN_USE) || test.equalsIgnoreCase(NOT_IN_USE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || test.equalsIgnoreCase(UNAUTHORIZED) || test.equalsIgnoreCase(BROKEN));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return \"[\" + tagName + \"]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"tagName\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "      for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit for being the same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Tag //handles all null cases and other irrelevant instances"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 tagName.equalsIgnoreCase(((Tag) other).tagName));//checks for eqaulity"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 62
    }
  },
  {
    "path": "src/main/java/duke/parser/AddBatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AddBatchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SIZE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddBatchCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user input for adding batches."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Later it will be included with all the possible checks for the validity of the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the command entered by the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the the class AddBatchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command syntax is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_SIZE, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_SIZE, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Invalid command format\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SERIAL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address address \u003d ParserCheck.parseAddress("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone zone  \u003d ParserCheck.parseZone("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ZONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int size \u003d ParserCheck.parseSize("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SIZE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e addBatchOfLockers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        addBatchOfLockers \u003d addLockersToList(addBatchOfLockers,serialNumber,address,zone,size);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AddBatchCommand(addBatchOfLockers);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            MapTokensToArguments mapTokensToArguments, Token... tokens) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cLocker\u003e addLockersToList(List\u003cLocker\u003e addBatchOfLockers,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 SerialNumber serialNumber, Address address,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 Zone zone, int size) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(addBatchOfLockers);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            addBatchOfLockers.add("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    new Locker(serialNumber,address,zone,new Tag(\"not-in-use\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int serial \u003d Integer.parseInt(serialNumber.getSerialNumberForLocker()) + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            serialNumber \u003d ParserCheck.parseSerialNumber(Integer.toString(serial));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return addBatchOfLockers;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 76
    }
  },
  {
    "path": "src/main/java/duke/parser/AddLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AddLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddLockerCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user input for adding a new locker to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Later it will include all checks for validating the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class AddLockerCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ParserTokenizer.tokenize(userInput, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Invalid command format\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SERIAL).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address address \u003d ParserCheck.parseAddress("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone zone \u003d ParserCheck.parseZone(mapTokensToArguments.getValue(TOKEN_ZONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag tag \u003d new Tag(\"not-in-use\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker locker \u003d new Locker(serialNumber, address, zone, tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AddLockerCommand(locker);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent(MapTokensToArguments mapTokensToArguments,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 Token... tokens) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 57
    }
  },
  {
    "path": "src/main/java/duke/parser/AssignLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AssignLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_EMAIL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_END_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_PREFERENCES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_START_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENTID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_COURSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AssignLockerCommandParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to check if all the entries entered by the user are valid as per"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * the specifications of the assign command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the userInput"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a reference to the AssignLockerCommand()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command is in invalid format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput,TOKEN_STUDENT_NAME,TOKEN_STUDENTID,TOKEN_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_STUDENT_COURSE,TOKEN_START_DATE,TOKEN_END_DATE,TOKEN_PREFERENCES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments,TOKEN_STUDENT_NAME,TOKEN_STUDENTID,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_EMAIL, TOKEN_STUDENT_COURSE,TOKEN_START_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_END_DATE,TOKEN_PREFERENCES)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Invalid command format\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Name name \u003d ParserCheck.parseName(mapTokensToArguments.getValue(TOKEN_STUDENT_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MatricNumber matricNumber \u003d ParserCheck.parseMatricNumber("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_STUDENTID).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Email email \u003d ParserCheck.parseEmail(mapTokensToArguments.getValue(TOKEN_EMAIL).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Major major \u003d ParserCheck.parseMajor(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_STUDENT_COURSE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate startDate \u003d ParserCheck.parseDate(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_START_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate endDate \u003d ParserCheck.parseDate(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_END_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cZone\u003e getPreferences \u003d ParserCheck.parsePreferences(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_PREFERENCES).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ParserCheck.parseDifferenceBetweenStartAndEndDate(startDate,endDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student student \u003d new Student(name,matricNumber,email,major);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AssignLockerCommand(student,startDate,endDate,getPreferences);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            MapTokensToArguments mapTokensToArguments, Token... tokens) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 71
    }
  },
  {
    "path": "src/main/java/duke/parser/ByeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ByeCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 11
    }
  },
  {
    "path": "src/main/java/duke/parser/DeleteLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.DeleteLockerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteLockerCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user input for deleting a locker from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param fullCommand stores the user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class DeleteLockerCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (fullCommand.trim().length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" The description of delete command cant be empty\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String str \u003d fullCommand.substring(7).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        splitInput.add(str);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new DeleteLockerCommand(splitInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 29
    }
  },
  {
    "path": "src/main/java/duke/parser/EditLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditLockerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditLockerCommand.EditLocker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_CONDITION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditLockerCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user input for editing the status of a locker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class EditLockerCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user input is invalid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_CONDITION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(mapTokensToArguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getTextBeforeFirstToken().trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditLocker editLocker \u003d new EditLocker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForLocker(editLocker, mapTokensToArguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!editLocker.checkAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" At least one field must be provided for editing lockers\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new EditLockerCommand(serialNumber, editLocker);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForLocker(EditLocker editLocker,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                        MapTokensToArguments mapTokensToArguments) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_SERIAL).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setSerialNumber(ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_SERIAL).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setAddress(ParserCheck.parseAddress("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ADDRESS).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_ZONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setZone(ParserCheck.parseZone("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ZONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_CONDITION).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setCondition(ParserCheck.parseStatus("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_CONDITION).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 63
    }
  },
  {
    "path": "src/main/java/duke/parser/EditUsageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand.EditLockerDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand.EditStudent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_EMAIL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_END_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_START_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENTID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_COURSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditUsageParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user input for editing the status of a locker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class EditLockerCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user input is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput,TOKEN_STUDENT_NAME,TOKEN_STUDENTID,TOKEN_EMAIL,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_STUDENT_COURSE,TOKEN_START_DATE,TOKEN_END_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditStudent editStudent \u003d new EditStudent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditLockerDate editDate \u003d new EditLockerDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForStudent(editStudent, mapTokensToArguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForLockerDate(editDate,mapTokensToArguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(editDate.checkAnyFieldUpdated() || editStudent.checkAnyFieldUpdated())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" At least one field must be provided while updating usage\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(mapTokensToArguments"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getTextBeforeFirstToken());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new EditUsageCommand(serialNumber,editStudent,editDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForStudent(EditStudent editStudent,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                         MapTokensToArguments mapTokens) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setName(ParserCheck.parseName("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENT_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setEmail(ParserCheck.parseEmail("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENTID).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setMatricNumber(ParserCheck.parseMatricNumber("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENTID).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENT_COURSE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setMajor(ParserCheck.parseMajor("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENT_COURSE).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForLockerDate(EditLockerDate editDate,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                            MapTokensToArguments mapTokens) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editDate.setStartDate(ParserCheck.parseDate(mapTokens.getValue("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    TOKEN_START_DATE).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editDate.setEndDate(ParserCheck.parseDate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_END_DATE).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 82
    }
  },
  {
    "path": "src/main/java/duke/parser/ExportLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.logic.commands.ExportLockerCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportLockerCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function is used to parse the user input for exporting the details as a CSV file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public ExportLockerCommand parse()  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        return new ExportLockerCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 14
    }
  },
  {
    "path": "src/main/java/duke/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 4
    }
  },
  {
    "path": "src/main/java/duke/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 11
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final Pattern GENERAL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandType\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ADD_LOCKER_COMMAND \u003d \"addlocker\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ADD_BATCH_COMMAND \u003d \"addbatch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String DELETE_LOCKER_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EDIT_LOCKER_COMMAND \u003d \"editlocker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EDIT_USAGE_COMMAND \u003d \"editusage\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ASSIGN_LOCKER_COMMAND \u003d \"assign\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final String EXPORT_LOCKER_COMMAND \u003d \"export\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * this function is used to parse the command entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param fullCommand stores the command entered by the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return objects of type Command depending on the command given by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user inputs invalid command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Matcher commandMatch \u003d GENERAL_COMMAND_FORMAT.matcher(fullCommand.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!commandMatch.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" The command entered has invalid format. Type help to check\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"all the commands available in SpongeBob\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String commandType \u003d commandMatch.group(\"commandType\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String arguments \u003d commandMatch.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        switch (commandType.toLowerCase()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ADD_LOCKER_COMMAND:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ADD_BATCH_COMMAND:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddBatchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ASSIGN_LOCKER_COMMAND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AssignLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case DELETE_LOCKER_COMMAND:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DeleteLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case EDIT_LOCKER_COMMAND:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new EditLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case EDIT_USAGE_COMMAND:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new EditUsageParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case LIST_COMMAND:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ListCommandParser().parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case EXIT_COMMAND:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ByeCommandParser().parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        case EXPORT_LOCKER_COMMAND:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            return new ExportLockerCommandParser().parse();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\"Invalid Command\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swang1997": 4,
      "Tejasvas123": 49,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserCheck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ParserCheck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the serial number for the locker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number that is to be parsed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to a valid serialNumber"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the Serial Number has invalid format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!SerialNumber.checkIsValidSerialNumber(serialNumber.trim())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(SerialNumber.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new SerialNumber(serialNumber.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the address for the locker."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the address that is to be parsed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to a valid Address"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the address has invalid format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Address parseAddress(String address) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Address.checkIsValidAddress(address.trim())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Address.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Address(address.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the zone for the locker."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone that is to be parsed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid reference to zone"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the zone has invalid format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Zone parseZone(String zone) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Zone.checkIsValidZone(zone.trim())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Zone.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Zone(zone.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the number of lockers to be added in bulk."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param size to store the number of lockers to be added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid size in terms of a number"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the size is invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static int parseSize(String size) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int numLockers \u003d Integer.parseInt(size.trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (numLockers \u003c 0 || numLockers \u003e 30) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                throw new DukeException(\" Please enter a positive number within the range of 1 to 30\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return numLockers;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please enter a positive integer for the number of lockers\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the name of the student."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of the student name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the name is in invalid format"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Name parseName(String name) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Name.checkIsValidName(name.trim())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Name.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Name(name.trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the matric number / student id of the student."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param matricNumber stores the matriculation number of the student"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of MatricNumber"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the matriculation number is in invalid format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static MatricNumber parseMatricNumber(String matricNumber) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!MatricNumber.checkIsValidMatricNumber(matricNumber.trim())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(MatricNumber.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new MatricNumber(matricNumber.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function parses the major/course pursued by a student."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param major stores the major of the student"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of Major"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the major is in invalid format"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Major parseMajor(String major) throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Major.checkIsValidCourse(major)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Major.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Major(major.trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function parses the email of the student."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of the student"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of Email"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the email is in invalid format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Email parseEmail(String email) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Email.checkIsValidEmail(email.trim())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Email.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Email(email.trim());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function parses the date for the subscription of the lockers."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date for subscription"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of LockerDate"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date is in invalid format"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static LockerDate parseDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!LockerDate.checkIsValidDate(date)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerDate.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate(date.trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to parse the user preferences for allocation of lockers."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param preferences stores the preferences of the user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list of all valid zones"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there are no valid zones in the list of preferences"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static List\u003cZone\u003e parsePreferences(String preferences) throws DukeException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(preferences);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cZone\u003e getPreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e getEachPreference \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getEachPreference \u003d Arrays.asList(preferences.trim().split(\" \"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Only the preferences with a valid zone name will be added to the list of preferences"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (String s : getEachPreference) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (Zone.checkIsValidZone(s)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                getPreferences.add(parseZone(s));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (getPreferences.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" There must be at least one valid zone listed under preferences\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \" \\n\" + Zone.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getPreferences;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * checks if the status of the locker is in the correct format."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param status stores the status to be checked"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return an instance of a valid Tag"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the format is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Tag parseStatus(String status) throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Tag.checkValidTagName(status)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Tag.INVALID_TAG_NAME);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Tag(status);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to check the difference between dates."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate stores the starting date for rental"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate stores the ending date for rental"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date is invalid format"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static void parseDifferenceBetweenStartAndEndDate(LockerDate startDate,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                             LockerDate endDate) throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!LockerDate.isDifferenceBetweenDatesValid(startDate.getDate(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                endDate.getDate())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" There should be a difference of at least 7 days \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                   + \"and at most 365 days between the starting and ending dates of lockers\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 213
    }
  },
  {
    "path": "src/main/java/duke/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 4
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/MapTokensToArguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class MapTokensToArguments {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Map\u003cToken, List\u003cString\u003e\u003e mapTokensToArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used for mapping a given string to its corresponding token."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * In this implementation, token is the key for the mapping"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the arguments mapped to a given key"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setMapping(Token token, String args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e arguments \u003d getAllValues(token);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        arguments.add(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        mapTokensToArguments.put(token, arguments);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to get all the arguments mapped to a token."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * As per the current implementation, we can have multiple arguments for the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * same token."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token/key for the mapping"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list of all the arguments mapped to the token"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cString\u003e getAllValues(Token token) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!mapTokensToArguments.containsKey(token)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ArrayList\u003c\u003e(mapTokensToArguments.get(token));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to get the argument that was mapped to the token."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the argument mapped to the token"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Optional\u003cString\u003e getValue(Token token) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /*In case of multiple arguments related to a prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          this function will return the last argument associated with that token."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          Optional accounts for the case when the user does not input anything as argument"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e arguments \u003d getAllValues(token);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return arguments.isEmpty() ? Optional.empty() : Optional.of(arguments.get(arguments.size() - 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getTextBeforeFirstToken() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getValue(new Token(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 56
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/ParserTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ParserTokenizer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is responsible for mapping tokens with their valid arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tokens stores the tokens that are expected in the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return mapping of tokens to arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static MapTokensToArguments tokenize(String args, Token... tokens) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /*The triple dot notation is used for varArgs. It means that you can pass variable number"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          of arguments to a function."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cPositionOfToken\u003e tokenPositions \u003d findAllTokenPositions(args, tokens);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getMapping(args,tokenPositions);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cPositionOfToken\u003e findAllTokenPositions(String args, Token... tokens) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /*Streams represents a sequence of objects from the source that can be aggregated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          They can be used to achieve SQL-like queries. Have a look at the tutorial provided"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          in cs2113/T website"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Arrays.stream(tokens)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .flatMap(token -\u003e findTokenPositions(args,token).stream())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cPositionOfToken\u003e findTokenPositions(String args, Token token) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cPositionOfToken\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int tokenPos \u003d findTokenPosition(args, token.getToken(), 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        while (tokenPos !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            PositionOfToken extendedToken \u003d new PositionOfToken(token, tokenPos);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            positions.add(extendedToken);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tokenPos \u003d findTokenPosition(args, token.getToken(), tokenPos);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static int findTokenPosition(String args, String token, int startFromIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int tokenIndex \u003d args.indexOf(\" \" + token,startFromIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tokenIndex \u003d\u003d -1 ? -1 : tokenIndex + 1; //tokenIndex + 1 offsets for the whitespace"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static MapTokensToArguments getMapping(String args, List\u003cPositionOfToken\u003e positionOfTokens) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Sorting is required as we are trying to implement friendlier syntax where the order of tokens"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //does not matter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.sort((token1,token2) -\u003e token1.getStartPosition() - token2.getStartPosition());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Add a dummy start position so that it can mark the start of extracting and mapping arguments"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        PositionOfToken startPosition \u003d new PositionOfToken(new Token(\"\"),0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.add(0,startPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Add a dummy end position so that it can extract the last token and map arguments to it"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        PositionOfToken endPosition \u003d new PositionOfToken(new Token(\"\"),args.length());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.add(endPosition);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d new MapTokensToArguments();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c positionOfTokens.size() - 1; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Token currentToken \u003d positionOfTokens.get(i).getToken();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            //The mapping takes place by considering everything between the two tokens as argument"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String argumentForCurrentToken \u003d extractArgument(args,positionOfTokens.get(i),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    positionOfTokens.get(i + 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            mapTokensToArguments.setMapping(currentToken,argumentForCurrentToken);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return mapTokensToArguments;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static String extractArgument(String arg, PositionOfToken currentPos,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                          PositionOfToken nextPos) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Token token \u003d currentPos.getToken();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int startIndex \u003d currentPos.getStartPosition() + token.getToken().length();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (arg.substring(startIndex,nextPos.getStartPosition()).trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 81
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/PositionOfToken.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class PositionOfToken {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private int startPosition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Token token;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public PositionOfToken(Token token, int startPosition) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.token \u003d token;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    int getStartPosition() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return startPosition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    Token getToken() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 19
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/Syntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Syntax {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    // Used for command:addLocker"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_SERIAL \u003d new Token(\"s/\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_ADDRESS \u003d new Token(\"a/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_ZONE \u003d new Token(\"z/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //Used for command: addBatch"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_SIZE \u003d new Token(\"u/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //Used for auto assigning lockers:assign"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENT_NAME \u003d new Token(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENTID \u003d new Token(\"i/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_EMAIL \u003d new Token(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENT_COURSE \u003d new Token(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_START_DATE \u003d new Token(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_END_DATE \u003d new Token(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_PREFERENCES \u003d new Token(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //For locker condition"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_CONDITION \u003d new Token(\"c/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 25
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/Token.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Token {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String token;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Token(String token) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.token \u003d token;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getToken() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(obj instanceof Token)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Token otherPrefix \u003d (Token) obj;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherPrefix.getToken().equals(getToken());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token \u003d\u003d null ? 0 : token.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 37
    }
  },
  {
    "path": "src/main/java/duke/storage/FileHandling.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.databind.MapperFeature;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileHandling {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public FileHandling(String file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function handles loading data from the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a list that stores the tasks loaded from the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList retrieveData() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileInputStream readFile \u003d new FileInputStream(this.file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LockerList lockers \u003d getObjectMapper().readValue(readFile, LockerList.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return lockers;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Could not find the file. Invalid file name/file path... \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"Will continue with an empty list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Error while reading data from the file. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"Will continue with an empty list\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function is responsible for saving data from the list into the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storeDataInFile list of tasks that are to be stored in the file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when there are errors while loading data into the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void saveData(LockerList storeDataInFile) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileOutputStream write \u003d new FileOutputStream(this.file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            getObjectMapper().writeValue(write, storeDataInFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            write.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Error occurred while writing data to the file\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ObjectMapper()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .disable(MapperFeature.AUTO_DETECT_CREATORS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_FIELDS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_GETTERS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_IS_GETTERS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 37,
      "-": 35
    }
  },
  {
    "path": "src/main/java/duke/storage/OpenCsv.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class OpenCsv {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final String CSV_OUTPUT_PATH \u003d \"data.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int FIRST_COLUMN \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int SECOND_COLUMN \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int THIRD_COLUMN \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function exports a CSV file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static void exportLockers(List\u003cLocker\u003e lockerList) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Writer writer \u003d Files.newBufferedWriter(Paths.get(CSV_OUTPUT_PATH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            String[] header \u003d {\"Locker\", \"Zone\", \"Status\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.writeNext(header);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (Locker l : lockerList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                String[] details \u003d new String[header.length];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[FIRST_COLUMN] \u003d l.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[SECOND_COLUMN] \u003d l.getZone().getZone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[THIRD_COLUMN] \u003d l.getTag().getTagName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                csvWriter.writeNext(details);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(\" Unable to export csv \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 51
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function responsible for printing a line."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printDash() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 75; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            str +\u003d \"_\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(str);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printSpaces(String printStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    \" + printStr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the hello message every time Duke is initiated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String logo \u003d \"SpongeBob\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello from \" + logo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello! I am SpongeBob. I am here to manage lockers for you!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the tasks stored in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param printData stores the list of tasks to be printed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printList(List\u003cLocker\u003e printData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Here are the lockers in your list:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showList(printData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function tells the user that Duke has marked the task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param printStr stores the task that has been marked as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printMarkAsDone(String printStr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Nice! I have marked this task as done:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" \" + printStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function tells the user that Duke has added the task to the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param listOfTasks used for printing the number of tasks in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskA stores the task that is to be added to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printAddTask(List\u003cLocker\u003e listOfTasks, String taskA) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Got it. I have added this task:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\"  \" + taskA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showNumTasks(listOfTasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that SpongeBob has added the locker into the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param listOfLockers used for printing the number of lockers in the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is added to the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printAddLocker(List\u003cLocker\u003e listOfLockers, String lockerA) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Got it. I have added this locker: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + lockerA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Now, Spongebob is managing \" + listOfLockers.size() + \" lockers\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that SpongeBob has added a batch of lockers to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param num  stores the number of lockers that are added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printBatch(int num) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Got it. I have added \" + num + \" lockers\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is used to notify the user that SpongeBob has successfully assigned"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * the locker for the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param locker stores the string to show the locker that has been assigned"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printSuccessfulAllocation(String locker) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" I have successfully assigned a new locker to the student. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"Here are the details:\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + locker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * prints the message for successful editing of lockers."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editedLocker stores the data of the edited locker"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showSuccessfullyEdited(String editedLocker) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" I have successfully edited the locker properties.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + editedLocker);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showNoAvailableLockers() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" There are no available lockers at the moment. \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Unfortunately I will have to terminate the subscription of the student\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function tells the user that Duke has snoozed/postponed/rescheduled the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskA stores the task that is to be added to the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param type stores whether that task is an event or a deadline"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command stores whether user command is snooze or postpone or reschedule"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printSnoozeTask(String taskA, String type, String command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\" I have successfully \" + command + \"d\" + \" the data and time of this event:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\"  \" + taskA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            printDash();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\" I have successfully \" + command + \"d\" + \" the data and time of this deadline:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\"  \" + taskA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            printDash();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\" Invalid command\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void showNumTasks(List\u003cLocker\u003e listOfTasks) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Now you have \" + listOfTasks.size()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + ((listOfTasks.size() \u003d\u003d 1) ? \" locker in the list.\" : \" lockers in \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"the list\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void showList(List\u003cLocker\u003e listOfTasks) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            printSpaces(\" \" + (i + 1) + \". \" + listOfTasks.get(i).toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the exit message every time Duke is closed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitDuke() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Bye.Hope to see you again soon.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the error message."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param errorMessage stores the error message."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(errorMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *  This function is used to notify the user that there were no available lockers in his list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *  of preferences."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showNoLockersFoundInPreferences() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Unable to find any free lockers in the preferences stated.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Looking for free lockers in the entire system ...\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that SpongeBob has deleted the lockers from the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerList used for showing the number of lockers left in the list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is deleted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteMessage(List\u003cLocker\u003e lockerList, String lockerA) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Noted. I have removed this locker:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"  \" + lockerA);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showNumTasks(lockerList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that SpongeBob has edited the locker from the list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is edited"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void editMessage(String lockerA) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"Noted. I have edited the locker to:\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + lockerA);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function tells the user that SpongeBob has exported the CSV file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void exportMessage() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printSpaces(\"Noted. I have exported the details to a new CSV file\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the tasks that match a given keyword."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList stores the tasks that match a given keyword."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void keywordPrint(List\u003cLocker\u003e taskList) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        showList(taskList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void getRemindersList(List\u003cLocker\u003e taskList) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" Here are your deadlines:\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        showList(taskList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function prints the message when there is an error in loading data from the file."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message stores the error message."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(message);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 6,
      "Tejasvas123": 91,
      "-": 141
    }
  },
  {
    "path": "temp/duketest/command/AddDoAfterCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duketest.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddDoAfterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import temp.storage.FileHandling;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddDoAfterCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FileHandling storage \u003d new FileHandling(\"storeData.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkValidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"do-after\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AddDoAfterCommand obj \u003d new AddDoAfterCommand(splitInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class,() -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"return book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkValidFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"do-after\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"return-book\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"exams\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddDoAfterCommand obj \u003d new AddDoAfterCommand(splitInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class,() -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 40
    }
  },
  {
    "path": "temp/duketest/command/AddFixedCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duketest.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddDoAfterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import temp.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddFixedCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FileHandling storage \u003d new FileHandling(\"storeData.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkValidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"fixed\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AddDoAfterCommand obj \u003d new AddDoAfterCommand(splitInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"return book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkValidFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"fixed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"read\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"journal\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        splitInput.add(\"/needs\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddDoAfterCommand obj \u003d new AddDoAfterCommand(splitInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 41
    }
  },
  {
    "path": "temp/duketest/command/ByeCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duketest.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import temp.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkBye() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d new ByeCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(c.isExit);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        c.execute(new TaskList(),new Ui(),new FileHandling(\"storeData.txt\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c.isExit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 22
    }
  },
  {
    "path": "temp/duketest/command/RemindCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duketest.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    void checkRemind() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d new RemindCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(c.isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhubo225": 1,
      "-": 13
    }
  },
  {
    "path": "temp/duketest/command/SnoozeCommandTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "package duketest.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import temp.storage.FileHandling;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    private final FileHandling storage \u003d new FileHandling(\"storeData.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void checkValidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        splitInput.add(\"snooze\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        SnoozeCommand obj \u003d new SnoozeCommand(splitInput, \"snooze\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        assertThrows(DukeException.class,() -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void checkValidFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        splitInput.add(\"reschedule\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        splitInput.add(\"1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        SnoozeCommand obj \u003d new SnoozeCommand(splitInput,\"reschedule\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        assertThrows(DukeException.class,() -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                obj.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "Zhubo225": 38
    }
  },
  {
    "path": "temp/duketest/tasks/TaskListTest.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duketest.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkAddTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Task store \u003d  new Todo(\"Borrow book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(store);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(store,obj.getTask(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkDeleteTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Task store \u003d new Todo(\"join cca\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(store);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.deleteTask(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class,() -\u003e obj.getTask(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkNumTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(new Todo(\"quit cca\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1,obj.numTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkGetTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(new Todo(\"Borrow book\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Task num2 \u003d new Todo(\"Return book\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(num2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(num2.toString(),obj.getTask(1).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkGetAllTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        obj.addTask(new Todo(\"study for CS2113\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cTask\u003e storeTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storeTest \u003d obj.getAllTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(storeTest.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskA \u003d new Todo(\"return book\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskB \u003d new Todo(\"study for CS2113\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(storeTest.get(0).toString(),taskA.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(storeTest.get(1).toString(),taskB.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 2,
      "-": 61
    }
  },
  {
    "path": "temp/temp/command/AddDeadlineCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddDeadlineCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! The description of deadline cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/by\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure that you have entered \\\"/by\\\" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to separate task and time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new Deadline(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 46
    }
  },
  {
    "path": "temp/temp/command/AddDoAfterCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.DoAfter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddDoAfterCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddDoAfterCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! the description for a Do-after task cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/after\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/after\\\" to separate\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new DoAfter(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 46
    }
  },
  {
    "path": "temp/temp/command/AddDoWithinCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.DoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddDoWithinCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddDoWithinCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! the description for a DoWithin cannot be empty\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/between\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/between\\\" to separate\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new DoWithin(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 47
    }
  },
  {
    "path": "temp/temp/command/AddEventCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddEventCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! the description for an event cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/at\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/at\\\" to separate\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new Event(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 46
    }
  },
  {
    "path": "temp/temp/command/AddFixedDurationCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.FixedDuration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddFixedDurationCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddFixedDurationCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! the description for a Fixed Duration task cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/needs\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/needs\\\" to separate\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new FixedDuration(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 46
    }
  },
  {
    "path": "temp/temp/command/AddRecurringCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddRecurringCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddRecurringCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! the description for a Recursive task cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/for\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/for\\\" to separate\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split2.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the time frame\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addTask(new Recurring(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 47
    }
  },
  {
    "path": "temp/temp/command/AddToDoCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddToDoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.addTask(new Todo(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! The description of a todo list cannot be empty\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 26
    }
  },
  {
    "path": "temp/temp/command/ByeCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.exitDuke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 13
    }
  },
  {
    "path": "temp/temp/command/DeleteCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            int temp \u003d Integer.parseInt(splitInput.get(1)) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            String taskA \u003d tasks.getTask(temp).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.deleteTask(temp);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.deleteMessage(tasks.getAllTasks(), taskA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"delete\\\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 30
    }
  },
  {
    "path": "temp/temp/command/DoneCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            int temp \u003d Integer.parseInt(splitInput.get(1)) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.getTask(temp).markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printMarkAsDone(tasks.getTask(temp).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"done\\\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 1,
      "-": 29
    }
  },
  {
    "path": "temp/temp/command/SnoozeCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.DateTimeRecognition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.FileHandling;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String inputTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(List\u003cString\u003e splitInput, String inputTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.inputTask \u003d inputTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSnooze(TaskList tasks, Ui ui, FileHandling storage,Task task,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                              int num, String split1) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.toString().contains(\"[E]\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cString\u003e splitDate \u003d Arrays.asList(split1.trim().split(\" to \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeRecognition from \u003d new DateTimeRecognition(splitDate.get(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeRecognition to \u003d new DateTimeRecognition(splitDate.get(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.deleteTask(num - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                tasks.changeTask(new Event(task.description, split1.trim()),num - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                storage.saveData(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.printSnoozeTask(tasks.getTask(tasks.numTasks() - 1).toString(), \"E\", inputTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\" Format for an event is: \u003cevent\u003e /at\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"\u003cdata and time\u003e to \u003cdate and time\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (task.toString().contains(\"[D]\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeRecognition convertDate \u003d new DateTimeRecognition(split1.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.deleteTask(num - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks.changeTask(new Deadline(task.description, split1.trim()),num - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.printSnoozeTask(tasks.getTask(tasks.numTasks() - 1).toString(), \"D\", inputTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" You can only snooze/postpone/reschedule an event or a deadline task!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        int num \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! instructions to \" + inputTask + \" a task cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (i \u003d 2; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitInput.get(i).equals(\"/to\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/to\\\" to separate\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task and snoozed/postponed/rescheduled time\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (split1.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Please enter the new time frame\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            num \u003d Integer.parseInt(splitInput.get(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d tasks.getTask(num - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            updateSnooze(tasks, ui, storage, task, num, split1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"\" + inputTask + \"\\\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 2,
      "-": 82
    }
  },
  {
    "path": "temp/temp/parser/DateDoWithin.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateDoWithin {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateDoWithin(String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function enables Duke to read dates in a \"dd/MM/yyyy format\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when the date format is incorrect."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void dateTimer() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LocalDate dateTime \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" The format for including date and time for a do within is \u003cdd/MM/yyyy\u003e\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 5,
      "Tejasvas123": 4,
      "-": 20
    }
  },
  {
    "path": "temp/temp/parser/DateTimeRecognition.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DateTimeRecognition {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DateTimeRecognition(String date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function enables Duke to read dates in a \"dd-MM-yyyy HH:mm format\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date format is incorrect."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void dateTime() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" The format for including date and time for an event/\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"deadline is \u003cdd/MM/yyyy HH:mm\u003e\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 7,
      "Tejasvas123": 22
    }
  },
  {
    "path": "temp/temp/parser/Parser.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddDoAfterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.command.AddDoWithinCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddFixedDurationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddRecurringCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function just parses the fullCommand into different tasks/commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param fullCommand stores the command entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return objects of type Command depending on the command given by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command given is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Command parse(String fullCommand)throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                Arrays.asList(fullCommand.split(\" \")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String inputTask \u003d splitInput.get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (fullCommand.equals(\"remind\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new RemindCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DoneCommand(splitInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"todo\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddToDoCommand(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddDeadlineCommand(splitInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"event\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddEventCommand(splitInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } else if (inputTask.equals(\"dowithin\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            return new AddDoWithinCommand(splitInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"do-after\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddDoAfterCommand(splitInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"fixed\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddFixedDurationCommand(splitInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"recurring\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddRecurringCommand(splitInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        } else if (inputTask.equals(\"snooze\") || inputTask.equals(\"postpone\") || inputTask.equals(\"reschedule\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            return new SnoozeCommand(splitInput, inputTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"delete\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DeleteCommand(splitInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (inputTask.equals(\"find\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new FindCommand(splitInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please enter a valid command\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 3,
      "KevinAlvarez7": 3,
      "Tejasvas123": 59,
      "Zhubo225": 3
    }
  },
  {
    "path": "temp/temp/tasks/Deadline.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.DateTimeRecognition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Deadline class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description stores the deadline task added by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by stores the time by which the user is expected to finish the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when the user inputs a deadline task in invalid format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by)throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        DateTimeRecognition convertDate \u003d new DateTimeRecognition(this.by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        convertDate.dateTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Deadline(@JsonProperty(\"deadline\") String by) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + by + \")\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"D\" + super.fileOutFormat() + \"|\" + by);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"deadline\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 17,
      "-": 31
    }
  },
  {
    "path": "temp/temp/tasks/DoAfter.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String after;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfter(String description, String after) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DoAfter(@JsonProperty(\"do-after\") String after) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[A]\" + super.toString() + \" (after \" + this.after + \")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"A\" + super.fileOutFormat() + \"|\" + this.after);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"do-after\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDoAfter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return after;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 14,
      "-": 21
    }
  },
  {
    "path": "temp/temp/tasks/DoWithin.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.DateDoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoWithin extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String between;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor instantiates the object for the DoWithin class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description stores the DoWithin description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param between stores the time for the event in a particular format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when the user inputs event task in an invalid format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoWithin(String description, String between)throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.between \u003d between;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            List\u003cString\u003e splitDate \u003d Arrays.asList(this.between.split(\" to \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateDoWithin from \u003d new DateDoWithin(splitDate.get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            from.dateTimer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateDoWithin to \u003d new DateDoWithin(splitDate.get(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            to.dateTimer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Format for a DoWithin is: \u003cDoWithin\u003e /between \u003cdate\u003e to \u003cdate\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DoWithin(@JsonProperty(\"do-within\") String between) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.between \u003d between;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[W]\" + super.toString() + \" (between: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + between + \")\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"W\" + super.fileOutFormat() + \"|\" + between);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"do-within\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDoWithin() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return between;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swang1997": 1,
      "Tejasvas123": 23,
      "-": 35
    }
  },
  {
    "path": "temp/temp/tasks/Event.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.DateTimeRecognition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class  Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor instantiates the object for the Event class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description stores the event description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at stores the time for the event in a particular format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when the user inputs event task in an invalid format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, String at)throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e splitDate \u003d Arrays.asList(at.split(\" to \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeRecognition from \u003d new DateTimeRecognition(splitDate.get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeRecognition to \u003d new DateTimeRecognition(splitDate.get(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            from.dateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            to.dateTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" Format for an event is: \u003cevent\u003e /at \u003cdata and time\u003e to \u003cdate and time\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Event(@JsonProperty(\"at\") String at) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                + at + \")\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"E\" + super.fileOutFormat() + \"|\" + at);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"at\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 21,
      "-": 36
    }
  },
  {
    "path": "temp/temp/tasks/FixedDuration.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String needs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String needs) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public FixedDuration(@JsonProperty(\"needs\") String needs) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[F]\" + super.toString() + \" (needs \" + this.needs + \")\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"F\" + super.fileOutFormat() + \"|\" + this.needs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"needs\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getNeeds() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return needs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 15,
      "-": 21
    }
  },
  {
    "path": "temp/temp/tasks/Recurring.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String forTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String description, String forTask) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.forTask \u003d forTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Recurring(@JsonProperty(\"for\") String forTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.forTask \u003d forTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[R]\" + super.toString() + \" (after \" + this.forTask + \")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"R\" + super.fileOutFormat() + \"|\" + this.forTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"for\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getForTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return forTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 13,
      "-": 22
    }
  },
  {
    "path": "temp/temp/tasks/Task.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String ticks \u003d \"Y\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String cross \u003d \"N\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Task(@JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    Task() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? ticks : cross);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean checkKeyword(String str) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return (this.description.contains(str));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[\" + getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"|\" + isDone + \"|\" + description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"description\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"is Done\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonSetter(\"is Done\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 26,
      "-": 33
    }
  },
  {
    "path": "temp/temp/tasks/TaskList.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cTask\u003e storeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        storeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public TaskList(List\u003cTask\u003e storeList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storeList \u003d storeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storeList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeTask(Task task, int position) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storeList.add(position,task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storeList.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.storeList.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int numTasks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return storeList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"tasks\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cTask\u003e getStoreList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonSetter(\"tasks\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStoreList(List\u003cTask\u003e storeList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.storeList \u003d storeList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 16,
      "-": 37
    }
  },
  {
    "path": "temp/temp/tasks/Todo.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Todo(@JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[T]\" + super.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"T\" + super.fileOutFormat());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 11,
      "-": 16
    }
  }
]
