[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    archiveBaseName \u003d \"spongeBob\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    archiveVersion \u003d \"1.3\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-core\u0027, version: \u00272.9.10\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jdk8\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    compile \u0027com.opencsv:opencsv:5.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java/data/\u0027]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 1,
      "Tejasvas123": 36,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.util.SampleData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerList lockers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String FILE_NAME_FOR_STORAGE \u003d \"data.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the SpongeBob class by loading data from a file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filename stores the file name from which the data is being loaded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Duke(String filename) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage \u003d new StorageManager(filename);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockers \u003d new LockerList(storage.retrieveData().getLockerList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockers \u003d SampleData.getSampleLockerList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *  Executes various tasks/commands related to SpongeBob."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                c.execute(lockers, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Responsible for instantiating SpongeBob with the file name \"data.json\"."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * data.json is the file from which the data is loaded for the list of lockers."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args contains the supplied command-line arguments as an array of String objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        new Duke(FILE_NAME_FOR_STORAGE).run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 27,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddBatchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command for adding a batch of lockers to SpongeBob."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddBatchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final List\u003cLocker\u003e batchOfLockers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addbatch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid command format for adding batch of lockers.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. All tokens should be present. (s/ u/ z/ a/) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. There should not include any text between the command word and the first token.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates an AddBatchCommand to add {@code List\u003cLocker\u003e}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddBatchCommand(List\u003cLocker\u003e batchOfLockers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(batchOfLockers);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.batchOfLockers \u003d batchOfLockers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerList.areLockersPresent(batchOfLockers)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerList.DUPLICATE_LOCKERS_FOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addAllLockersInList(batchOfLockers);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printBatch(batchOfLockers.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 44
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command for adding a locker to SpongeBob."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddLockerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Locker addLocker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addlocker\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid command format for adding a locker.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. All tokens should be present (s/ z/ a/) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. There should not include any text between the command word and the first token.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates an AddLockerCommand to add {@code Locker}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddLockerCommand(Locker addLocker) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(addLocker);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.addLocker \u003d addLocker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerList.isPresentLocker(addLocker)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerList.DUPLICATE_LOCKERS_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addLocker(addLocker);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printAddLocker(lockerList.numLockers(), addLocker.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AssignLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Usage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to assign locker to a student based on preferences."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AssignLockerCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Usage usage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final List\u003cZone\u003e preferences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int FIRST_FREE_LOCKER \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d  \" Invalid command format for assigning lockers.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. All tokens should be present (n/ i/ m/ e/ f/ t/ p/)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2.There should not include any text between the command word and the first token\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String NO_AVAILABLE_LOCKERS \u003d \" There are no available lockers at the moment.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates all the fields necessary for assigning a locker to a student."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param usage stores all the information required for locker subscription"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param preferences  stores the preferences as a list of zones for the student"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AssignLockerCommand(Usage usage, List\u003cZone\u003e preferences) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(usage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(preferences);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.preferences \u003d preferences;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d assignLockerToStudent(lockerList, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printSuccessfulAllocation(lockerList.getLocker(storeIndex).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private int assignLockerToStudent(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker freeLocker \u003d getFreeLocker(lockerList, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d lockerList.getIndexOfLocker(freeLocker);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerAssignedToStudent \u003d getLockerToAssign(freeLocker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.setLockerInPosition(lockerAssignedToStudent, storeIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return storeIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getLockerToAssign(Locker freeLocker) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Locker(freeLocker.getSerialNumber(), freeLocker.getAddress(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                freeLocker.getZone(), new Tag(Tag.IN_USE), usage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Predicate\u003cLocker\u003e findLockerBasedOnPreferences(Zone zone) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag checkTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return p -\u003e p.getTag().equals(checkTag)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 p.getZone().equals(zone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getFreeLocker(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (Zone zone: preferences) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            List\u003cLocker\u003e freeLockersInZone \u003d lockerList.getMatchingLockers("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    findLockerBasedOnPreferences(zone));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (freeLockersInZone.size() \u003e 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return freeLockersInZone.get(FIRST_FREE_LOCKER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /* If the control reaches here, that means SpongeBob was unable to allocate"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          any Lockers in the given preferences and hence we will arbitrarily"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          assign any locker that is free */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e freeLockersInAnyZone \u003d lockerList.getAnyAvailableLocker(new Tag(Tag.NOT_IN_USE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (freeLockersInAnyZone.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(NO_AVAILABLE_LOCKERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /*Need to inform the user that a locker has been assigned not in the preferred"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          location */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showNoLockersFoundInPreferences();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return freeLockersInAnyZone.get(FIRST_FREE_LOCKER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 92
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command for exiting SpongeBob."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.exitSpongeBob();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 18
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to clear all the lockers from the list of lockers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.removeAllLockers();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showAllLockersRemoved();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public abstract void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to delete a locker from the list of lockers in SpongeBob."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteLockerCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletelocker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid command format for deleting lockers.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. Should enter only deleteLocker \u003cSERIALNUMBER\u003e \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates a DeleteLockerCommand to delete the locker associated with the {@code SerialNumber} ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteLockerCommand(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberToDelete \u003d serialNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToDelete \u003d lockerList.getLockerToEdit(serialNumberToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.deleteLocker(lockerToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.deleteMessage(lockerList.numLockers(), lockerToDelete.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 38
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteUsageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to delete the usage/subscription of an in-use locker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteUsageCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberToDeleteUsage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteusage\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid command format for deleting usage. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"You must key in the serial number of the locker\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String USAGE_CONSTRAINT \u003d \" Usage of only an in-use locker can be deleted.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates a DeleteUsageCommand to delete the subscription details of the locker associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * with the {@code SerialNumber} ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteUsageCommand(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberToDeleteUsage \u003d serialNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToDelete \u003d lockerList.getLockerToEdit(serialNumberToDeleteUsage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(lockerToDelete.isOfTypeInUse())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(USAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.setLockerInPosition(new Locker(lockerToDelete.getSerialNumber(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerToDelete.getAddress(), lockerToDelete.getZone(), new Tag(Tag.NOT_IN_USE),null),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerList.getIndexOfLocker(lockerToDelete));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showDeleteUsage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 45
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Usage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to edit the various fields associated with a locker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditLockerCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberOfLockerToEdit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditLocker editLocker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int GET_FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editlocker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid format for editing locker details. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. The serial number of the locker to be edited must be entered.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. At least one field must be provided for editing the locker.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EDIT_LOCKER_ERROR \u003d \" The following constraints are to be satisfied\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" for editing locker states:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. If a locker is currently not in the InUse state then its state cannot\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" be edited to InUse state\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. A locker currently in InUse state can only be changed to broken state\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     3. If case you change InUse to Broken then a new locker is\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" allocated to the student, if there are available lockers.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     4. If there are no available lockers for the student, then his/hers subscription\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" is terminated.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the editLockerCommand object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker to be edited."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editLocker stores the contents that are to be edited."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditLockerCommand(SerialNumber serialNumber,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                             EditLocker editLocker) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editLocker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        serialNumberOfLockerToEdit \u003d serialNumber;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editLocker \u003d new EditLocker(editLocker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d editLockerDetails(lockerList, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showSuccessfullyEdited(editedLocker.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker editLockerDetails(LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToEdit \u003d lockerList.getLockerToEdit(serialNumberOfLockerToEdit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d createEditedLocker(lockerToEdit, editLocker);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(editedLocker.hasSameSerialNumber(lockerToEdit))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (lockerList.isPresentLocker(editedLocker)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                throw new DukeException(LockerList.DUPLICATE_LOCKERS_FOUND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!validationChecks(lockerToEdit, editedLocker)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(EDIT_LOCKER_ERROR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerToEdit.isOfTypeInUse() \u0026\u0026 !editedLocker.isOfTypeInUse()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            /*Need to assign a new locker to the student as status of the existing in-use locker has"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "              been changed to broken"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "             */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            assignNewLocker(lockerToEdit, lockerList, ui);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.setLockerInPosition(editedLocker, lockerList.getIndexOfLocker(lockerToEdit));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return editedLocker;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void assignNewLocker(Locker lockerToEdit, LockerList lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit.getUsage().isPresent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e getFreeLockers \u003d lockerList.getAnyAvailableLocker(new Tag(Tag.NOT_IN_USE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (getFreeLockers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.showNoAvailableLockers();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Locker freeLocker \u003d getFreeLockers.get(GET_FIRST_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            freeLocker.setStatusAsInUse();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            freeLocker.setUsage(lockerToEdit.getUsage().get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int storeIndex \u003d lockerList.getIndexOfLocker(freeLocker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerList.setLockerInPosition(freeLocker,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    storeIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.printSuccessfulAllocation(lockerList.getLocker(storeIndex).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private boolean validationChecks(Locker lockerToEdit, Locker editedLocker) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag testInUse \u003d new Tag(Tag.IN_USE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag testBroken \u003d new Tag(Tag.BROKEN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerToEdit.hasSameTagAs(editedLocker.getTag())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (editedLocker.hasSameTagAs(testInUse)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (lockerToEdit.hasSameTagAs(testInUse)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 !(editedLocker.hasSameTagAs(testBroken))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates and returns a {@code Locker} with the details of {@code lockerToEdit}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * edited with {@code editLocker}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker createEditedLocker(Locker lockerToEdit, EditLocker editLocker) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber editedSerialNumber \u003d editLocker.getSerialNumber()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(lockerToEdit.getSerialNumber());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address editedAddress \u003d editLocker.getAddress().orElse(lockerToEdit.getAddress());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone editedZone \u003d editLocker.getZone().orElse(lockerToEdit.getZone());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag editedTag \u003d editLocker.getCondition().orElse(lockerToEdit.getTag());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage usage \u003d lockerToEdit.getUsage().orElse(null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Locker(editedSerialNumber,editedAddress,editedZone,editedTag,usage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores the details to edit the locker with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * corresponding field value of the locker."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditLocker {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLocker() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * A copy constructor used to copy the contents of the edited locker."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLocker(EditLocker copyEditLocker) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setSerialNumber(copyEditLocker.serialNumber);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setAddress(copyEditLocker.address);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setZone(copyEditLocker.zone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setCondition(copyEditLocker.tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return (serialNumber !\u003d null || address !\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    || zone !\u003d null || tag !\u003d null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setCondition(Tag tag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cSerialNumber\u003e getSerialNumber() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(serialNumber);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cTag\u003e getCondition() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 200
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditUsageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Usage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.StudentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to edit the subscription details of an in-use locker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditUsageCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumberToEdit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditStudent editStudent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final EditLockerDate editDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editusage\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid format for updating usage. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. The serial number of the locker whose usage is to be updated must be entered.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. At least one field must be provided while updating usage.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EDIT_USAGE_CONSTRAINT \u003d \" You are allowed to edit usage of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"only type In-Use Locker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the edit usage command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number of the locker to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editStudent stores the details of the student to be edited"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editDate stores the details of the dates to be edited for usage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditUsageCommand(SerialNumber serialNumber,EditStudent editStudent,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                            EditLockerDate editDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(editDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberToEdit \u003d serialNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editStudent \u003d new EditStudent(editStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.editDate \u003d new EditLockerDate(editDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d editUsageDetails(lockerList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showSuccessfullyEdited(editedLocker.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(lockerList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker editUsageDetails(LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker lockerToEdit \u003d lockerList.getLockerToEdit(serialNumberToEdit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int storeIndex \u003d lockerList.getIndexOfLocker(lockerToEdit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!lockerToEdit.isOfTypeInUse()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(EDIT_USAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker editedLocker \u003d getEditedLocker(lockerToEdit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.setLockerInPosition(editedLocker, storeIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return editedLocker;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker getEditedLocker(Locker lockerToEdit) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert lockerToEdit.getUsage().isPresent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage usageToEdit \u003d lockerToEdit.getUsage().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(usageToEdit, editStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate editedStartDate \u003d createEditedStartDate(usageToEdit, editDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate editedEndDate \u003d createEditedEndDate(usageToEdit, editDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage editedUsage \u003d new Usage(editedStudent,editedStartDate, editedEndDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!LockerDate.isDifferenceBetweenDatesValid(editedStartDate.getDate(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                editedEndDate.getDate())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerDate.ERROR_IN_DATE_DIFFERENCE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Locker(lockerToEdit.getSerialNumber(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerToEdit.getAddress(),lockerToEdit.getZone(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                lockerToEdit.getTag(),editedUsage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code usageToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * edited with {@code editStudent}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Student createEditedStudent(Usage usageToEdit, EditStudent editStudent) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert usageToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Name editedName \u003d editStudent.getName()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getStudent().getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Major editedMajor \u003d editStudent.getMajor()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getStudent().getMajor());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Email editedEmail \u003d editStudent.getEmail()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getStudent().getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        StudentId editedStudentId \u003d editStudent.getStudentId()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getStudent().getStudentId());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Student(editedName, editedStudentId, editedEmail, editedMajor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Creates and returns a {@code LockerDate} with the details of {@code usageToEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * edited with {@code editLockerDate}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerDate createEditedStartDate(Usage usageToEdit, EditLockerDate editDate) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert usageToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate((editDate.getStartDate()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getStartDate()).getDate()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerDate createEditedEndDate(Usage usageToEdit, EditLockerDate editDate) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert usageToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate((editDate.getEndDate()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .orElse(usageToEdit.getEndDate())).getDate());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditStudent {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private StudentId studentId;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditStudent() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * A copy constructor used for editing student details."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * @param copyStudent stores the fields that are to be edited"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditStudent(EditStudent copyStudent) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setName(copyStudent.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setStudentId(copyStudent.studentId);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setEmail(copyStudent.email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setMajor(copyStudent.major);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setStudentId(StudentId studentId) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return name !\u003d null || email !\u003d null || major !\u003d null"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    || studentId !\u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cStudentId\u003e getStudentId() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(studentId);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cMajor\u003e getMajor() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores the details to edit the rental period with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * corresponding field value of the rental period."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static class EditLockerDate {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private LockerDate startDate;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        private LockerDate endDate;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLockerDate() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * A copy constructor to store the details of the edited usage."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * @param copyEditDate stores the details that are to be edited"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public EditLockerDate(EditLockerDate copyEditDate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setStartDate(copyEditDate.startDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            setEndDate(copyEditDate.endDate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public boolean checkAnyFieldUpdated() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return startDate !\u003d null || endDate !\u003d null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setStartDate(LockerDate startDate) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public void setEndDate(LockerDate endDate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cLockerDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        public Optional\u003cLockerDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 232
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExportLockerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportLockerCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        ui.exportMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.exportAsCsv(lockerList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 12,
      "Tejasvas123": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExportLockerSelectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportLockerSelectCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \" Invalid command format for exporting selection of csv file. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            + \"You must key in \u0027exports\u0027 with tags such as \u0027Locker,Name,Zone\u0027 etc.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exports\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static final String MISSINGLOCKER_FORMAT \u003d \"Unable to export CSV file without \u0027Locker\u0027 input. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            + \"You must key in tags with spaces in between. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            + \"Example: \u0027exports locker zone status name\u0027\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static final String MISSINGSTATUS_FORMAT \u003d \"Unable to pull student info without \u0027Status\u0027 input\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public ExportLockerSelectCommand(String arg) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        this.argument \u003d arg;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        ui.exportSelect();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        storage.exportSelection(lockerList,argument);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.StudentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private final FindLocker findLocker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private final FindStudent findStudent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final String INVALID_FORMAT \u003d  \" Invalid command format for find command.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            + \"\\n     1. A least one token should be present (s/ a/ z/ c/ n/ i/ e/ m/ f/ t/ p/)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            + \"\\n     2. There should not include any text between the command word and the first token\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            + \"\\n     3. Keywords to be searched for should have the exact number of characters.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This constructor instantiates the FindCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param findLocker stores the attribute of the locker to be found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param findStudent stores the details of the student for the locker to be found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public FindCommand(FindLocker findLocker, FindStudent findStudent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.findLocker \u003d new FindLocker(findLocker);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.findStudent \u003d new FindStudent(findStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        List\u003cLocker\u003e containsMatchedLocker \u003d lockerList.getLockerList().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .filter(s -\u003e s.compare(this.findLocker, this.findStudent))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        ui.printFoundLockers(containsMatchedLocker);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static class FindLocker {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public FindLocker() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         * A copy constructor used to copy the contents of the locker to be found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public FindLocker(FindLocker findLocker) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setSerialNumber(findLocker.serialNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setAddress(findLocker.address);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setZone(findLocker.zone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setTag(findLocker.tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         * This function checks that there is at least one field is filled."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public boolean missingFields() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return (serialNumber !\u003d null || address !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    || zone !\u003d null || tag !\u003d null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return serialNumber;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Address getAddress() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return address;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Zone getZone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return zone;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Tag getTag() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return tag;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static class FindStudent {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private StudentId studentId;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public FindStudent() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         * A copy constructor used to copy the details of a student."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public FindStudent(FindStudent findStudent) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setName(findStudent.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setMatricNumber(findStudent.studentId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setEmail(findStudent.email);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            setMajor(findStudent.major);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setMatricNumber(StudentId studentId) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         * This function checks that there is at least one field is filled."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public boolean missingFields() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return (name !\u003d null || studentId !\u003d null"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    || email !\u003d null || major !\u003d null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public StudentId getStudentID() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return studentId;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Email getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return email;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public Major getMajor() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return major;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 178,
      "Tejasvas123": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 4,
      "Zhubo225": 11
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Command to list all the lockers managed by SpongeBob."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printList(lockerList.getLockerList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RemindersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class RemindersCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminders\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        Tag unauthorized \u003d new Tag(\"unauthorized\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        Tag broken \u003d new Tag(\"broken\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        String dateNow \u003d now.format(DateTimeFormatter.ofPattern(\"dd-MM-uuuu\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        LocalDate localDateNow \u003d LocalDate.parse(dateNow,formatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        List\u003cLocker\u003e containsExpiringLockers \u003d lockerList.getLockerList().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .filter(s -\u003e s.findExpiryDate(localDateNow))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        List\u003cLocker\u003e containsUnauthorizedLockers \u003d lockerList.getLockerList().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .filter(p -\u003e p.getTag().equals(unauthorized))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        List\u003cLocker\u003e containsBrokenLockers \u003d lockerList.getLockerList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .filter(p -\u003e p.getTag().equals(broken))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        ui.printReminders(containsExpiringLockers, containsUnauthorizedLockers, containsBrokenLockers);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 43,
      "Tejasvas123": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.ObjectComparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private final String sortBy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private final int checkAscOrDes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortby\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final String INVALID_FORMAT \u003d  \" Invalid command format for sort command.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            + \"\\n     1. Only one of the token should be present (asc/ or dsc/)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            + \"\\n     2. Keywords to use are, \u0027serialnumber\u0027, \u0027address\u0027, \u0027zone\u0027, \u0027tags\u0027. \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This constructor instantiates the SortCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param sortBy stores the attribute of the locker to be sorted by."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param checkAscOrDes stores a flag to indicate if the command is ascending or descending."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public SortCommand(String sortBy, int checkAscOrDes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.sortBy \u003d sortBy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.checkAscOrDes \u003d checkAscOrDes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkAscOrDes \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            if (this.sortBy.equals(\"serialNumber\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.SerialNumberComparatorAsc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"address\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.AddressComparatorAsc);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"zone\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.ZoneComparatorAsc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"tags\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.TagComparatorAsc);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkAscOrDes \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            if (this.sortBy.equals(\"serialNumber\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.SerialNumberComparatorDes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"address\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.AddressComparatorDes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"zone\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.ZoneComparatorDes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (this.sortBy.equals(\"tags\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                Collections.sort(lockerList.getLockerList(), ObjectComparator.TagComparatorDes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ui.printSortedLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 72,
      "Tejasvas123": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int zone \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int address \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int tag \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int len \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function lists out the stats for each tag."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static void readStats(List\u003cLocker\u003e lockerList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Map\u003cString,Integer\u003e mapZone \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Map\u003cString,Integer\u003e mapAddress \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Map\u003cString,Integer\u003e mapTag \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            String[] details \u003d new String[len];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (Locker l : lockerList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                Integer temp \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[zone] \u003d l.getZone().getZone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[address] \u003d l.getAddress().getAddress();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[tag] \u003d l.getTag().getTagName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[zone] \u003d details[zone].toUpperCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[address] \u003d details[address].toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[tag] \u003d details[tag].toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[zone] \u003d details[zone].toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[address] \u003d details[address].toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (!mapZone.containsKey(details[zone])) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapZone.put(details[zone],temp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapZone.replace(details[zone], mapZone.get(details[zone]) + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (!mapAddress.containsKey(details[address])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapAddress.put(details[address],temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapAddress.replace(details[address], mapAddress.get(details[address]) + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (!mapTag.containsKey(details[tag])) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapTag.put(details[tag],temp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    mapTag.replace(details[tag], mapTag.get(details[tag]) + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            ui.printStats(mapZone, mapAddress, mapTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(\" Unable to get stats \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void execute(LockerList lockerList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        ui.readStats();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        readStats(lockerList.getLockerList(),ui);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 79
    }
  },
  {
    "path": "src/main/java/duke/models/LockerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the list of lockers that are currently being managed by SpongeBob."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String NO_LOCKER_FOUND \u003d \" There are no lockers associated to \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"the serial number entered\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String DUPLICATE_LOCKERS_FOUND \u003d \" Duplicate entries not allowed. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"Serial number for every locker should be unique\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int EMPTY_LIST \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cLocker\u003e lockerList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList(List\u003cLocker\u003e lockerList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.lockerList \u003d lockerList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the locker is already present in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param newLocker list of lockers to be checked"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the locker is present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isPresentLocker(Locker newLocker) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(newLocker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .anyMatch(locker -\u003e locker.hasSameSerialNumber(newLocker));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the lockers are already present in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param newLockers list of lockers to be checked"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if at least one of the locker is present"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean areLockersPresent(List\u003cLocker\u003e newLockers) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(newLockers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (Locker newLocker: newLockers) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (isPresentLocker(newLocker)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns all the lockers that match a given property."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param isMatching stores the predicate for matching"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return list of lockers that match the given predicate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getMatchingLockers(Predicate\u003cLocker\u003e isMatching) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(isMatching);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .filter(isMatching)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns a list of lockers that are tagged with the not-in-use tag."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param availableTag tag used to check if the locker is currently not-in-use"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return list of available/not-in-use lockers"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getAnyAvailableLocker(Tag availableTag) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(availableTag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .filter(locker -\u003e locker.getTag().equals(availableTag))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns a locker that is associated with the the serial number."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumberToFind stores the serial number"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return locker with the given serial number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if there are no lockers associated with the serial number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Locker getLockerToEdit(SerialNumber serialNumberToFind) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumberToFind);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e checkAllLockers \u003d lockerList.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .filter(locker -\u003e locker.getSerialNumber().equals(serialNumberToFind))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (checkAllLockers.size() \u003d\u003d EMPTY_LIST) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(NO_LOCKER_FOUND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return checkAllLockers.get(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Adds a locker to the list of lockers."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerToAdd stores the locker to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addLocker(Locker lockerToAdd) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerToAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.add(lockerToAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Adds a locker to the specified position."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerToAdd stores the locker to be added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param index stores the zero-based position at which the locker is to be added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addLockerAtPosition(Locker lockerToAdd, int index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.add(index, lockerToAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Sets a locker at the specified position. The locker already present at that position"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * is replaced by the new locker."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param newLocker stores the locker to be added"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param index stores the zero-based index at which the locker is to be added"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setLockerInPosition(Locker newLocker, int index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(newLocker);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.set(index, newLocker);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Adds multiple lockers to the list of lockers."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockersToAdd stores the list of lockers that are to be added"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addAllLockersInList(List\u003cLocker\u003e lockersToAdd) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockersToAdd);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.addAll(lockersToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Deletes the {@lockerToDelete} from the list of lockers."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteLocker(Locker lockerToDelete) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerToDelete);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.remove(lockerToDelete);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Empties the locker list. Used for deleting all the lockers from SpongeBob."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void removeAllLockers() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        lockerList.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Locker getLocker(int index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.get(index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int getIndexOfLocker(Locker locker) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(locker);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.indexOf(locker);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int numLockers() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList.size();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"lockers\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cLocker\u003e getLockerList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return lockerList;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonSetter(\"lockers\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setLLockerList(List\u003cLocker\u003e lockerList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.lockerList \u003d lockerList;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 183
    }
  },
  {
    "path": "src/main/java/duke/models/ObjectComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class ObjectComparator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private Zone zone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This constructor instantiates the ObjectComparator object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param locker stores the locker attributes to be compared."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public ObjectComparator(Locker locker) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.serialNumber \u003d locker.getSerialNumber();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.address \u003d locker.getAddress();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.zone \u003d locker.getZone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        this.tag \u003d locker.getTag();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e SerialNumberComparatorAsc \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker sn1, Locker sn2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String serialNumber1 \u003d sn1.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String serialNumber2 \u003d sn2.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //ascending order"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return serialNumber1.compareTo(serialNumber2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e AddressComparatorAsc \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker a1, Locker a2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String address1 \u003d a1.getAddress().getAddress();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String address2 \u003d a2.getAddress().getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //ascending order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return address1.compareTo(address2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e ZoneComparatorAsc \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker z1, Locker z2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String zone1 \u003d z1.getZone().getZone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String zone2 \u003d z2.getZone().getZone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //ascending order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return zone1.compareTo(zone2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e TagComparatorAsc \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker t1, Locker t2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String tag1 \u003d t1.getTag().getTagName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String tag2 \u003d t2.getTag().getTagName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //ascending order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return tag1.compareTo(tag2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e SerialNumberComparatorDes \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker sn1, Locker sn2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String serialNumber1 \u003d sn1.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String serialNumber2 \u003d sn2.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //descending order"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return serialNumber2.compareTo(serialNumber1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e AddressComparatorDes \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker a1, Locker a2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String address1 \u003d a1.getAddress().getAddress();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String address2 \u003d a2.getAddress().getAddress();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //descending order"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return address2.compareTo(address1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e ZoneComparatorDes \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker z1, Locker z2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String zone1 \u003d z1.getZone().getZone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String zone2 \u003d z2.getZone().getZone();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //descending order"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return zone2.compareTo(zone1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static Comparator\u003cLocker\u003e TagComparatorDes \u003d new Comparator\u003cLocker\u003e() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        public int compare(Locker t1, Locker t2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String tag1 \u003d t1.getTag().getTagName();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String tag2 \u003d t2.getTag().getTagName();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            //descending order"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return tag2.compareTo(tag1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 140
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the address associated with a locker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Addresses can take any value,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"but it should not be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CHECK_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the object with the address value passed to it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the address"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the address is in a invalid format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Address(@JsonProperty(\"address\") String address) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidAddress(address)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the address is valid i.e is not empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidAddress(String address) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"address\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /*Need to override equals and hashCode in order to account"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "      for user defined checks for streams"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are same"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Address //handles all the cases for null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 address.equalsIgnoreCase(((Address) other).address));// check for equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 61
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Locker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores all the information pertaining to a locker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Locker {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Zone zone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Usage usage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores all the information regarding the status of the locker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial numbers associated with each locker"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address      stores the location of the locker"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone         stores the zone to which the locker belongs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tag          instance of the class Tag that stores the status of the locker"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Locker(@JsonProperty(\"LockerSerial\") SerialNumber serialNumber,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"LockerAddress\") Address address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"LockerZone\") Zone zone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"LockerTag\") Tag tag,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                  @JsonProperty(\"Usage\") Usage usage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.zone \u003d zone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setStatusAsInUse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tag.tagName \u003d Tag.IN_USE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the locker is currently being used i.e checks if it is currently subscribed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * by a student."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if it is in-use"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the tag is invalid"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isOfTypeInUse() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getUsage().isPresent() \u0026\u0026 getTag().equals(new Tag(Tag.IN_USE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks whether the locker as the same status as {@code checkTag} ."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean hasSameTagAs(Tag checkTag) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getTag().equals(checkTag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the locker is of invalid type as per the constraints."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the locker is of invalid type, false otherwise"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the Tag is invalid"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isOfInValidType() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag testInUse \u003d new Tag(Tag.IN_USE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (hasSameTagAs(testInUse) \u0026\u0026 getUsage().isEmpty())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (!hasSameTagAs(testInUse) \u0026\u0026 getUsage().isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the locker is already present in the lockerList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param other to check if the object is already present"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the object is present, false otherwise"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean hasSameSerialNumber(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Locker)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.getSerialNumber().equals(((Locker) other).getSerialNumber());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Converts the locker info into displayable strings."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a string in a format that can be used for printing out the current locker"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return \" Locker #\" + serialNumber.getSerialNumberForLocker() + \": \" + \"Area: \" + address.getAddress()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" Zone: \" + zone.getZone()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" [\" + getTag().tagName + \"]\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function is used to convert the serial number of a locker into displayable strings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @return a string in a format that can be used for printing out the serial number of a locker"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public String serialNumberToString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        return serialNumber.getSerialNumberForLocker();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function is used to convert the tag of a locker into displayable strings."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @return a string in a format that can be used for printing out the tag of a locker"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public String tagToString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        return getTag().tagName;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function is used to convert the located zone of a locker into displayable strings."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @return a string in a format that can be used for printing out the located zone of a locker"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public String zoneToString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        return zone.getZone();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function is used to convert the located area of a locker into displayable strings."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @return a string in a format that can be used for printing out the located area of a locker"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public String areaToString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        return address.getAddress();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"LockerTag\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"LockerSerial\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"LockerAddress\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"LockerZone\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Zone getZone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"Usage\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Optional\u003cUsage\u003e getUsage() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Optional.ofNullable(usage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setUsage(Usage usage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both objects are the same"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Locker)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //handles all the cases for null and irrelevant references"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker otherLocker \u003d (Locker) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherLocker.getSerialNumber().equals(this.getSerialNumber())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getZone().equals(this.getZone())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getTag().equals(this.getTag())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getUsage().equals(this.getUsage());//handles checks for equality"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(serialNumber, address, zone, tag);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function is used to compare the locker info with a locker that was searched."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This is used in conjunction with Java in-streams."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param findLocker has all or some the attributes the locker that was searched for."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param findStudent has all or some the details of the student that was searched for."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @return refers to a boolean value to check if the comparison was true or false."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public boolean compare(FindCommand.FindLocker findLocker, FindCommand.FindStudent findStudent) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (findLocker.getSerialNumber() !\u003d null \u0026\u0026 findLocker.getSerialNumber().equals(this.getSerialNumber())) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (findLocker.getAddress() !\u003d null \u0026\u0026 findLocker.getAddress().equals(this.getAddress())) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (findLocker.getZone() !\u003d null \u0026\u0026 findLocker.getZone().equals(this.getZone())) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (findLocker.getTag() !\u003d null \u0026\u0026 findLocker.getTag().equals(this.getTag())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Student student \u003d this.usage.getStudent();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            if (findStudent.getName() !\u003d null \u0026\u0026 findStudent.getName().equals(student.getName())) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (findStudent.getStudentID() !\u003d null \u0026\u0026 findStudent.getStudentID()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    .equals(student.getStudentId())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (findStudent.getEmail() !\u003d null \u0026\u0026 findStudent.getEmail()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    .equals(student.getEmail())) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else if (findStudent.getMajor() !\u003d null \u0026\u0026 findStudent.getMajor()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    .equals(student.getMajor())) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function checks if the expiry date is within 3 days of the current date."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param now which refers to the current date."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @return refers to a boolean value to check if the comparison was true or false."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public boolean findExpiryDate(LocalDate now) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            String endDate \u003d this.usage.getEndDate().getDate();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            LocalDate expiryDate \u003d LocalDate.parse(endDate,formatter);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            int daysBetween \u003d (int) DAYS.between(now, (Temporal) expiryDate);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            if (daysBetween \u003c\u003d 7) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 82,
      "Tejasvas123": 161,
      "Zhubo225": 32
    }
  },
  {
    "path": "src/main/java/duke/models/locker/LockerDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores all the rental subscription date for the locker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerDate {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" The date should satisfy the following constraints:\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n\\n      1. Should be a valid date as per the Gregorian Calendar.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      2. Should be in the format of \u003cDD-MM-YYYY\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_IN_DATE_DIFFERENCE \u003d \" The rental period \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" should satisfy the following constraints:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. The end date should be after the start date.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. The rental period should be between 7 to 365 days (inclusive).\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     3. The rental ending date cannot be before the current date.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd-MM-uuuu\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final DateTimeFormatter checkDateFormat \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeFormatter.ofPattern(DATE_FORMAT).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor is used to instantiate a valid Date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date that is to be assigned to the member field"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date is in invalid format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate(@JsonProperty(\"date\") String date) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidDate(date)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Check whether the date is in correct format or not."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date that is to be tested for its validity."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the date is in valid format, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LocalDate.parse(date, checkDateFormat);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Check if the there is a difference of at least 7 days"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * between the two dates (start and end date for rental period)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate the starting date of locker subscription"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate the end date of locker subscription"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the difference is valid, false otherwise"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean isDifferenceBetweenDatesValid(String startDate, String endDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localStartDate \u003d LocalDate.parse(startDate, checkDateFormat);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localEndDate \u003d LocalDate.parse(endDate, checkDateFormat);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        long daysBetween \u003d localStartDate.until(localEndDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (daysBetween \u003c\u003d 6 || daysBetween \u003e 365) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks whether the ending date for locker subscription is before the current date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate the rental ending date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param currentDate the current date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the ending date is before the current date, false otherwise"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean isEndDateBeforeCurrentDate(String endDate, String currentDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localEndDate \u003d LocalDate.parse(endDate, checkDateFormat);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate localCurrentDate \u003d LocalDate.parse(currentDate, checkDateFormat);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        long daysBetween \u003d localEndDate.until(localCurrentDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (daysBetween \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"date\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override function equals and hashCode() in order"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       to account for user defined checks for equality using streams"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if both the objects are the same"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof LockerDate //checks for all instances of null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 date.equals(((LockerDate) other).date)); //check for equality"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 1,
      "Tejasvas123": 116
    }
  },
  {
    "path": "src/main/java/duke/models/locker/SerialNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the serial number of the locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class SerialNumber {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Serial number can only be a non-negative integer with no more\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"than six digits and it cannot be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int CHECK_SIX_DIGITS \u003d 6;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String CHECK_REGEX \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String REGEX_FOR_LEADING_ZEROES \u003d \"^0+(?!$)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public final String serialNumberForLocker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the class with the serial number passed to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number assigned to a locker"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the serial number is in invalid format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public SerialNumber(@JsonProperty(\"serialNumber\") String serialNumber) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.serialNumberForLocker \u003d serialNumber.replaceFirst(REGEX_FOR_LEADING_ZEROES, \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks whether the {@code serialNumberForLocker} is valid or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * A valid serial number is a non-negative integer which has at most six digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the serial number is valid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidSerialNumber(String serialNumberForLocker) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker.replaceFirst(REGEX_FOR_LEADING_ZEROES, \"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .matches(CHECK_REGEX)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 serialNumberForLocker.replaceFirst(REGEX_FOR_LEADING_ZEROES, \"\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .length() \u003c\u003d CHECK_SIX_DIGITS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"serialNumber\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getSerialNumberForLocker() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are the same"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof SerialNumber //handles all cases for null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 serialNumberForLocker"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .equals(((SerialNumber) other).serialNumberForLocker)); //checks for equality"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return serialNumberForLocker.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 67
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Usage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores all the information required for the subscription of a locker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Usage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final LockerDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the subscription details for the locker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param student stores the details associated with students"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate stores the starting date of the locker subscription"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate stores the ending date of the locker subscription"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Usage(@JsonProperty(\"student\") Student student,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                 @JsonProperty(\"startDate\") LockerDate startDate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                 @JsonProperty(\"endDate\") LockerDate endDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"student\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"startDate\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate getStartDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"endDate\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerDate getEndDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return super.toString() + \"\\n      \" + \"Name: \" + student.getName().getName()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \" StudentID:\" + student.getStudentId().getStudentId();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override functions equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both represent the same objects"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Usage)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //accounts for all null cases and irrelevant references"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage otherLocker \u003d (Usage) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherLocker.getStudent().equals(this.getStudent())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getStartDate().equals(this.getStartDate())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 otherLocker.getEndDate().equals(this.getEndDate()); //all equality checks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(student, startDate, endDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 85
    }
  },
  {
    "path": "src/main/java/duke/models/locker/Zone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the zone associated with a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Zone {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Zone should consist of only 1 letter \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "           + \"and cannot be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int SINGLE_LETTER \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CHECK_REGEX \u003d \"^[a-zA-Z]*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String zone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor is used to instantiate the class with the zone value passed to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone assigned to a locker"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when zone is in invalid format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Zone(@JsonProperty(\"Zone\") String zone) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidZone(zone)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.zone \u003d zone.toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the zone is valid or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * A zone is valid if it contains only a single alphabet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone string to be tested for validity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the zone is valid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidZone(String zone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone.matches(CHECK_REGEX)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 zone.length() \u003d\u003d SINGLE_LETTER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"Zone\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getZone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override functions equals() and hashCode() in order to account for"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       used defined checking for equality while using streams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //short circuit if the two objects are the same"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Zone //handles all cases for null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 zone.equalsIgnoreCase(((Zone) other).zone)); //checks for equality"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return zone.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 66
    }
  },
  {
    "path": "src/main/java/duke/models/student/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the email id of the student renting a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Email ID consists of two parts local-part@domain\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and should satisfy the following constraints:\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n\\n      1. The local-part and the domain name are separated by \u0027@\u0027\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      2. The local-part should contain only alphanumeric characters and special symbols\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" like (!#$%\u0026\u0027*+/\u003d?`{|}~^.-)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      3. The domain name should contain at least two characters and start and end with \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"alphanumeric characters\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      4. The domain name should consists of only alphanumeric characters, a \u0027.\u0027 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"or a \u0027-\u0027 in the middle (optional)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String VALID_REGEX \u003d \"^[\\\\w\" + \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\" + \"]+\" + \"@\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"[^\\\\W_]\" +  \"[a-zA-Z0-9.-]*\" + \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the email id of a student."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of a student"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if email id is invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Email(@JsonProperty(\"email\") String email) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidEmail(email)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the email-id is valid or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * An email id is considered valid if it satisfies all the conditions mentioned in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * {@code ERROR_MESSAGE}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email the email id to be tested for validity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the email id is valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidEmail(String email) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email.matches(VALID_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"email\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override functions equals and hashCode() in order to account"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks for equality while using streams."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit if both objects are the same"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Email // checks for all null values and irrelevant instances"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.email.equals(((Email) other).email)); //checks for equality"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 73
    }
  },
  {
    "path": "src/main/java/duke/models/student/Major.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the major/course pursued by the student renting a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Major should contain only alphanumeric characters\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and spaces and it should not be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CHECK_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String course;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the course/major of the student."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param course stores the course that the student is currently pursuing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the course is in invalid format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Major(@JsonProperty(\"major\") String course) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(course);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidCourse(course)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the course pursued by the student is valid or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * A valid course contains only alpha numeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param course stores the course tested for its validity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the course is valid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidCourse(String course) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return course.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"major\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getCourse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return course;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals and hashCode in order to account for"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks for equality while using streams"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit if both the objects are the same"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Major //handles all null instances and other irrelevant references"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 course.equalsIgnoreCase(((Major) other).course)); //checks for equality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return course.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 65
    }
  },
  {
    "path": "src/main/java/duke/models/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the name of the student renting a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Name should contain only alpha numeric characters\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" and should not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CHECK_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the name of the student."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the name is in invalid format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Name(@JsonProperty(\"name\") String name) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidName(name)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the name is invalid i.e whether it contains only alpha numeric characters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name that is to be tested for its validity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the name is valid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"name\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* We need to override functions equals and hashCode in order to account for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "           user defined checks for equality while using streams."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return other \u003d\u003d this //checks whether the two objects are the same and short circuit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Name //checks for null references and other irrelevant cases"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 name.trim().equalsIgnoreCase(((Name) other).name.trim())); //checks for the equality"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 64
    }
  },
  {
    "path": "src/main/java/duke/models/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores all the information pertaining to a student renting a locker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final StudentId studentId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the student and all its properties."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param studentId stores the student ID of the student"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of the student"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param major stores the major/course of the student"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Student(@JsonProperty(\"studentName\") Name name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                   @JsonProperty(\"studentId\") StudentId studentId,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                   @JsonProperty(\"studentEmail\") Email email,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                   @JsonProperty(\"studentMajor\") Major major) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"studentName\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"studentId\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public StudentId getStudentId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"studentEmail\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"studentMajor\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /*Need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "      for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true; //both the objects are the same"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false; //checks for all null cases and irrelevant instances"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (this.getName().equals(otherStudent.getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getEmail().equals(otherStudent.getEmail())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getStudentId().equals(otherStudent.getStudentId())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 this.getMajor().equals(otherStudent.getMajor())); //checks for equality"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Objects.hash(name, studentId, email, major);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 87
    }
  },
  {
    "path": "src/main/java/duke/models/student/StudentId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the student id of the student renting a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class StudentId {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \" Matriculation number should contain only \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"alpha numeric characters and should have only 9 characters. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n\\n     It should satisfy the following constraints:\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      1. It should start with the character \u0027A\u0027\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      2. It should end with a letter\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n      3. It should contain only digits between the first and the last character\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CHECK_REGEX \u003d \"[Aa]\\\\d{7}[a-zA-Z]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the student ID  of the student."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param studentId stores the student ID of the student"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the student ID is in invalid format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public StudentId(@JsonProperty(\"id\") String studentId) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkIsValidStudentId(studentId)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"id\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getStudentId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkIsValidStudentId(String studentId) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return studentId.matches(CHECK_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override functions equals() and hashCode() in order to account for"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       user defined checks about equality while using streams"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //checks if the two objects are the same"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof StudentId //checks for all null instances and irrelevant references"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 studentId.equalsIgnoreCase(((StudentId) other).studentId)); //checks for equality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return studentId.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 65
    }
  },
  {
    "path": "src/main/java/duke/models/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the status of a locker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String IN_USE \u003d \"in-use\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String NOT_IN_USE \u003d \"not-in-use\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String UNAUTHORIZED \u003d \"unauthorized\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String BROKEN \u003d \"broken\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final String INVALID_TAG_NAME \u003d \"Tag names can either be:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1.\u003cin-use\u003e\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2.\u003cnot-in-use\u003e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     3.\u003cunauthorized\u003e\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     4.\u003cbroken\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the status of the locker that it is associated with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tagName stores a valid tagName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the tagName is invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Tag(@JsonProperty(\"tagName\") String tagName) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkValidTagName(tagName)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(INVALID_TAG_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.tagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the tag name is valid or not i.e whether it is in-use, not-in-use, available"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * or broken."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param test stores the string that is to be tested"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the tag name is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean checkValidTagName(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (test.equalsIgnoreCase(IN_USE) || test.equalsIgnoreCase(NOT_IN_USE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || test.equalsIgnoreCase(UNAUTHORIZED) || test.equalsIgnoreCase(BROKEN));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return \"[\" + tagName + \"]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @JsonGetter(\"tagName\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /* Need to override function equals() and hashCode() in order to account"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "       for user defined checks for equality while using streams"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this \u003d\u003d other //short circuit for being the same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || (other instanceof Tag //handles all null cases and other irrelevant instances"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                \u0026\u0026 tagName.equalsIgnoreCase(((Tag) other).tagName));//checks for equality"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 76
    }
  },
  {
    "path": "src/main/java/duke/models/util/ModelChecks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Usage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Performs all the sanity checks to ensure that the file from which the data is read is not"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * corrupted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ModelChecks {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd-MM-uuuu\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks whether all entries are valid in the lockerList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerList stores the entire LockerList to be checked"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the entries are valid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException caused by chaining of functions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static boolean areAllEntriesValid(LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e lockersToCheck \u003d lockerList.getLockerList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c lockersToCheck.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Locker lockerToCheck \u003d lockersToCheck.get(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerList.deleteLocker(lockerToCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (lockerList.isPresentLocker(lockerToCheck) || lockerToCheck.isOfInValidType()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (lockerToCheck.isOfTypeInUse() \u0026\u0026 !areChecksForUsageValid(lockerToCheck)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerToCheck \u003d getLockerToAdd(lockerToCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            lockerList.addLockerAtPosition(lockerToCheck, i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks whether there are any errors with the subscription of the lockers."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param checkUsage the locker whose subscription is to be checked"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return true if the checks are valid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean areChecksForUsageValid(Locker checkUsage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assert checkUsage.getUsage().isPresent();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage checkForValidity \u003d checkUsage.getUsage().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return LockerDate.isDifferenceBetweenDatesValid(checkForValidity.getStartDate().getDate(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                checkForValidity.getEndDate().getDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Adds a new locker to the list in case the subscription of the current locker is before the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * current date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static Locker getLockerToAdd(Locker locker) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (locker.isOfTypeInUse()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            assert locker.getUsage().isPresent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Usage usage \u003d locker.getUsage().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (LockerDate.isEndDateBeforeCurrentDate("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    usage.getEndDate().getDate(), formatter.format(localDate))) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                return new Locker(locker.getSerialNumber(), locker.getAddress(), locker.getZone(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        new Tag(Tag.NOT_IN_USE), null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return locker;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 77
    }
  },
  {
    "path": "src/main/java/duke/models/util/SampleData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Contains methods for populating SpongeBob with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class SampleData {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static Locker[] getSampleLockers() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Locker[]{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"1\"), new Address(\"Com-1\"), new Zone(\"A\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber((\"2\")), new Address(\"Com-1\"), new Zone(\"A\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber((\"3\")), new Address(\"Com-1\"), new Zone(\"A\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"4\"), new Address(\"Com-1\"), new Zone(\"A\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.UNAUTHORIZED), null),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"5\"), new Address(\"Com-1\"), new Zone(\"A\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.BROKEN), null),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"6\"), new Address(\"Com-2\"), new Zone(\"B\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"7\"), new Address(\"Com-2\"), new Zone(\"B\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.UNAUTHORIZED), null),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"8\"), new Address(\"Com-2\"), new Zone(\"C\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.BROKEN), null),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"9\"), new Address(\"Com-2\"), new Zone(\"C\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            new Locker(new SerialNumber(\"10\"), new Address(\"Com-2\"), new Zone(\"C\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                       new Tag(Tag.NOT_IN_USE), null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns the sample list of lockers."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static LockerList getSampleLockerList() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerList sampleList \u003d new LockerList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (Locker sampleLocker : getSampleLockers()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            sampleList.addLocker(sampleLocker);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return sampleList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 51
    }
  },
  {
    "path": "src/main/java/duke/parser/AddBatchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AddBatchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SIZE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses user input and creates a new AddBatchCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddBatchCommandParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parse the user input for adding batches (multiple) of lockers to the list of lockers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * It includes all the possible checks for the validity of the command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the command entered by the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the the class AddBatchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command syntax/format is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddBatchCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_SIZE, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_SIZE, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(AddBatchCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SERIAL).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address address \u003d ParserCheck.parseAddress("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone zone  \u003d ParserCheck.parseZone("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ZONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int size \u003d ParserCheck.parseSize("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SIZE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cLocker\u003e addBatchOfLockers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        addBatchOfLockers \u003d addLockersToList(addBatchOfLockers, serialNumber, address, zone, size);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AddBatchCommand(addBatchOfLockers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns true if none of the tokens contain empty values."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            MapTokensToArguments mapTokensToArguments, Token... tokens) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Adds the multiple lockers into a single list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param addBatchOfLockers stores the list of lockers to be added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the starting serial number for the batch of lockers"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the address of the batch"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param size stores the number of lockers to be added as a batch"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the list that will be added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the serial number is invalid"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cLocker\u003e addLockersToList(List\u003cLocker\u003e addBatchOfLockers,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 SerialNumber serialNumber, Address address,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 Zone zone, int size) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(addBatchOfLockers);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            addBatchOfLockers.add("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    new Locker(serialNumber, address, zone, new Tag(Tag.NOT_IN_USE),null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int serial \u003d Integer.parseInt(serialNumber.getSerialNumberForLocker()) + 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            serialNumber \u003d ParserCheck.parseSerialNumber(Integer.toString(serial));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return addBatchOfLockers;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 90
    }
  },
  {
    "path": "src/main/java/duke/parser/AddLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AddLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses input arguments and creates a new AddLockerCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddLockerCommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user input for adding a new locker to the list of lockers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * It includes all checks for validating the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class AddLockerCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddLockerCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ParserTokenizer.tokenize(userInput, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(AddLockerCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_SERIAL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Address address \u003d ParserCheck.parseAddress("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone zone \u003d ParserCheck.parseZone(mapTokensToArguments.getValue(TOKEN_ZONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag tag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker locker \u003d new Locker(serialNumber, address, zone, tag,null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AddLockerCommand(locker);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns true if none of the tokens contain empty values."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent(MapTokensToArguments mapTokensToArguments,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                 Token... tokens) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 62
    }
  },
  {
    "path": "src/main/java/duke/parser/AssignLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AssignLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Usage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.StudentId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_EMAIL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_END_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_PREFERENCES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_START_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENTID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_COURSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses user input and creates a new AssignLockerCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AssignLockerCommandParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if all the entries entered by the user are valid as per"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * the specifications of the assign command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the userInput"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a reference to the AssignLockerCommand()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command is in invalid format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AssignLockerCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_STUDENT_NAME, TOKEN_STUDENTID, TOKEN_EMAIL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_STUDENT_COURSE, TOKEN_START_DATE, TOKEN_END_DATE, TOKEN_PREFERENCES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!checkAllTokensPresent(mapTokensToArguments, TOKEN_STUDENT_NAME, TOKEN_STUDENTID,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_EMAIL, TOKEN_STUDENT_COURSE, TOKEN_START_DATE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_END_DATE, TOKEN_PREFERENCES)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || !mapTokensToArguments.getTextBeforeFirstToken().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(AssignLockerCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Name name \u003d ParserCheck.parseName(mapTokensToArguments.getValue(TOKEN_STUDENT_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        StudentId studentId \u003d ParserCheck.parseMatricNumber("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                mapTokensToArguments.getValue(TOKEN_STUDENTID).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Email email \u003d ParserCheck.parseEmail(mapTokensToArguments.getValue(TOKEN_EMAIL).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Major major \u003d ParserCheck.parseMajor(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_STUDENT_COURSE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate startDate \u003d ParserCheck.parseDate(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_START_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LockerDate endDate \u003d ParserCheck.parseDate(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_END_DATE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cZone\u003e getPreferences \u003d ParserCheck.parsePreferences(mapTokensToArguments.getValue("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                TOKEN_PREFERENCES).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ParserCheck.parseDifferenceBetweenStartAndEndDate(startDate, endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student student \u003d new Student(name, studentId, email, major);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Usage usage \u003d new Usage(student, startDate, endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new AssignLockerCommand(usage, getPreferences);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns true if there are no tokens with empty values."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static boolean checkAllTokensPresent("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            MapTokensToArguments mapTokensToArguments, Token... tokens) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Stream.of(tokens).allMatch(token -\u003e mapTokensToArguments"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getValue(token).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 78
    }
  },
  {
    "path": "src/main/java/duke/parser/DeleteLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.DeleteLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses the user input and creates a new DeleteLocker object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteLockerCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user input for deleting a locker from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class DeleteLockerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteLockerCommand parse(String args) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (args.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(DeleteLockerCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(args.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new DeleteLockerCommand(serialNumber);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 29
    }
  },
  {
    "path": "src/main/java/duke/parser/DeleteUsageCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.DeleteUsageCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses the user input and creates a new DeleteUsageCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteUsageCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user input for deleting the usage of an in-use locker from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class DeleteUsageCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteUsageCommand parse(String args) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (args.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(DeleteUsageCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(args.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new DeleteUsageCommand(serialNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 29
    }
  },
  {
    "path": "src/main/java/duke/parser/EditLockerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditLockerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditLockerCommand.EditLocker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses the user input and creates a new EditLockerCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditLockerCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user input for editing the various fields associated with a locker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class EditLockerCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user input is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditLockerCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_CONDITION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(mapTokensToArguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getTextBeforeFirstToken().trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditLocker editLocker \u003d new EditLocker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForLocker(editLocker, mapTokensToArguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!editLocker.checkAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(EditLockerCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new EditLockerCommand(serialNumber, editLocker);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores all the fields that are to be edited in {@code editLocker} ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param mapTokensToArguments stores the mapping of tokens to arguments"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the command format is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForLocker(EditLocker editLocker,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                        MapTokensToArguments mapTokensToArguments) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_SERIAL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setSerialNumber(ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_SERIAL).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setAddress(ParserCheck.parseAddress("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_ZONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setZone(ParserCheck.parseZone("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ZONE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokensToArguments.getValue(TOKEN_CONDITION).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editLocker.setCondition(ParserCheck.parseStatus("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_CONDITION).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 70
    }
  },
  {
    "path": "src/main/java/duke/parser/EditUsageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand.EditLockerDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand.EditStudent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_END_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_START_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENTID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_COURSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses the user input and returns a new EditUsageCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EditUsageParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user input for editing the subscription details of a in-use locker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to the class EditUsageCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user input is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public EditUsageCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d ParserTokenizer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .tokenize(userInput, TOKEN_STUDENT_NAME, TOKEN_STUDENTID, TOKEN_EMAIL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        TOKEN_STUDENT_COURSE, TOKEN_START_DATE, TOKEN_END_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditStudent editStudent \u003d new EditStudent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        EditLockerDate editDate \u003d new EditLockerDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForStudent(editStudent, mapTokensToArguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getParametersForLockerDate(editDate, mapTokensToArguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(editDate.checkAnyFieldUpdated() || editStudent.checkAnyFieldUpdated())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(EditUsageCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber(mapTokensToArguments"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .getTextBeforeFirstToken());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new EditUsageCommand(serialNumber, editStudent, editDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores all the fields associated to a student that are to be edited in {@code editStudent}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param mapTokens stores the mapping of tokens to their respective arguments"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForStudent(EditStudent editStudent,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                         MapTokensToArguments mapTokens) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setName(ParserCheck.parseName("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENT_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setEmail(ParserCheck.parseEmail("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENTID).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setStudentId(ParserCheck.parseMatricNumber("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENTID).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_STUDENT_COURSE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editStudent.setMajor(ParserCheck.parseMajor("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_STUDENT_COURSE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Stores all the fields associated to the rental period that are to be edited in {@code editDate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param mapTokens stores the mapping of tokens to their respective arguments"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void getParametersForLockerDate(EditLockerDate editDate,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                            MapTokensToArguments mapTokens) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editDate.setStartDate(ParserCheck.parseDate(mapTokens.getValue("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    TOKEN_START_DATE).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (mapTokens.getValue(TOKEN_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            editDate.setEndDate(ParserCheck.parseDate("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    mapTokens.getValue(TOKEN_END_DATE).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 94
    }
  },
  {
    "path": "src/main/java/duke/parser/ExportLockerSelectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.logic.commands.ExportLockerSelectCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportLockerSelectCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function is used to parse the user input for exporting the details as a CSV file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @param args this is the user input string for the tags that the user wants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @return reference to the class ExportLockerSelectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @throws DukeException when the user input is invalid"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public ExportLockerSelectCommand parse(String args) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        args \u003d args.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        int checkLocker \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        int checkStatus \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        String[] newArgs \u003d args.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        if (args.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(ExportLockerSelectCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (String str : newArgs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (str.equals(\"locker\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    checkLocker \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (checkLocker \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                throw new DukeException(ExportLockerSelectCommand.MISSINGLOCKER_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (String str : newArgs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (str.equals(\"status\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    checkStatus \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (checkStatus \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                for (String str : newArgs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"name\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"matrixid\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"course\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"email\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"startdate\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (str.equals(\"enddate\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        throw new DukeException(ExportLockerSelectCommand.MISSINGSTATUS_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            return new ExportLockerSelectCommand(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 70
    }
  },
  {
    "path": "src/main/java/duke/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.student.StudentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_SERIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ZONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_CONDITION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ADDRESS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_COURSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENT_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_STUDENTID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_EMAIL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function is used to parse the user input for finding a locker to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * Later it will include all checks for validating the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @return reference to the class FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public FindCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ParserTokenizer.tokenize(userInput, TOKEN_SERIAL, TOKEN_ADDRESS, TOKEN_ZONE, TOKEN_CONDITION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                        TOKEN_STUDENT_NAME, TOKEN_STUDENTID, TOKEN_STUDENT_COURSE, TOKEN_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        FindCommand.FindLocker findLocker \u003d new FindCommand.FindLocker();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        FindCommand.FindStudent findStudent \u003d new FindCommand.FindStudent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_SERIAL)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            SerialNumber serialNumber \u003d ParserCheck.parseSerialNumber("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_SERIAL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findLocker.setSerialNumber(serialNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_ADDRESS)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Address address \u003d ParserCheck.parseAddress("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ADDRESS).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findLocker.setAddress(address);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_ZONE)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Zone zone \u003d ParserCheck.parseZone("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_ZONE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findLocker.setZone(zone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_CONDITION)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Tag tag \u003d ParserCheck.parseStatus("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_CONDITION).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findLocker.setTag(tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_STUDENT_NAME)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Name name \u003d ParserCheck.parseName("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_STUDENT_NAME).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findStudent.setName(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_STUDENTID)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            StudentId studentId \u003d ParserCheck.parseMatricNumber("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_STUDENTID).get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findStudent.setMatricNumber(studentId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_STUDENT_COURSE)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Major major \u003d ParserCheck.parseMajor("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_STUDENT_COURSE).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findStudent.setMajor(major);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_EMAIL)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            Email email \u003d ParserCheck.parseEmail("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    mapTokensToArguments.getValue(TOKEN_EMAIL).get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            findStudent.setEmail(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (!findLocker.missingFields() \u0026\u0026 !findStudent.missingFields()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            throw new DukeException(FindCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        return new FindCommand(findLocker, findStudent);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private static boolean checkTokenPresent(MapTokensToArguments mapTokensToArguments,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                                             Token tokens) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        return mapTokensToArguments.getValue(tokens).isPresent();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 128
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AddLockerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.AddBatchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.AssignLockerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.DeleteLockerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.DeleteUsageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditLockerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.EditUsageCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.RemindersCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ExportLockerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.logic.commands.ExportLockerSelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.ExportLockerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //separates user input into command word and arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final Pattern GENERAL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandType\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String COMMAND_TYPE \u003d \"commandType\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ARGUMENTS \u003d \"arguments\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String INVALID_FORMAT \u003d \" The command entered has invalid format. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"Type help to check all the commands available in SpongeBob\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final String STATS_COMMAND \u003d \"stats\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the command entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param fullCommand stores the command entered by the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return objects of type Command depending on the command given by the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the user inputs invalid command i.e in a an unexpected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(fullCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Matcher commandMatch \u003d GENERAL_COMMAND_FORMAT.matcher(fullCommand.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!commandMatch.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String commandType \u003d commandMatch.group(COMMAND_TYPE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String arguments \u003d commandMatch.group(ARGUMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        switch (commandType.toLowerCase()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case AddLockerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case AddBatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddBatchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case AssignLockerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AssignLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case DeleteLockerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DeleteLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case DeleteUsageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DeleteUsageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case EditLockerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new EditLockerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case EditUsageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new EditUsageParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        case ExportLockerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ExportLockerCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        case ExportLockerSelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            return new ExportLockerSelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        case STATS_COMMAND:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            return new StatsCommandParser().parse();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        case RemindersCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new RemindersCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 13,
      "swang1997": 6,
      "Tejasvas123": 66,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserCheck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.LockerDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Zone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Major;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.StudentId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Contains utility methods used for parsing and checking validity of strings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ParserCheck {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String SIZE_ERROR \u003d \" The size of the batch of lockers should satisfy the \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \" following constraints:\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     1. It should be a positive integer.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n     2. It should be within the range of 1 to 30 (inclusive).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String SPLIT_BY_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String PREFERENCES_ERROR \u003d \" There must be at least one valid zone \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"under preferences\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"\\n    \" + Zone.ERROR_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"dd-MM-uuuu\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the serial number for the locker."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param serialNumber stores the serial number that is to be parsed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to a valid SerialNumber"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the serial number has invalid format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!SerialNumber.checkIsValidSerialNumber(serialNumber.trim())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(SerialNumber.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new SerialNumber(serialNumber.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the address for the locker."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param address stores the address that is to be parsed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return reference to a valid Address"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the address has invalid format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Address parseAddress(String address) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Address.checkIsValidAddress(address.trim())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Address.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Address(address.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the zone for the locker."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param zone stores the zone that is to be parsed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid reference to Zone"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the zone has invalid format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Zone parseZone(String zone) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Zone.checkIsValidZone(zone.trim())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Zone.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Zone(zone.trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the number of lockers to be added in bulk/batch."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param size stores the number of lockers to be added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid size in terms of a number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the size is invalid"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static int parseSize(String size) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int numLockers \u003d Integer.parseInt(size.trim());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (numLockers \u003c\u003d 0 || numLockers \u003e 30) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                throw new DukeException(SIZE_ERROR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return numLockers;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(SIZE_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the name of the student."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param name stores the name of the student"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of the student Name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the name is in invalid format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Name parseName(String name) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Name.checkIsValidName(name.trim())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Name.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Name(name.trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parse the matriculation number / student id of the student."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param matricNumber stores the matriculation number of the student"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of MatricNumber"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the matriculation number is in invalid format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static StudentId parseMatricNumber(String matricNumber) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!StudentId.checkIsValidStudentId(matricNumber.trim())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(StudentId.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new StudentId(matricNumber.trim());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the major/course pursued by a student."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param major stores the major of the student"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of Major"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the major is in invalid format"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Major parseMajor(String major) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Major.checkIsValidCourse(major)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Major.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Major(major.trim());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the email of the student."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param email stores the email id of the student"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of Email"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the email is in invalid format"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Email parseEmail(String email) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Email.checkIsValidEmail(email.trim())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Email.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Email(email.trim());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the date for the subscription of the lockers."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param date stores the date for subscription"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a valid instance of LockerDate"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date is in invalid format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static LockerDate parseDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!LockerDate.checkIsValidDate(date)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerDate.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new LockerDate(date.trim());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Parses the user preferences (based on Zone) for allocation of lockers."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param preferences stores the preferences of the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list of all valid zones"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if there are no valid zones in the list of preferences"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static List\u003cZone\u003e parsePreferences(String preferences) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(preferences);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cZone\u003e getPreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e getEachPreference \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        getEachPreference \u003d Arrays.asList(preferences.trim().split(SPLIT_BY_SPACE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Only the preferences with a valid zone name will be added to the list of preferences"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (String s : getEachPreference) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (Zone.checkIsValidZone(s)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                getPreferences.add(parseZone(s));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (getPreferences.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(PREFERENCES_ERROR);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getPreferences;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks if the status of the locker is in the correct format."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param status stores the status to be checked"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return an instance of a valid Tag"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the format for a valid tag is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Tag parseStatus(String status) throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!Tag.checkValidTagName(status)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(Tag.INVALID_TAG_NAME);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new Tag(status);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Checks the difference between dates in order to assure that the rental period has a limit."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startDate stores the starting date for rental"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param endDate stores the ending date for rental"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException if the date is in invalid format"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static void parseDifferenceBetweenStartAndEndDate(LockerDate startDate,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                                             LockerDate endDate) throws DukeException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!LockerDate.isDifferenceBetweenDatesValid(startDate.getDate(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                endDate.getDate())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                || LockerDate.isEndDateBeforeCurrentDate(endDate.getDate(), formatter.format(currentDate))) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(LockerDate.ERROR_IN_DATE_DIFFERENCE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 230
    }
  },
  {
    "path": "src/main/java/duke/parser/RemindersCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.RemindersCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class RemindersCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function is used to parse the user input for editing the status of a locker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @return reference to the class RemindersCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public RemindersCommand parse() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        return new RemindersCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 20
    }
  },
  {
    "path": "src/main/java/duke/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.MapTokensToArguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.ParserTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import duke.parser.utilities.Token;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_ASCENDING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "import static duke.parser.utilities.Syntax.TOKEN_DESCENDING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function is used to parse the user input for sorting the list based on the single argument."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * Later it will include all checks for validating the user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param userInput stores the user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @return reference to the class SortCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @throws DukeException when the command format is invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public SortCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        String sortByInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        int checkAscOrDes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                ParserTokenizer.tokenize(userInput, TOKEN_ASCENDING, TOKEN_DESCENDING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_ASCENDING)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            checkAscOrDes \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            sortByInput \u003d mapTokensToArguments.getValue(TOKEN_ASCENDING).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (checkTokenPresent(mapTokensToArguments,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                TOKEN_DESCENDING)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            checkAscOrDes \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            sortByInput \u003d mapTokensToArguments.getValue(TOKEN_DESCENDING).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            throw new DukeException(SortCommand.INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (sortByInput.equalsIgnoreCase(\"serialNumber\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new SortCommand(\"serialNumber\", checkAscOrDes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (sortByInput.equalsIgnoreCase(\"address\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new SortCommand(\"address\", checkAscOrDes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (sortByInput.equalsIgnoreCase(\"zone\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new SortCommand(\"zone\", checkAscOrDes);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else if (sortByInput.equalsIgnoreCase(\"tags\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            return new SortCommand(\"tags\", checkAscOrDes);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            throw new DukeException(\" Invalid naming convention. \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    + \" \\t Inputs allowed: \\n\" + \" \\t - serialNumber\\n\" + \" \\t - address\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    + \" \\t - zone \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                    + \" \\t - tags \\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    private static boolean checkTokenPresent(MapTokensToArguments mapTokensToArguments,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                                             Token tokens) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        return mapTokensToArguments.getValue(tokens).isPresent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 79
    }
  },
  {
    "path": "src/main/java/duke/parser/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class StatsCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public StatsCommand parse()  {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        return new StatsCommand();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/MapTokensToArguments.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores mapping of tokens to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * can be inserted multiple times for the same token."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class MapTokensToArguments {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Map\u003cToken, List\u003cString\u003e\u003e mapTokensToArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Maps a given string to its corresponding token."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * In this implementation, token is the key for the mapping."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the arguments mapped to a given key."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void setMapping(Token token, String args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e arguments \u003d getAllValues(token);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        arguments.add(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        mapTokensToArguments.put(token, arguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Finds and stores all the arguments mapped to a token."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * There can be multiple arguments for the same token."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token/key for the mapping."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list of all the arguments mapped to the token."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public List\u003cString\u003e getAllValues(Token token) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!mapTokensToArguments.containsKey(token)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ArrayList\u003c\u003e(mapTokensToArguments.get(token));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Finds the argument that was mapped to the token."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token stores the token"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the argument mapped to the token"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Optional\u003cString\u003e getValue(Token token) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        /*In case of multiple arguments related to a prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          this function will return the last argument associated with that token."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "          Optional accounts for the case when the user does not input anything as argument"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e arguments \u003d getAllValues(token);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return arguments.isEmpty() ? Optional.empty() : Optional.of(arguments.get(arguments.size() - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns the text between the command word and the first valid token."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getTextBeforeFirstToken() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getValue(new Token(EMPTY_STRING)).orElse(EMPTY_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 67
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/ParserTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Tokenizes arguments string of the form: {@code textBeforeToken \u003ctoken\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " *     e.g. {@code some random text t/ 11.00 t/12.00 k/ m/ July}  where tokens are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ParserTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int START_POSITION \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final int INVALID_INDEX \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Maps tokens with their valid arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tokens stores the tokens that are expected in the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return mapping of tokens to arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static MapTokensToArguments tokenize(String args, Token... tokens) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //varArgs allow for variable number of arguments passed to a function."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cPositionOfToken\u003e tokenPositions \u003d findAllTokenPositions(args, tokens);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return getMapping(args, tokenPositions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Finds all zero-based token positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args stores the arguments associated with the tokens."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param tokens tokens to find in the arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return list of zero based token positions in the given string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cPositionOfToken\u003e findAllTokenPositions(String args, Token... tokens) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return Arrays.stream(tokens)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .flatMap(token -\u003e findTokenPositions(args, token).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static List\u003cPositionOfToken\u003e findTokenPositions(String args, Token token) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cPositionOfToken\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int tokenPos \u003d findTokenPosition(args, token.getToken(), START_POSITION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        while (tokenPos !\u003d INVALID_INDEX) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            PositionOfToken extendedToken \u003d new PositionOfToken(token, tokenPos);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            positions.add(extendedToken);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tokenPos \u003d findTokenPosition(args, token.getToken(), tokenPos);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns the index of the first occurrence of a token in the string arguments"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * starting from index {@code startFromIndex}. Returns -1 if no such occurrence are"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args the argument string in which the token is to be looked for."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param token the token to find."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param startFromIndex the index from which the search begins."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the index of the first occurence."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static int findTokenPosition(String args, String token, int startFromIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int tokenIndex \u003d args.indexOf(\" \" + token, startFromIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return tokenIndex \u003d\u003d INVALID_INDEX ? INVALID_INDEX : tokenIndex + 1; //tokenIndex + 1 offsets for the whitespace"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Extracts the tokens and their arguments and returns a mapping of the tokens with their"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * respective arguments. Tokens are extracted based on their zero-based positions."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args argument string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param positionOfTokens zero-based index positions of all the tokens."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return MapTokensToArguments object that maps tokens to their arguments."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static MapTokensToArguments getMapping(String args, List\u003cPositionOfToken\u003e positionOfTokens) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Sorting is required as we are trying to implement friendlier syntax where the order of tokens"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //does not matter"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.sort((token1,token2) -\u003e token1.getStartPosition() - token2.getStartPosition());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Add a dummy start position so that it can mark the start of extracting and mapping arguments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        PositionOfToken startPosition \u003d new PositionOfToken(new Token(\"\"), START_POSITION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.add(START_POSITION, startPosition);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //Add a dummy end position so that it can extract the last token and map arguments to it"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        PositionOfToken endPosition \u003d new PositionOfToken(new Token(\"\"), args.length());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        positionOfTokens.add(endPosition);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        MapTokensToArguments mapTokensToArguments \u003d new MapTokensToArguments();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c positionOfTokens.size() - 1; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Token currentToken \u003d positionOfTokens.get(i).getToken();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            //The mapping takes place by considering everything between the two tokens as argument"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String argumentForCurrentToken \u003d extractArgument(args, positionOfTokens.get(i),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    positionOfTokens.get(i + 1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            mapTokensToArguments.setMapping(currentToken, argumentForCurrentToken);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return mapTokensToArguments;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Returns the trimmed value of the argument between the specified start and end position."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param arg the argument string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param currentPos specifies the start position."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param nextPos specifies the end position of the value."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return the trimmed value of argument."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static String extractArgument(String arg, PositionOfToken currentPos,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                                          PositionOfToken nextPos) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Token token \u003d currentPos.getToken();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int startIndex \u003d currentPos.getStartPosition() + token.getToken().length();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (arg.substring(startIndex,nextPos.getStartPosition()).trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 116
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/PositionOfToken.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Stores the starting position for a given token."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class PositionOfToken {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private int startPosition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final Token token;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    PositionOfToken(Token token, int startPosition) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.token \u003d token;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    int getStartPosition() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return startPosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    Token getToken() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 22
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/Syntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Syntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    // Used for command:addLocker"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_SERIAL \u003d new Token(\"s/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_ADDRESS \u003d new Token(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_ZONE \u003d new Token(\"z/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //Used for command: addBatch"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_SIZE \u003d new Token(\"u/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //Used for auto assigning lockers:assign"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENT_NAME \u003d new Token(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENTID \u003d new Token(\"i/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_EMAIL \u003d new Token(\"e/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_STUDENT_COURSE \u003d new Token(\"m/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_START_DATE \u003d new Token(\"f/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_END_DATE \u003d new Token(\"t/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_PREFERENCES \u003d new Token(\"p/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    //Used for command:sortBy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final Token TOKEN_ASCENDING \u003d new Token(\"asc/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public static final Token TOKEN_DESCENDING \u003d new Token(\"des/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    //For locker condition"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static final Token TOKEN_CONDITION \u003d new Token(\"c/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KevinAlvarez7": 4,
      "Tejasvas123": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/utilities/Token.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.parser.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * A token that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Token {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String token;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Token(String token) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.token \u003d token;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getToken() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (!(obj instanceof Token)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Token otherPrefix \u003d (Token) obj;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return otherPrefix.getToken().equals(getToken());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return token \u003d\u003d null ? 0 : token.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 40
    }
  },
  {
    "path": "src/main/java/duke/storage/ExportCsv.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportCsv {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final String CSV_OUTPUT_PATH \u003d \"export.csv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int FIRST_COLUMN \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int SECOND_COLUMN \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int THIRD_COLUMN \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int FORTH_COLUMN \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int FIFTH_COLUMN \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int SIXTH_COLUMN \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int SEVENTH_COLUMN \u003d 6;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int EIGHTH_COLUMN \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int NINTH_COLUMN \u003d 8;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final int TENTH_COLUMN \u003d 9;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function exports a CSV file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static void exportLockers(List\u003cLocker\u003e lockerList) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Writer writer \u003d Files.newBufferedWriter(Paths.get(CSV_OUTPUT_PATH));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            String[] header \u003d {\"Locker\", \"Address\", \"Zone\", \"Status\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                \"Name\", \"Matrix-Number\", \"Course\", \"Email\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                \"Start-Date\",\"End-Date\" };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.writeNext(header);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (Locker l : lockerList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                String[] details \u003d new String[header.length];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[FIRST_COLUMN] \u003d l.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[SECOND_COLUMN] \u003d l.getAddress().getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[THIRD_COLUMN] \u003d l.getZone().getZone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                details[FORTH_COLUMN] \u003d l.getTag().getTagName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (details[FORTH_COLUMN].equals(\"in-use\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[FIFTH_COLUMN] \u003d l.getUsage().get().getStudent().getName().getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    details[SIXTH_COLUMN] \u003d l.getUsage().get().getStudent().getStudentId().getStudentId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[SEVENTH_COLUMN] \u003d l.getUsage().get().getStudent().getMajor().getCourse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[EIGHTH_COLUMN] \u003d l.getUsage().get().getStudent().getEmail().getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[NINTH_COLUMN] \u003d l.getUsage().get().getStartDate().getDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[TENTH_COLUMN] \u003d l.getUsage().get().getEndDate().getDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                csvWriter.writeNext(details);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(\" Unable to export csv \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 76,
      "Tejasvas123": 1
    }
  },
  {
    "path": "src/main/java/duke/storage/ExportSelection.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swang1997"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "public class ExportSelection {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private static final String CSV_OUTPUT_PATH \u003d \"export.csv\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function exports a CSV file based on the input tags keyed in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public static void exportSelect(List\u003cLocker\u003e lockerList, String item) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            ArrayList\u003cString\u003e title \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            item \u003d item.toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"locker\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Locker\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"address\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Address\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"zone\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Zone\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"status\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Status\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"name\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Name\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"matrixid\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"MatrixID\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"course\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Course\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"email\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Email\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"startdate\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"Start-Date\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            if (item.contains(\"enddate\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                title.add(\"End-Date\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            String[] header \u003d new String[title.size()];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (int j \u003d 0; j \u003c title.size(); j++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                header[j] \u003d title.get(j);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            Writer writer \u003d Files.newBufferedWriter(Paths.get(CSV_OUTPUT_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.writeNext(header);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            for (Locker l : lockerList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                int count \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                String zoneStats \u003d \"not-in-use\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                String[] details \u003d new String[header.length];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (title.contains(\"Locker\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[count] \u003d l.getSerialNumber().getSerialNumberForLocker();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (title.contains(\"Address\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[count] \u003d l.getAddress().getAddress();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (title.contains(\"Zone\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[count] \u003d l.getZone().getZone();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (title.contains(\"Status\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    details[count] \u003d l.getTag().getTagName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    zoneStats \u003d details[count];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                if (zoneStats.equals(\"in-use\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"Name\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getStudent().getName().getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"MatrixID\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getStudent().getStudentId().getStudentId();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"Course\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getStudent().getMajor().getCourse();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"Email\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getStudent().getEmail().getEmail();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"Start-Date\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getStartDate().getDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    if (title.contains(\"End-Date\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        details[count] \u003d l.getUsage().get().getEndDate().getDate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                        count +\u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swang1997"
        },
        "content": "                csvWriter.writeNext(details);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(\" Unable to export selected tags to csv file \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swang1997"
        },
        "content": "            throw new DukeException(\" Serial Number is Mandatory, please input \u0027Locker\u0027! \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "swang1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 141
    }
  },
  {
    "path": "src/main/java/duke/storage/FileStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.databind.MapperFeature;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.util.ModelChecks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Saves and loads data from a json file named as \u003ccode\u003e fileName\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class FileStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String FILE_NOT_FOUND \u003d \" Could not find the file. Invalid file name/file path... \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            + \"Will continue with the default list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ERROR_READING_FILE \u003d \" Unable to read file. Will start with the default list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String CORRUPTED_FILE \u003d \" Corrupted file. Will continue with default list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private static final String ERROR_WRITING_FILE \u003d \" Error occurred while writing data to the file\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public FileStorage(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Handles the loading of data from the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list that stores the lockers loaded from the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there are errors while handling/parsing the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList retrieveData() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileInputStream readFile \u003d new FileInputStream(this.fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            LockerList lockers \u003d getObjectMapper().readValue(readFile, LockerList.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            readFile.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (!ModelChecks.areAllEntriesValid(lockers)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                throw new DukeException(CORRUPTED_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return lockers;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_READING_FILE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Saves data from the \u003ccode\u003e storeDataInFile\u003c/code\u003e list into the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param storeDataInFile list of lockers that are to be stored in the file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there are errors while loading data into the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void saveData(LockerList storeDataInFile) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileOutputStream write \u003d new FileOutputStream(this.fileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            getObjectMapper().writeValue(write, storeDataInFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            write.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(ERROR_WRITING_FILE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return new ObjectMapper().registerModule(new Jdk8Module())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .disable(MapperFeature.AUTO_DETECT_CREATORS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_FIELDS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_GETTERS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        MapperFeature.AUTO_DETECT_IS_GETTERS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 81
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * API for the storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void saveData(LockerList dataToStore) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    LockerList retrieveData() throws DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void exportAsCsv(LockerList listToExport) throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    void exportSelection(LockerList lockerList,String input) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 2,
      "Tejasvas123": 16
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.LockerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " * Manages storage of SpongeBob data in local storage and exports data to Csv files."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private FileStorage fileStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private ExportCsv writeToCsv;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    private ExportSelection selectionCsv;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function managers storage data from the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public StorageManager(String fileName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        fileStorage \u003d new FileStorage(fileName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        writeToCsv \u003d new ExportCsv();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        selectionCsv \u003d new ExportSelection();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void saveData(LockerList dataToStore) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(dataToStore);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        fileStorage.saveData(dataToStore);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public LockerList retrieveData() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return fileStorage.retrieveData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void exportAsCsv(LockerList lockerList) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        writeToCsv.exportLockers(lockerList.getLockerList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void exportSelection(LockerList lockerList, String input) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        requireNonNull(lockerList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        selectionCsv.exportSelect(lockerList.getLockerList(),input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 14,
      "Tejasvas123": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.locker.Locker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swang1997"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints a line indented with four spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printDash() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c 120; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            str +\u003d \"_\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printSpaces(String printStr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    \" + printStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints the welcome message every time SpongeBob is initiated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String logo \u003d \"SpongeBob\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello from \" + logo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello! I am SpongeBob. I am here to manage lockers for you!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(\" What can I do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\" If you need any assistance, please type \u0027help\u0027 to access to User Manual.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints the lockers stored in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param printData stores the list of lockers to be printed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printList(List\u003cLocker\u003e printData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Here are the lockers in your list:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showList(printData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Indicates the user that the usage has been deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showDeleteUsage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" I have successfully deleted the usage of the locker.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Tells the user that SpongeBob has added the locker into the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param size stores the number of lockers in the list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is added to the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printAddLocker(int size, String lockerA) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Got it. I have added this locker: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + lockerA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Now, SpongeBob is managing \" + size + \" lockers\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Indicates the user that SpongeBob has added a batch of lockers to the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param num stores the number of lockers that are added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printBatch(int num) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Got it. I have added \" + num + \" lockers\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function reads the stats found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void readStats() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printSpaces(\" Here are the stats found:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function prints the stats found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @param mapZone is the Zone of the Locker."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @param mapAddress is the Address of the Locker."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * @param mapTag is the Tag of the Locker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void printStats(Map\u003cString, Integer\u003e mapZone, Map\u003cString, Integer\u003e mapAddress, Map\u003cString, Integer\u003e mapTag) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.print(\"Zone: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.println(mapZone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.print(\"Address: \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.println(mapAddress);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.print(\"Tag: \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        System.out.println(mapTag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Notifies the user that SpongeBob has successfully assigned"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * the locker for the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param locker stores the string to show the locker that has been assigned"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printSuccessfulAllocation(String locker) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" I have successfully assigned a new locker to the student. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"Here are the details:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + locker);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * prints the message for successful editing of lockers."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param editedLocker stores the data of the edited locker"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showSuccessfullyEdited(String editedLocker) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" I have successfully edited the locker properties.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + editedLocker);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Indicates the user that are no available lockers at the moment."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showNoAvailableLockers() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" There are no available lockers at the moment. \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Unfortunately I will have to terminate the subscription of the student\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void showNumTasks(int size) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Now you have \" + size"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + ((size \u003d\u003d 1) ? \" locker in the list.\" : \" lockers in \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"the list\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints the exit message every time SpongeBob is closed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void exitSpongeBob() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\" Bye! Hope to see you again.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param errorMessage stores the error message."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(errorMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Notifies the user that there were no available lockers in his list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     *  of preferences."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showNoLockersFoundInPreferences() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Unable to find any free lockers in the preferences stated.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Looking for free lockers in the entire system ...\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Notifies the user that SpongeBob has deleted the locker from the list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param numLockers stores the number of lockers left in the list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is deleted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteMessage(int numLockers, String lockerA) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Noted. I have removed this locker:\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"  \" + lockerA);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showNumTasks(numLockers);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Notifies the user that SpongeBob has deleted all the lockers from the list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showAllLockersRemoved() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Noted. I have removed all the lockers from the list.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Notifies the user that SpongeBob has edited the locker from the list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param lockerA stores the locker that is edited"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void editMessage(String lockerA) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"Noted. I have edited the locker to:\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + lockerA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function tells the user that SpongeBob has exported the CSV file."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void exportMessage() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printSpaces(\"Noted. I have exported the details to \u0027export.csv\u0027. \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     * This function tells the user that SpongeBob has exported the CSV file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "swang1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    public void exportSelect() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printSpaces(\"Noted. I have exported the selected details to \u0027export.csv\u0027. \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "swang1997"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "swang1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "swang1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints the message when there is an error in loading data from the file."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message stores the error message."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        printSpaces(message);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for addlocker command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showAddSyntax() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To add a locker into the system:\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  addlocker s/__ a/__ z/__\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for addbatch command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showAddBatchSyntax() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To add a batch of lockers into the system:\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  addbatch s/__ u/__ a/__ z/__\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for deletelocker command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showDeleteSyntax() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To delete a locker from the system:\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  deletelocker XXXX\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for editlocker command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showEditSyntax() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To edit the information of a locker:\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  editlocker XXXX s/__ a/__ z/__ c/__\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"(Note: You can choose to change one or more tokens of the locker\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for assign command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showAssignSyntax() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To assign a locker for rental to a student:\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  assign n/__ i/__ e/__ m/__ f/__ t/__ p/__\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function prints the syntax for find command."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void showFindSyntax() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"To find/search a locker:\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"  find s/__ OR find a/__ OR find z/__ OR find c/__ OR find \""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                + \"OR find n/__ etc.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function prints the syntax for find command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void showSortSyntax() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"To sort the lockers:\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"  sortby asc/ for ascending OR sortby des/ for descending \");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"  sortby serialNumber OR address OR zone OR tags\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the syntax for list and bye command."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showOtherSyntax() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To show the list of lockers:\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  list\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"To show your Reminders:\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\"  reminders\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"To exit SpongeBob:\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"  bye\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the legends for help manual."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showSyntaxLegends() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"-LEGENDS-\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"XXXX - serial number of selected locker\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"s - serial number (addlocker) OR starting serial number (addbatch)\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"u - size\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"a - area\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"z - zone\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"c - condition/tags\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"n - name\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"i - id(matric number)\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"e - email\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"m - major of study\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"f - rental start date\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"t - rental end date\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"p - preferences\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the notes in help manual."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showSyntaxNote() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"(Note: All the tokens can be assigned in any order.)\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the help manual when requested by the user."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(\"HELP MANUAL\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showAddSyntax();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showAddBatchSyntax();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showDeleteSyntax();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showEditSyntax();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showAssignSyntax();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        showFindSyntax();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        showSortSyntax();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showOtherSyntax();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showSyntaxLegends();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        showSyntaxNote();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Prints required number of empty spaces."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param num represents the number of empty spaces wanted."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printEmptySpace(int num) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        for (int i \u003d 0; i \u003c num; i++) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the borders for table of lockers."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListBorder() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        for (int i \u003d 0; i \u003c 75; i++) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            if (i \u003d\u003d 0 || i \u003d\u003d 14 || i \u003d\u003d 28 || i \u003d\u003d 33 || i \u003d\u003d 74) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                str +\u003d \"+\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                str +\u003d \"-\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printSpaces(str);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the headers for table of lockers."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListHeader() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"SERIAL NUMBER\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(5);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"TAG\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(5);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"ZONE\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(18);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"AREA\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(18);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the serial number of a locker for table of lockers."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @param str stores the serial number of a locker."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListSerialNumber(String str) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int trailingSpaces \u003d (13 - str.length()) / 2;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int endingSpaces \u003d 13 - trailingSpaces - str.length();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printEmptySpace(trailingSpaces);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(str);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printEmptySpace(endingSpaces);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the tag of a locker for table of lockers."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @param str stores the tag of a locker."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListTag(String str) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        if (str.equalsIgnoreCase(\"not-in-use\")) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(2);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(str);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(1);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        } else if (str.equalsIgnoreCase(\"in-use\")) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(4);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(str);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(3);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        } else if (str.equalsIgnoreCase(\"unauthorized\")) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(1);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(str);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(4);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(str);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printEmptySpace(3);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the located zone of a locker for table of lockers."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @param str stores the located zone of a locker."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListZone(String str) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(1);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(str);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printEmptySpace(2);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function prints the located area of a locker for table of lockers."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @param str stores the located area of a locker."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void printListArea(String str) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        if (str.length() \u003c 38) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            int numberOfSpaces \u003d 40 - str.length();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            if (numberOfSpaces % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                printEmptySpace(numberOfSpaces / 2);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                System.out.print(str);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                printEmptySpace(numberOfSpaces / 2);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                printEmptySpace((int) Math.floor(numberOfSpaces / 2));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                System.out.print(str);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "                printEmptySpace((int) Math.ceil(numberOfSpaces / 2) + 1);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(str.substring(0, 37));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(\"...\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * This function shows a table of all lockers stored in the system."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     * @param  listOfLockers stores the list of lockers"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    public void showList(List\u003cLocker\u003e listOfLockers) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printListBorder();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printListHeader();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printListBorder();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfLockers.size(); i++) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.print(\"    \");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printListSerialNumber(listOfLockers.get(i).serialNumberToString());"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printListTag(listOfLockers.get(i).tagToString());"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printListZone(listOfLockers.get(i).zoneToString());"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            printListArea(listOfLockers.get(i).areaToString());"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printListBorder();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhubo225"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function shows a table of all lockers that was searched by the user."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param foundLockers stores the list of lockers that match the search parameters."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void printFoundLockers(List\u003cLocker\u003e foundLockers) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (foundLockers.size() !\u003d 0) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" Here are lockers that match your search parameters \");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            showList(foundLockers);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" There are NO lockers that match your search parameters \");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function shows a table of all sorted lockers based on the user input."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param sortedLockers stores the list of lockers that were sorted based on the user input."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void printSortedLockers(List\u003cLocker\u003e sortedLockers) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        printSpaces(\" Your lockers have been sorted accordingly \");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        showList(sortedLockers);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * This function shows a table of all sorted lockers based on the user input."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param unauthorizedLockers stores the list of unauthorized lockers."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     * @param brokenLockers stores the list of unauthorized lockers."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    public void printReminders(List\u003cLocker\u003e expiringLockers,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                               List\u003cLocker\u003e unauthorizedLockers,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "                               List\u003cLocker\u003e brokenLockers) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (expiringLockers.size() !\u003d 0) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" Here are the list of expiring lockers that require attention. \");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            showList(expiringLockers);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" There are NO expiring lockers at the moment. \");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (unauthorizedLockers.size() !\u003d 0) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" Here are the list of unauthorized lockers that require attention. \");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            showList(unauthorizedLockers);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" There are NO unauthorized usage at the moment. \");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        if (unauthorizedLockers.size() !\u003d 0) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" Hare are the list of broken lockers that require repairing. \");"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            showList(brokenLockers);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "            printSpaces(\" There are NO broken lockers at the moment. \");"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "KevinAlvarez7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swang1997": 36,
      "KevinAlvarez7": 96,
      "Tejasvas123": 102,
      "Zhubo225": 238,
      "-": 90
    }
  },
  {
    "path": "src/test/java/duke/models/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidType_throwsDukeException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Tag(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkValidTagName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null or empty cases"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.checkValidTagName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\"123\")); //numbers not allowed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\".\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\".-!\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\" not-in-use\")); //leading spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Tag.checkValidTagName(\"broken \")); //trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid tags"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Tag.checkValidTagName(Tag.BROKEN));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Tag.checkValidTagName(Tag.IN_USE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Tag.checkValidTagName(Tag.NOT_IN_USE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Tag.checkValidTagName(Tag.UNAUTHORIZED));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Tag.checkValidTagName(\"BroKeN\")); //case insensitive"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 45
    }
  },
  {
    "path": "src/test/java/duke/models/locker/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Address(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.checkIsValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Address.checkIsValidAddress(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Address.checkIsValidAddress(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid address"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Address.checkIsValidAddress(\"Com-1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Address.checkIsValidAddress(\"-\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Address.checkIsValidAddress(\"Com-1 Level 2 02-17.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Address.checkIsValidAddress(\"extremely _long add!ress .with / special, characters\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 35
    }
  },
  {
    "path": "src/test/java/duke/models/locker/LockerDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LockerDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new LockerDate(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LockerDate.checkIsValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"2 Dec 1999\")); //invalid format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"gibberish,-\")); //no way related to date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\" 02-10-2019\")); //leading spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"03-10-2109 \")); //trailing spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"02/12/2010\")); //invalid format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"02-10-2010 1800\")); //should only have date and no time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"31-02-2019\")); //31st feb does not exist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"30-02-2019\")); //30th feb does not exist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"29-02-2019\")); //not a leap year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"31-04-2019\")); //april has only 30 days"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"30-4-2019\")); //invalid format- month should contain 04"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"1-04-2019\")); //must be 01"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"2019-04-01\")); //invalid format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.checkIsValidDate(\"01-04-19\")); //invalid format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid dates"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.checkIsValidDate(\"11-11-2019\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.checkIsValidDate(\"28-02-2019\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.checkIsValidDate(\"29-02-2020\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void isDifferenceBetweenDatesValid() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid differences"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .isDifferenceBetweenDatesValid(\"22-10-2019\", \"21-10-2019\")); //start date cannot be before end date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .isDifferenceBetweenDatesValid(\"22-10-2019\", \"28-10-2019\")); //difference cannot be less than 7 days"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                .isDifferenceBetweenDatesValid(\"22-10-2019\", \"23-10-2020\")); //difference cannot be more than 365 days"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.isDifferenceBetweenDatesValid(\"30-10-2019\", \"30-10-2020\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid differences"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.isDifferenceBetweenDatesValid(\"22-10-2019\", \"29-10-2019\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.isDifferenceBetweenDatesValid(\"30-10-2019\", \"08-11-2019\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.isDifferenceBetweenDatesValid(\"22-10-2018\", \"22-10-2019\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void isEndDateBeforeCurrentDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.isEndDateBeforeCurrentDate(\"22-10-2019\", \"23-10-2019\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(LockerDate.isEndDateBeforeCurrentDate(\"10-10-2019\", \"11-11-2019\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.isEndDateBeforeCurrentDate(\"22-10-2019\",\"22-10-2019\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(LockerDate.isEndDateBeforeCurrentDate(\"22-10-2019\",\"10-10-2019\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 80
    }
  },
  {
    "path": "src/test/java/duke/models/locker/LockerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.models.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class LockerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private SerialNumber sampleSerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Zone sampleZone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Address sampleAddress;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Usage sampleUsage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Tag sampleTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Locker sampleLocker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private LockerTest() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleSerialNumber \u003d new SerialNumber(\"123\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleZone \u003d new Zone(\"A\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleAddress \u003d new Address(\"com-1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleTag \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleUsage \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleLocker \u003d new Locker(sampleSerialNumber,sampleAddress,sampleZone,sampleTag,sampleUsage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Locker("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                null,null,null,null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Locker(null,sampleAddress,sampleZone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                null,null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void isOfTypeInUse() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.isOfTypeInUse());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker newTest \u003d new Locker(sampleSerialNumber,sampleAddress,sampleZone,new Tag(Tag.BROKEN),sampleUsage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(newTest.isOfTypeInUse());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        newTest \u003d new Locker(sampleSerialNumber,sampleAddress,sampleZone,new Tag(Tag.UNAUTHORIZED),sampleUsage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(newTest.isOfTypeInUse());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void isOfInvalidType() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker newTest \u003d new Locker(sampleSerialNumber,sampleAddress,sampleZone, new Tag(Tag.IN_USE),sampleUsage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(newTest.isOfInValidType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.isOfInValidType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void hasSameTagAs() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag typeInUse \u003d new Tag(Tag.IN_USE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.hasSameTagAs(typeInUse));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag typeUnauthorised \u003d new Tag(Tag.UNAUTHORIZED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.hasSameTagAs(typeUnauthorised));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag typeBroken \u003d new Tag(Tag.BROKEN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.hasSameTagAs(typeBroken));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Tag typeNotInUse \u003d new Tag(Tag.NOT_IN_USE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(sampleLocker.hasSameTagAs(typeNotInUse));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void hasSameSerialNumber() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker testLocker \u003d new Locker(new SerialNumber(\"0123\"),sampleAddress,sampleZone,sampleTag,sampleUsage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(sampleLocker.hasSameSerialNumber(testLocker));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        testLocker \u003d new Locker(new SerialNumber(\"123\"),sampleAddress, new Zone(\"Z\"), sampleTag, sampleUsage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(sampleLocker.hasSameSerialNumber(testLocker));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        testLocker \u003d new Locker(new SerialNumber(\"1230\"),sampleAddress,sampleZone,sampleTag,sampleUsage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.hasSameSerialNumber(testLocker));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.hasSameSerialNumber(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void isEquals() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Locker otherLocker \u003d new Locker(sampleSerialNumber, sampleAddress, sampleZone,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                new Tag(\"broken\"),sampleUsage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with tag changed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.equals(otherLocker));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherLocker \u003d new Locker(new SerialNumber(\"12345\"), sampleAddress, sampleZone, sampleTag, sampleUsage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with serial number changed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.equals(otherLocker));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with address changed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherLocker \u003d new Locker(sampleSerialNumber,new Address(\"com-2 level-1\"), sampleZone, sampleTag, sampleUsage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.equals(otherLocker));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with zone changed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherLocker \u003d new Locker(sampleSerialNumber, sampleAddress, new Zone(\"Q\"), sampleTag, sampleUsage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleLocker.equals(otherLocker));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for valid output"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherLocker \u003d new Locker(sampleSerialNumber, sampleAddress, sampleZone, sampleTag, sampleUsage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(sampleLocker.equals(otherLocker));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 111
    }
  },
  {
    "path": "src/test/java/duke/models/locker/SerialNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class SerialNumberTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SerialNumber(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new SerialNumber(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidSerialNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerialNumber.checkIsValidSerialNumber(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid serial number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"rubbish\")); //non-numeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"1234.3\")); //non-integers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"-1\")); //negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"12345678\")); //more than 6 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\" 123\")); //leading spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(SerialNumber.checkIsValidSerialNumber(\"123 \")); //trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid serial number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(SerialNumber.checkIsValidSerialNumber(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(SerialNumber.checkIsValidSerialNumber(\"01\")); //with leading 0s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(SerialNumber.checkIsValidSerialNumber(\"999999\")); //maximum allowed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(SerialNumber.checkIsValidSerialNumber(\"0\")); //0  allowed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void testForLeadingZeroes() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber test \u003d new SerialNumber(\"00123\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber removedLeading \u003d new SerialNumber(\"123\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        SerialNumber addTrailing \u003d new SerialNumber(\"1230\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(test,removedLeading);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertNotEquals(removedLeading,addTrailing);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 54
    }
  },
  {
    "path": "src/test/java/duke/models/locker/ZoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.locker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ZoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Zone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_isOfInvalidType_throwsDukeException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Zone(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidZone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty checks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Zone.checkIsValidZone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid zone"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\"1\")); //contains non-alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\".\")); //contains special characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\"ab\")); //contains more than 1 character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\" a\")); //trailing spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Zone.checkIsValidZone(\"a \")); //leading spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid zone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Zone.checkIsValidZone(\"A\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Zone.checkIsValidZone(\"a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkForCaseInsensitivity() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone lowerCase \u003d new Zone(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Zone upperCase \u003d new Zone(\"A\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(lowerCase,upperCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 49
    }
  },
  {
    "path": "src/test/java/duke/models/student/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Email(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.checkIsValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //missing parts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"@onlydomain.com\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"missingsymbol.com\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"missingdomain@\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid email"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Email.checkIsValidEmail(\"spongeBob@lockers.com\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Email.checkIsValidEmail(\"sponge_!Bob@lockers.com\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Email.checkIsValidEmail(\"2345@12\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Email.checkIsValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@allspecialchars.com\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Email.checkIsValidEmail(\"a_very_long_name@with-very-long-domain-name.com\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid email"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@_invalid\")); //underscore in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"sponge bob@lockers.com\")); //spaces in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@loc kers.com\")); //spaces in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spong@bob@lockers.com\")); //two @s"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@@lockers.com\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\" spongebob@lockers.com\")); //trailing spaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@lockers.com \")); //ending spaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@-invalid.com\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Email.checkIsValidEmail(\"spongebob@invalid.com.\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 52
    }
  },
  {
    "path": "src/test/java/duke/models/student/MajorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class MajorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Major(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidType_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Major(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidCourse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Major.checkIsValidCourse(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Major.checkIsValidCourse(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Major.checkIsValidCourse(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid course"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Major.checkIsValidCourse(\"com-puter\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Major.checkIsValidCourse(\"!*\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Major.checkIsValidCourse(\" computer\")); //leading spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid course"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Major.checkIsValidCourse(\"computer engineering\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Major.checkIsValidCourse(\"COMPUTER enginEEring\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 39
    }
  },
  {
    "path": "src/test/java/duke/models/student/MatricNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class MatricNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentId(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidType_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new StudentId(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidMatricNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty parts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StudentId.checkIsValidStudentId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid student id"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"B0193621C\")); //does not with \"A\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"A0191C\")); //length is too short"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"A00000000001111B\")); //length is too long"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"A12345678\")); //not ending with a letter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"A0_12345B\")); //invalid characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\" A1234567B\")); //leading spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(StudentId.checkIsValidStudentId(\"A1234567B \")); //trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid student id"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(StudentId.checkIsValidStudentId(\"A1234567B\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(StudentId.checkIsValidStudentId(\"A3465691Z\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 42
    }
  },
  {
    "path": "src/test/java/duke/models/student/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_invalidType_throwsDukeException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new Name(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void checkIsValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //null and empty cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.checkIsValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Name.checkIsValidName(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Name.checkIsValidName(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Name.checkIsValidName(\"sponge_bob\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Name.checkIsValidName(\"!*\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(Name.checkIsValidName(\" sponge bob\")); //leading spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //valid names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Name.checkIsValidName(\"sponge bob\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Name.checkIsValidName(\"12345689\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Name.checkIsValidName(\"sponge bob version 1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Name.checkIsValidName(\"SpoNge BoB\")); //mix casing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(Name.checkIsValidName(\"King Lear the 2nd\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 41
    }
  },
  {
    "path": "src/test/java/duke/models/student/StudentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "package duke.models.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Email sampleEmail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Major sampleMajor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Name sampleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private StudentId sampleStudentId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Student sampleStudent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private StudentTest() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleEmail \u003d new Email(\"sampleStudent@example.com\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleMajor \u003d new Major(\"computer science\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleName \u003d new Name(\"sponge bob\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleStudentId \u003d new StudentId(\"A0123456Z\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        sampleStudent \u003d new Student(sampleName, sampleStudentId,sampleEmail,sampleMajor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Student(null,null,null,null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Student(null, sampleStudentId,null,null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Student(null,null,sampleEmail,sampleMajor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void equals() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleStudent.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Student otherStudent \u003d new Student(sampleName, sampleStudentId, sampleEmail,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                new Major(\"computer engineering\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with major changed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleStudent.equals(otherStudent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherStudent \u003d new Student(new Name(\"change name\"), sampleStudentId, sampleEmail, sampleMajor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with name changed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleStudent.equals(otherStudent));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with student id changed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherStudent \u003d new Student(sampleName,new StudentId(\"A0123456B\"), sampleEmail, sampleMajor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleStudent.equals(otherStudent));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for equality with email changed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherStudent \u003d new Student(sampleName, sampleStudentId, new Email(\"abc@d.com\"), sampleMajor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(sampleStudent.equals(otherStudent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        //check for valid output"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        otherStudent \u003d new Student(sampleName, sampleStudentId,sampleEmail,sampleMajor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(sampleStudent.equals(otherStudent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 62
    }
  }
]
