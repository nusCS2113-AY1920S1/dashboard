[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027 //for documentation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027 //shadowJar for pack up an executable file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027 //javaFx for rendering"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    archiveBaseName \u003d \"FG\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 2,
      "cctt1014": 2,
      "-": 35,
      "therealnickcheong": 21
    }
  },
  {
    "path": "src/main/java/DataTransfer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public interface DataTransfer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    int NUMBEROFMONTHS \u003d 3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function sends the data of histogram for the monthly report"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return histogram for the monthly report"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static Histogram getMonthlyData(Account account) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e xData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        xData.add(\"Income\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        xData.add(\"Expenditure\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e yData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        yData.add(account.getTotalIncome());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        yData.add(account.getTotalExp());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return Histogram.getHistogram(\"The Month Report\", xData, yData);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static LineGraph getExpenditureTrend(Account account) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cExpenditure\u003e expList \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e xData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e yData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Expenditure e : expList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (xData.contains(e.getCategory())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                int index \u003d xData.indexOf(e.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                yData.set(index, yData.get(index) + e.getPrice());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                xData.add(e.getCategory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                yData.add(e.getPrice());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return LineGraph.getLineGraph(\"Overall Expenditure Trend\", xData, yData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static LineGraph getIncomeTrend(Account account) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cIncome\u003e incomeList \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e xData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e yData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Income e : incomeList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (xData.contains(e.getDescription())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                int index \u003d xData.indexOf(e.getDescription());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                yData.set(index, yData.get(index) + e.getPrice());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                xData.add(e.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                yData.add(e.getPrice());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return LineGraph.getLineGraph(\"Overall Income Trend\", xData, yData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static Histogram getCurrFinance(Account account, LocalDate endDate) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cIncome\u003e incomeList \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cExpenditure\u003e expList \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e xData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e yData1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e yData2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate[] dateList \u003d new LocalDate[NUMBEROFMONTHS+1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d NUMBEROFMONTHS; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dateList[i] \u003d endDate.minusMonths(NUMBEROFMONTHS-i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d NUMBEROFMONTHS-1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            xData.add(String.valueOf(endDate.minusMonths(i).getMonthValue()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            yData1.add((float) 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            yData2.add((float) 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Income e : incomeList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            for (int i \u003d NUMBEROFMONTHS-1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (e.getPayday().isBefore(endDate) \u0026\u0026 e.getPayday().isAfter(dateList[i])) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    yData1.set(i, yData1.get(i)+e.getPrice());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Expenditure e : expList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            for (int i \u003d NUMBEROFMONTHS-1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (e.getDateBoughtDate().isBefore(endDate) \u0026\u0026 e.getDateBoughtDate().isAfter(dateList[i])) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    yData2.set(i, yData2.get(i)+e.getPrice());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return Histogram.getTwoSeriesHistogram(\"Current Financial Status\", xData, yData1, yData2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 94
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method give the GUI in the form of a Dialog Box."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param text string written on the GUI."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param img image show on the GUI."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return DialogBox a GUI to interact with the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 6,
      "cctt1014": 3,
      "therealnickcheong": 55
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import moneycommands.AutoUpdateInstalmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * The main class which controls the overall flow, run the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private UndoCommand undoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Duke class acts as a constructor to initialize and setup"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * //@param filePath the path of the moneyAccount.txt which contains the finance of the users"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Path moneyDir \u003d Paths.get(\"data/moneyAccount.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String moneyFilePath \u003d moneyDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(moneyFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account \u003d new Account(moneyStorage.load());//need to load from storage on program init"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            account \u003d new Account();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method prints a line that Duke will print out in the program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return a line that the program will print out in response to a user\u0027s commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String[] getResponse(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            boolean isNewUser \u003d account.isToInitialize();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            MoneyCommand updateCommand \u003d new AutoUpdateInstalmentCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            updateCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand c \u003d Parser.moneyParse(input, isNewUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                c.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            } else if (!c.getClass().equals(UndoCommand.class)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                c.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                undoCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            undoCommand.setLastIssuedCommand(c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return new String[]{ui.getOutputString(), ui.getGraphContainerString()};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return new String[]{ui.getOutputString(), ui.getGraphContainerString()};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 18,
      "ChenChao19": 4,
      "cctt1014": 11,
      "-": 28,
      "therealnickcheong": 19
    }
  },
  {
    "path": "src/main/java/Histogram.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Histogram extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BarChart\u003cString, Number\u003e barChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Histogram(String title, String xName, String yName) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Histogram.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        barChart.setTitle(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        xAxis.setLabel(xName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        yAxis.setLabel(yName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static Histogram getHistogram(String title, ArrayList\u003cString\u003e xData, ArrayList\u003cFloat\u003e yData) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Histogram histogram \u003d new Histogram(title, \"Category\", \"Amount\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString,Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c yData.size(); index++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(xData.get(index), yData.get(index)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return histogram;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static Histogram getTwoSeriesHistogram(String title, ArrayList\u003cString\u003e xData, ArrayList\u003cFloat\u003e yData1,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                                                  ArrayList\u003cFloat\u003e yData2) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Histogram histogram \u003d new Histogram(title, \"Month\", \"Amount\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series1 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series2 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c yData1.size(); index++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series1.getData().add(new XYChart.Data\u003c\u003e(xData.get(index), yData1.get(index)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c yData2.size(); index++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series2.getData().add(new XYChart.Data\u003c\u003e(xData.get(index), yData2.get(index)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        series1.setName(\"Income\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        series2.setName(\"Expenditure\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return histogram;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 59
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 10
    }
  },
  {
    "path": "src/main/java/LineGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class LineGraph extends HBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LineChart\u003cString, Number\u003e lineChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LineGraph(String title) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/LineGraph.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        lineChart.setTitle(title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        xAxis.setLabel(\"Category\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static LineGraph getLineGraph(String title, ArrayList\u003cString\u003e xData, ArrayList\u003cFloat\u003e yData) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LineGraph lineGraph \u003d new LineGraph(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString,Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c yData.size(); index++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(xData.get(index), yData.get(index)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        lineGraph.lineChart.getData().add(series);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return lineGraph;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 37
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            stage.setTitle(\"Financial Ghost\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 1,
      "therealnickcheong": 28
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import com.sun.source.tree.Tree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import help.AutoComplete;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import guicommand.UserIcon;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import help.MemorisePreviousFunctions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import impl.org.controlsfx.autocompletion.AutoCompletionTextFieldBinding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import impl.org.controlsfx.autocompletion.SuggestionProvider;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.controlsfx.control.textfield.AutoCompletionBinding;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class MainWindow extends AnchorPane implements DataTransfer {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ScrollPane scrollPane2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public VBox graphContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private TextField searchBar;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private UserIcon userIcon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static Image userImage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MemorisePreviousFunctions previousFunctions \u003d new MemorisePreviousFunctions();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Initialises scroll bar and outputs Duke Welcome message on startup of GUI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        scrollPane2.vvalueProperty().bind(graphContainer.heightProperty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DialogBox.getDukeDialog(\"enter start to begin\", dukeImage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        userIcon \u003d new UserIcon();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        userImage \u003d userIcon.getIcon();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void handleUserInput() throws IOException, ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            case \"change icon\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                userIcon.changeIcon();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                userImage \u003d userIcon.getIcon();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            case \"graph monthly report\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        DataTransfer.getMonthlyData(duke.getAccount())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            case \"graph expenditure trend\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        DataTransfer.getExpenditureTrend(duke.getAccount())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            case \"graph income trend\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        DataTransfer.getIncomeTrend(duke.getAccount())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (input.startsWith(\"graph finance status /until \")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    String dateString \u003d input.split(\" /until \")[1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                            DataTransfer.getCurrFinance(duke.getAccount(), Parser.shortcutTime(dateString))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DialogBox.getDukeDialog(response[0], dukeImage)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (!response[1].equals(\"\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getDukeDialog(response[1], dukeImage));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        previousFunctions.addingCommandsEntered(userInput.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        previousFunctions.setCurrIndex();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void handleSearchInput() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String input \u003d searchBar.getText();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] response \u003d duke.getResponse(\"find \" + input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DialogBox.getDukeDialog(response[0], dukeImage)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(!response[1].equals(\"\")){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getDukeDialog(response[1], dukeImage));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private void autoCompleteFunction() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoComplete autoComplete \u003d new AutoComplete();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoCompletionBinding\u003cString\u003e suggestions \u003d TextFields.bindAutoCompletion(userInput, sc -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            TreeSet\u003cString\u003e suggestedCommands \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            for (String i: autoComplete.getCommandList()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                if (!sc.getUserText().isEmpty() \u0026\u0026 !i.equals(sc.getUserText())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        \u0026\u0026 i.startsWith(sc.getUserText().trim().toLowerCase())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    suggestedCommands.add(i);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        suggestions.setVisibleRowCount(3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        suggestions.setPrefWidth(200);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private void help() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoCompleteFunction();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        userInput.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                if (ke.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    userInput.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if(previousFunctions.getMaxIndex() !\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        previousFunctions.setFlagTrue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        userInput.appendText(previousFunctions.getPreviousCommand() + \"\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if(previousFunctions.getMaxIndex() !\u003d 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        if (previousFunctions.getCurrIndex() \u003d\u003d previousFunctions.getMaxIndex() - 1) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            previousFunctions.setFlagForFirstPress();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            previousFunctions.setFlagFalse();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.appendText(previousFunctions.getNextCommand() + \"\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 59,
      "cctt1014": 57,
      "therealnickcheong": 65
    }
  },
  {
    "path": "src/main/java/controlpanel/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A self defined exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * A default constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor to throw the errors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param errorMsg The error message sent from the faulty object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 3,
      "cctt1014": 14,
      "therealnickcheong": 5
    }
  },
  {
    "path": "src/main/java/controlpanel/MoneyStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class MoneyStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public MoneyStorage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        fileName \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Account load() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Account account \u003d new Account();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            FileReader fileReader \u003d new FileReader(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                String[] info \u003d line.split(\" @ \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                if (!(info[0].equals(\"BS\") || info[0].equals(\"INC\") || info[0].equals(\"EXP\") || info[0].equals(\"SEX\") ||"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        info[0].equals(\"G\") || info[0].equals(\"INS\") || info[0].equals(\"INIT\") ||"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        info[0].equals(\"LOA\") || info[0].equals(\"BAN\"))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    throw new DukeException(\"OOPS!! Your file has been corrupted/ input file is invalid!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                switch(info[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    case \"INIT\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        account.setToInitialize(Boolean.parseBoolean(info[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    case \"BS\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        account.setBaseSavings(Float.parseFloat((info[1])));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    case \"INC\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        Income i \u003d new Income(Float.parseFloat(info[1]), info[2],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                LocalDate.parse(info[3], dateTimeFormatter));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    case \"EXP\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        if (info.length \u003e 5) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            Bill bill \u003d new Bill(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[4], dateTimeFormatter),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[5], dateTimeFormatter));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            account.getExpListTotal().add(bill);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            Expenditure exp \u003d new Expenditure(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[4], dateTimeFormatter));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            account.getExpListTotal().add(exp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    case \"SEX\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        String[] names \u003d info[5].split(\" ! \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        ArrayList\u003cPair\u003cString, Boolean\u003e\u003e parties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        for (String name : names) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            name \u003d name.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            String[] splitStr \u003d name.split(\"#\", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            boolean status \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            if (splitStr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                                status \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            Pair\u003cString, Boolean\u003e temp \u003d new Pair\u003c\u003e(splitStr[0], status);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            parties.add(temp);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Split spiltExp \u003d new Split(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                                LocalDate.parse(info[4], dateTimeFormatter), parties);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        account.getExpListTotal().add(spiltExp);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    case \"G\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        Goal g \u003d new Goal(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                LocalDate.parse(info[4], dateTimeFormatter), info[5]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    case \"INS\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        Instalment ins \u003d new Instalment(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                LocalDate.parse(info[4], dateTimeFormatter), Integer.parseInt(info[5]),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                Float.parseFloat(info[6]) * 100);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        account.getInstalments().add(ins);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    case \"LOA\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Loan l \u003d new Loan(Float.parseFloat(info[1]), info[2],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                                LocalDate.parse(info[3], dateTimeFormatter),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            Loan.Type.ALL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        l.updateExistingLoan(info[4], info[5], Integer.parseInt(info[6]), Float.parseFloat(info[7]));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        account.getLoans().add(l);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    case \"BAN\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        BankTracker b \u003d new BankTracker(info[2], Float.parseFloat(info[1]), LocalDate.parse(info[3]),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                                Double.parseDouble(info[4]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        account.getBankTrackerList().add(b);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } catch (IOException | DateTimeParseException | DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void writeToFile(Account account) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedWriter.write(\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            bufferedWriter.write(\"INIT @ \" + account.isToInitialize() + \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedWriter.write(\"BS @ \" + account.getBaseSavings() + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                bufferedWriter.write(\"INC @ \" + i.getPrice() + \" @ \" + i.getDescription() +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        \" @ \" + i.getPaidTime() + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            for (Expenditure exp : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                if (exp instanceof Split) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    bufferedWriter.write(\"SEX @ \" + exp.getPrice() + \" @ \" + exp.getDescription() + \" @ \" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            exp.getCategory() + \" @ \" + exp.getBoughtDate() + \" @ \" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                            ((Split) exp).getNamesOfPeople() + \"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                } else if (exp instanceof Bill) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    bufferedWriter.write(\"EXP @ \" + exp.getPrice() + \" @ \" + exp.getDescription() + \" @ \" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            exp.getCategory() + \" @ \" + exp.getBoughtDate() + \" @ \" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            ((Bill) exp).getNextPayDay() + \"\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    bufferedWriter.write(\"EXP @ \" + exp.getPrice() + \" @ \" + exp.getDescription() + \" @ \" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            exp.getCategory() + \" @ \" + exp.getBoughtDate() + \"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            for (Goal g : account.getShortTermGoals()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                bufferedWriter.write(\"G @ \" + g.getPrice() + \" @ \" + g.getDescription() + \" @ \" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        g.getCategory() + \" @ \" + g.getGoalBy() + \" @ \" + g.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            for (Instalment ins : account.getInstalments()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                bufferedWriter.write(\"INS @ \" + ins.getPrice() + \" @ \" + ins.getDescription() + \" @ \" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        ins.getCategory() + \" @ \" + ins.getBoughtDate() + \" @ \" + ins.getNumOfPayments() + \" @ \" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        ins.getAIR() + \"\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                bufferedWriter.write(\"LOA @ \" + l.getPrice() + \" @ \" + l.getDescription() +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        \" @ \" + l.getStartDate() + \" @ \" + l.getType().toString() + \" @ \" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        l.getEndDate() + \" @ \" + l.getStatusInt() + \" @ \" + l.getOutstandingLoan() + \"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            for (BankTracker b : account.getBankTrackerList()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                bufferedWriter.write(\"BAN @ \" + b.getAmt() + \" @ \" + b.getDescription() +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        \" @ \" + b.getLatestDate().toString() + \" @ \" + b.getRate() + \"\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void markDeletedEntry(String type, String stringRead, String stringWrite,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                 int index) throws DukeException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            File tempFile \u003d File.createTempFile(\"moneyAccountTemp\", \".txt\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    new File(\"data/\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            String fileNameTemp \u003d tempFile.getAbsolutePath();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            FileReader fileReader \u003d new FileReader(fileName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(fileNameTemp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            int i \u003d index;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                if (line.startsWith(type) \u0026\u0026 !line.contains(\"#\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    i--;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                } else if (i !\u003d 0 \u0026\u0026 line.contains(\"#\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                if (line.startsWith(type) \u0026\u0026 i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    line \u003d line.replaceAll(stringRead, stringWrite);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                bufferedWriter.write(line + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            if (!file.delete()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                throw new DukeException(\" OOPS! File cannot be deleted!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            } else if (!tempFile.renameTo(file)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                throw new DukeException(\" OOPS! File cannot be updated!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undoDeletedEntry(Account account, String dataType, int index) throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            FileReader fileReader \u003d new FileReader(fileName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            boolean isLineRead \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            while (!isLineRead \u0026\u0026 (line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                if (line.startsWith(dataType) \u0026\u0026 line.contains(\"#\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    String[] info \u003d line.split(\" # \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    switch(dataType) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        case \"EXP\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            if (info.length \u003e 5) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                Bill bill \u003d new Bill(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                        LocalDate.parse(info[4], dateTimeFormatter),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                        LocalDate.parse(info[5], dateTimeFormatter));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                if (index \u003e account.getExpListTotal().size()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    account.getExpListTotal().add(bill);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    account.getExpListTotal().add(index - 1, bill);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                Expenditure exp \u003d new Expenditure(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                        LocalDate.parse(info[4], dateTimeFormatter));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                if (index \u003e account.getExpListTotal().size()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    account.getExpListTotal().add(exp);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    account.getExpListTotal().add(index - 1, exp);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        case \"INC\":"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            Income i \u003d new Income(Float.parseFloat(info[1]), info[2],"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[3], dateTimeFormatter));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            if (index \u003e account.getIncomeListTotal().size()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getIncomeListTotal().add(index - 1, i);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        case \"G\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            Goal g \u003d new Goal(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[4], dateTimeFormatter), info[5]);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            if (index \u003e account.getShortTermGoals().size()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getShortTermGoals().add(index - 1, g);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        case \"INS\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            Instalment ins \u003d new Instalment(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    LocalDate.parse(info[4], dateTimeFormatter), Integer.parseInt(info[5]),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                    Float.parseFloat(info[6]) * 100);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            if (index \u003e account.getInstalments().size()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getInstalments().add(ins);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                                account.getInstalments().add(index - 1, ins);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    isLineRead \u003d true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 209,
      "ChenChao19": 8,
      "chengweixuan": 43,
      "cctt1014": 11,
      "therealnickcheong": 8
    }
  },
  {
    "path": "src/main/java/controlpanel/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddIncomeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.AddGoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.CreateBankAccountCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteGoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.initCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListBankTrackerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListGoalsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListTotalExpenditureCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListTotalIncomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.startCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This class which takes in the user input from command line and identifies the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * correct command type. Calls the appropriate MoneyCommand from control panel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Parser() throws DukeException, ParseException {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor which runs the parser to parse all commands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param cmd Original input command from the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param isNewUser Boolean to identify if the user if a new or returning user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return MoneyCommand to be called according to the user commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException If the user input is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static MoneyCommand moneyParse(String cmd, boolean isNewUser) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand moneyCommand \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (cmd.equals(\"start\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new startCommand(isNewUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"init\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new initCommand(cmd, isNewUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if(cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if(isNewUser) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You are a new user please type: init [existing savings] [Avg Monthly Expenditure]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"bank-account\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new CreateBankAccountCommand(cmd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.equals(\"list bank trackers\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new ListBankTrackerCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"check-balance \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new CheckFutureBalanceCommand(cmd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"withdraw \") || cmd.startsWith(\"deposit\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new InternalTransferCommand(cmd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"goal\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddGoalCommand(cmd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list goals\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete goal\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String temp \u003d cmd.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteGoalCommand(serialNo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"commit goal\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new CommitGoalCommand(cmd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else if (cmd.startsWith(\"done goal\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DoneGoalCommand(cmd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else if (cmd.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new FindCommand(cmd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"add income\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddIncomeCommand(cmd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"spent\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all income\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all expenditure\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalExpenditureCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete income\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteIncomeCommand(cmd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete expenditure\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"delete bank-account\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new DeleteBankAccountCommand(cmd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"graph\") || cmd.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new GraphCommand(cmd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else if (cmd.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            moneyCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"add instalment\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new AddInstalmentCommand(cmd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"delete instalment\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new DeleteInstalmentCommand(cmd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"list all instalment\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new ListInstalmentCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.equals(\"list month income\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ListMonthIncomeCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.equals(\"list month expenditure\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ListMonthExpenditureCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"check income\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastMonthIncome(cmd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"check expenditure\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastMonthExpenditure(cmd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"split\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new AddSplitCommand(cmd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"settle\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new SettleSplitCommand(cmd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"lent\") || cmd.startsWith(\"borrowed\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new AddLoanCommand(cmd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"list\") \u0026\u0026 cmd.contains(\"loans\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ListLoansCommand(cmd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if ((cmd.startsWith(\"paid\")) || (cmd.startsWith(\"received\"))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new SettleLoanCommand(cmd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else if (cmd.startsWith(\"add bill\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            moneyCommand \u003d new AddBillCommand(cmd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return moneyCommand;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Takes user input of date for add commands and checks for shortcut dates."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If shortcut is found, converts to the correct date according to shortcut."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the formatted Date from user inputted date."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param dateStr user input of date"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return formatted Date based on user inputted date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public static LocalDate shortcutTime(String dateStr) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String time \u003d dateStr.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (time) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"now\": {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"ytd\": {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date ytdDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate ytdLocalDate \u003d ytdDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(ytdLocalDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"tmr\": {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date tmrDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate tmrLocalDate \u003d tmrDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(tmrLocalDate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstwk\": {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastWeekDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate lastWeekLocalDate \u003d lastWeekDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(lastWeekLocalDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtwk\": {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +7);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextWeekDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate nextWeekLocalDate \u003d nextWeekDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(nextWeekLocalDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstmth\": {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastMonthDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate lastMonthLocalDate \u003d lastMonthDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(lastMonthLocalDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtmth\": {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, +1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextMonthDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate nextMonthLocalDate \u003d nextMonthDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(nextMonthLocalDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstyr\": {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, -1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastYearDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate lastYearLocalDate \u003d lastYearDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(lastYearLocalDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtyr\": {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, +1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextYearDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate nextYearLocalDate \u003d nextYearDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(nextYearLocalDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(dateStr, dateTimeFormatter);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 8,
      "chengweixuan": 133,
      "cctt1014": 21,
      "therealnickcheong": 44
    }
  },
  {
    "path": "src/main/java/controlpanel/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static String outputString \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static String graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        scanner \u003d new Scanner(System. in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The method to initialize and show welcome to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String greeting \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"Hello from\\n\" + logo + greeting);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean inputStatus() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        System.out.println(\"This is not a valid input from the file!!!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"ERROR: \" + message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void appendToOutput(String msg) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString +\u003d msg;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void clearOutputString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getGraphContainerString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return graphContainerString;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void clearGraphContainerString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void appendToGraphContainer(String msg) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        graphContainerString +\u003d msg;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 7,
      "cctt1014": 53,
      "therealnickcheong": 16
    }
  },
  {
    "path": "src/main/java/guicommand/UserIcon.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class UserIcon {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Image icon;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public UserIcon() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileReader fileReader \u003d new FileReader(\"data/iconPath.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String iconPath \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        icon \u003d new Image(this.getClass().getResourceAsStream(iconPath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Image getIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return icon;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void changeIcon() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(\"data/iconPath.txt\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileChooser chooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        chooser.setTitle(\"Select a picture:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File defaultDirectory \u003d new File(\"D:/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        chooser.setInitialDirectory(defaultDirectory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File selectedFile \u003d chooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path from \u003d Paths.get(selectedFile.toURI());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path to \u003d Paths.get(\"src/main/resources/images/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        icon \u003d new Image(this.getClass().getResourceAsStream(\"/images/\" + selectedFile.getName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        bufferedWriter.write(\"/images/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 47
    }
  },
  {
    "path": "src/main/java/help/AutoComplete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoComplete {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private final String[] List \u003d {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"add income\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"add instalment\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"bank-account\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"borrowed\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"change icon\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"check-balance\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"check expenditure\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"check income\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"delete expenditure\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"delete goal\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"delete instalments\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"deposit\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"done goal\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"goal\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"goal-short\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"graph curr finance\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"graph expenditure trend\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"graph income trend\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"graph monthly report\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"init\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"lent\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list all income\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list all expenditure\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list all instalments\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list all loans\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list bank trackers\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list incoming loans\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list goals\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list month income\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list month expenditure\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"list outgoing loans\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"paid\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"received\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"spent\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"start\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"split\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"settle\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            \"withdraw\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private List\u003cString\u003e CommandList \u003d Arrays.asList(List);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoComplete() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Collections.sort(CommandList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public java.util.List\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return CommandList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 57
    }
  },
  {
    "path": "src/main/java/help/MemorisePreviousFunctions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class MemorisePreviousFunctions {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String previousCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String nextCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int currIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private ArrayList\u003cString\u003e CommandsEntered;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean flag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean flagForFirstPress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public MemorisePreviousFunctions() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        CommandsEntered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.flagForFirstPress \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.flag \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagTrue() { //the command before this is up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flag \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagFalse() { //the command before this is down"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flag \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void addingCommandsEntered(String Commands) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        CommandsEntered.add(Commands);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getCurrIndex() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return currIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getMaxIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return CommandsEntered.size(); //0-based indexing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setCurrIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        currIndex \u003d CommandsEntered.size(); //0-based indexing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagForFirstPress() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flagForFirstPress \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if(flagForFirstPress) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            currIndex \u003d getMaxIndex() - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            flagForFirstPress \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (currIndex !\u003d 0 \u0026\u0026 flag) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                currIndex -\u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        previousCommand \u003d CommandsEntered.get(currIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return previousCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if(currIndex \u003d\u003d getMaxIndex()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            currIndex \u003d getMaxIndex() - 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (!flag) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if(currIndex !\u003d getMaxIndex() - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                currIndex +\u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        nextCommand \u003d CommandsEntered.get(currIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return nextCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 71
    }
  },
  {
    "path": "src/main/java/money/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cIncome\u003e incomeListTotal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expListTotal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cIncome\u003e incomeListCurrMonth;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expListCurrMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cGoal\u003e shortTermGoals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private ArrayList\u003cInstalment\u003e instalments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cBankTracker\u003e bankTrackerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cLoan\u003e loans;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float totalSavings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float currMonthSavings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float baseSavings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float goalSavings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private boolean toInitialize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        incomeListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        expListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        incomeListCurrMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        expListCurrMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        shortTermGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        bankTrackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Account(Account account) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        incomeListTotal \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        expListTotal \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        incomeListCurrMonth \u003d account.getIncomeListCurrMonth();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        expListCurrMonth \u003d account.getExpListCurrMonth();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        shortTermGoals \u003d account.getShortTermGoals();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalments \u003d account.getInstalments();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        bankTrackerList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        loans \u003d account.getLoans();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d account.isToInitialize();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        baseSavings \u003d account.getBaseSavings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        updateSavings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        populateCurrentMonthLists();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        if (account.isInitialised()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//            toInitialize \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        } else { toInitialize \u003d true; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void initialize(float userSavings, float avgExp) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        LocalDate nowDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income initialSavings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (userSavings \u003e avgExp * 6) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.baseSavings \u003d avgExp * 6;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.goalSavings \u003d userSavings - baseSavings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"Initial Savings\", nowDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"Initial Savings\", nowDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.baseSavings \u003d totalSavings;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.goalSavings \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cIncome\u003e getIncomeListTotal() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomeListTotal;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cExpenditure\u003e getExpListTotal() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return expListTotal;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cIncome\u003e getIncomeListCurrMonth() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomeListCurrMonth;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cExpenditure\u003e getExpListCurrMonth() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return expListCurrMonth;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cGoal\u003e getShortTermGoals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return shortTermGoals;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getLoans() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return loans;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getOutgoingLoans() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cLoan\u003e outgoingLoans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (l.type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                outgoingLoans.add(l);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return outgoingLoans;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getIncomingLoans() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cLoan\u003e incomingLoans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (l.type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                incomingLoans.add(l);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomingLoans;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void sortShortTermGoals(ArrayList\u003cGoal\u003e shortTermGoals){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Collections.sort(shortTermGoals, new Comparator\u003cGoal\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            public int compare(Goal g1, Goal g2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(g1.getPriority() \u003d\u003d g2.getPriority()){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    return g1.getDescription().compareTo(g2.getDescription());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    return g1.getPriority().compareTo(g2.getPriority());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList\u003cInstalment\u003e getInstalments() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return instalments;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ArrayList\u003cBankTracker\u003e getBankTrackerList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return bankTrackerList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalIncome() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListTotal) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalExp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : expListTotal) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getLoansTotal() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthIncome() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListCurrMonth) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthExp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : expListCurrMonth) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalSavings() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return totalSavings;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthSavings() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        currMonthSavings \u003d getCurrMonthIncome() - getCurrMonthExp();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return currMonthSavings;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getBaseSavings() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return baseSavings;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getGoalSavings() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return goalSavings;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void updateSavings() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        currMonthSavings \u003d getCurrMonthIncome() - getCurrMonthExp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isToInitialize() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return toInitialize;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public boolean isInitialised() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return getIncomeListTotal().isEmpty() || getExpListTotal().isEmpty() ||"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                getShortTermGoals().isEmpty() || getInstalments().isEmpty() ||"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                getBankTrackerList().isEmpty() || getLoans().isEmpty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method is run upon initialisation to fill the Month Income List and"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Month Expenditure List."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void populateCurrentMonthLists() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        getIncomeListCurrMonth().clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        getExpListCurrMonth().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Calendar dateNow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currMonth \u003d dateNow.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currYear  \u003d dateNow.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListTotal) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (i.getPayday().getMonthValue() \u003d\u003d currMonth \u0026\u0026 i.getPayday().getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                incomeListCurrMonth.add(i);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure e : expListTotal) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (e.getDateBoughtDate().getMonthValue() \u003d\u003d currMonth \u0026\u0026 e.getDateBoughtDate().getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                expListCurrMonth.add(e);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setToInitialize(boolean initStatus) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.toInitialize \u003d initStatus;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setBaseSavings(float baseSavings) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.baseSavings \u003d baseSavings;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method helps to find the corresponding bank account tracker by given description(name)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param name The given description"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The corresponding tracker"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException Handle the case when there is no such account"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public BankTracker findTrackerByName(String name) throws DukeException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d null;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (BankTracker b : bankTrackerList) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (b.getDescription().equals(name)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                bankTracker \u003d b;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (bankTracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Sorry, FG does not find this account...\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return bankTracker;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 14,
      "ChenChao19": 6,
      "chengweixuan": 109,
      "cctt1014": 25,
      "therealnickcheong": 109
    }
  },
  {
    "path": "src/main/java/money/BankTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class represents a bank account tracker which can be used to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * store the related information of a bank account"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * (account description, balance, the latest update date and the interest rate)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class BankTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private float amt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private LocalDate latestDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public BankTracker(String accountDescription, float initialAmt, LocalDate initialDate, double interestRate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d accountDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt \u003d initialAmt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        latestDate \u003d  initialDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        rate \u003d interestRate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get a formatted string which contains"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * all the information of a bank account tracker"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return A string which contains all the information of a bank account tracker"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getBankAccountInfo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String balance \u003d decimalFormat.format(amt);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return \"  Name: \" + description + \"\\n  Balance: \" + balance + \"\\n  Initial Date: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + dateTimeFormatter.format(latestDate) + \"\\n  Interest Rate: \" + rate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the description of the bank account"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The description of the bank account"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the latest update date for the account tracker"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The latest update date for the account tracker"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public LocalDate getLatestDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return latestDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the balance at the latest update date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The balance at the latest update date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public float getAmt() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return amt;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the interest rate"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The interest rate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public double getRate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return rate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method adds the given value to the current balance and update the balance based on"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * the current amount and the given interest rate."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param value The given value (can be negative)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void addAmt(double value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt +\u003d value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void updateDate(LocalDate date) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(latestDate, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears()*12;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt *\u003d Math.pow((1+rate), length);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        latestDate \u003d date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public float predictAmt(LocalDate date) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(latestDate, date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears()*12;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (float) (amt * Math.pow((1+rate), length));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "cctt1014": 92,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/money/Bill.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class Bill extends Expenditure {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private LocalDate nextPayDay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Bill(float price, String description, String category, LocalDate boughtDate, LocalDate nextPayDay) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        super(price, description, category, boughtDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        this.nextPayDay \u003d nextPayDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public String toString() { return \"[BILLS]\" + \" $\" + getPrice() + \" \" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            getDescription() + \"(last paid: \" + getBoughtDate() + \") \" + \"(next payday: \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            getNextPayDay() + \")\"; }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public LocalDate getDateNextPayDay() { return nextPayDay; }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public String getNextPayDay() { return nextPayDay.format(dateTimeFormatter); }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void setNextPayDay() { nextPayDay.plusMonths(1); }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 27
    }
  },
  {
    "path": "src/main/java/money/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Expenditure extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate boughtDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    protected DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Expenditure Object to record expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Price of the item spent on"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info on the item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param category Category the item is grouped under"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param boughtDate Date which the item is bought"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Expenditure(float price, String description, String category, LocalDate boughtDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.boughtDate \u003d boughtDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String toString() { return \"[E]\" + super.toString() + \"(on: \" + getBoughtDate() + \")\"; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getCategory() { return category; }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate getDateBoughtDate() { return boughtDate; }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getBoughtDate() { return boughtDate.format(dateTimeFormatter); }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "ChenChao19": 8,
      "chengweixuan": 6,
      "therealnickcheong": 16
    }
  },
  {
    "path": "src/main/java/money/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Goal extends Expenditure {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        HIGH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LOW"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Goal(float price, String description, String category, LocalDate goalBy, String priorityLevel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description, category, goalBy);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        switch (priorityLevel) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"LOW\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"MEDIUM\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"HIGH\": {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[GS]\" + \" \" + super.getDescription() + \"(target: $\" + super.getPrice() + \")\\n (to achieve by: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + getGoalBy() + \") \" + getPriorityString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getPriorityString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return priority.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Priority getPriority(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getGoalBy() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String goalByDateTime \u003d super.getBoughtDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String goalByDate \u003d goalByDateTime.split(\" \")[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return goalByDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return super.getCategory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "ChenChao19": 1,
      "therealnickcheong": 54
    }
  },
  {
    "path": "src/main/java/money/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Income extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private LocalDate payday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * The constructor for the Income Object to record income sources."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Money in from the income source"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info of the income source"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param payday Date which the income is received"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Income(float price, String description, LocalDate payday) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.payday \u003d payday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public LocalDate getPayday() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return payday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"[I]\" + \" \" + super.getDescription() + \"(salary: $\" + super.getPrice() + \") (Paid On: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + getPaidTime() + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getPaidTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return payday.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "chengweixuan": 8,
      "therealnickcheong": 19
    }
  },
  {
    "path": "src/main/java/money/Instalment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class Instalment extends Expenditure {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int numOfPaymentsReq;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float AIR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float MIR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int  paymentsMade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float percentage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean payForTheMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Instalment(float price, String description, String category, LocalDate boughtDate, int numOfPaymentsReq, float AnnualIR) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        super(price, description, category, boughtDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.numOfPaymentsReq \u003d numOfPaymentsReq;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.AIR \u003d AnnualIR / 100;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.MIR \u003d AIR / 12;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.endDate \u003d setEndTime();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.payForTheMonth \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void isPayTheMonth() { payForTheMonth \u003d true; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void isNotPayTheMonth() { payForTheMonth \u003d false; }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean getPayForTheMonth() { return payForTheMonth; }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float EqualMonthlyInstalment() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return (float) ((getPrice() * MIR * Math.pow(1 + MIR, numOfPaymentsReq)) / (Math.pow(1 + MIR, numOfPaymentsReq) - 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void percentPay(int payments) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.paymentsMade \u003d payments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.percentage \u003d (float) paymentsMade / numOfPaymentsReq * 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getPercentage() { return percentage; }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float totalAmount() { return EqualMonthlyInstalment() * numOfPaymentsReq; }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate setEndTime () { return getDateBoughtDate().plusMonths(numOfPaymentsReq); }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String toString() { return \"[INS]\" + \"$\" + getPrice() + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            + getDescription() + \"(on: \" + getBoughtDate() + \")\"; }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getCategory() { return super.getCategory(); }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getBoughtDate() { return getDateBoughtDate().format(dateTimeFormatter); }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate getEndDate()  { return endDate; }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getDateEndDate() { return getEndDate().format(dateTimeFormatter); }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getNumOfPayments() { return numOfPaymentsReq; }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getAIR() { return AIR; }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 62
    }
  },
  {
    "path": "src/main/java/money/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float price;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Item(float price, String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getPrice() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"$\" + price + \" \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 24
    }
  },
  {
    "path": "src/main/java/money/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class Loan extends Item {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        OUTGOING,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        INCOMING,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ALL"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isSettled;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float outstandingLoan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    Type type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Loan Object to record outgoing and incoming loans."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param amount Total amount of the loan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description Party which to loan is lent to/borrowed from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param startDate Date which the loan was made"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param type Type determining the loan is incoming or outgoing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Loan(float amount, String description, LocalDate startDate, Type type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        super(amount, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.isSettled \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.outstandingLoan \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method returns a String with the information of the loan."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * String contains the type of loan, whether the loan is settled or outstanding,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and the endDate if the loan is settled, or the outstanding amount if the loan is outstanding."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String containing information of the loan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String typeStr;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Type.OUTGOING) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d \" [O]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Type.INCOMING) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d \" [I]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String status \u003d isSettled ? \"[Settled]\" : \"[Outstanding]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return status + typeStr + \" \" + super.getDescription() + \"(loan: $\" + super.getPrice() + \") (Lent On: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + getStartDate() + \")\" + getEndDateString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public LocalDate getDateStartDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public LocalDate getDateEndDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method sets the EndDate to the current date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void setEndDate() throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.endDate \u003d Parser.shortcutTime(\"now\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return isSettled;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public int getStatusInt() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (isSettled) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getOutstandingLoan() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return outstandingLoan;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method is called to settle the loan if it is repaid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If the entire loan is settled, the loan is set as settled."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param amount Amount repaid to the loan"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void settleLoanDebt(float amount) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (amount \u003d\u003d -2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            outstandingLoan \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isSettled \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            setEndDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            outstandingLoan -\u003d amount;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (outstandingLoan \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                isSettled \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                setEndDate();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return startDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return endDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method creates a String that represents the state of the loan."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If loan is settled, returns the endDate of the loan, else it prints"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the outstanding amount of the loan."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String representing state of the loan"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getEndDateString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \" Outstanding Amount: $\" + outstandingLoan;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \" (Paid Back On: \" + getEndDate() + \")\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method is called to update an existing loan with its data from the save file during"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the load process on start up of Financial Ghost."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param typeStr String denoting the type of loan"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param endDate String representing endDate of loan"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param status Integer representing status of loan"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param outstandingLoan Float of the outstanding amount of the loan"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void updateExistingLoan(String typeStr, String endDate, int status, float outstandingLoan) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (typeStr.equals(\"INCOMING\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.INCOMING;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (typeStr.equals(\"OUTGOING\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.OUTGOING;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.ALL;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate.equals(\"\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.endDate \u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.isSettled \u003d status \u003d\u003d 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.outstandingLoan \u003d outstandingLoan;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getTypeString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return type.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 172
    }
  },
  {
    "path": "src/main/java/money/Split.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class Split extends Expenditure {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cPair\u003cString, Boolean\u003e\u003e parties;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isSettled;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float eachOwe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float outstandingAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Split Object to record split expenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Price of the item spent on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info on the item"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param category Category the item is grouped under"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param boughtDate Date which the item is bought"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param parties ArrayList containing information on people the split expenditure is split with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Split(float price, String description, String category, LocalDate boughtDate, ArrayList\u003cPair\u003cString, Boolean\u003e\u003e parties) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        super(price, description, category, boughtDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.parties \u003d parties;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.isSettled \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.eachOwe \u003d price / (parties.size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.outstandingAmount \u003d price - eachOwe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String people \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String status \u003d isSettled ? \"Settled\" : \"Outstanding \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Pair\u003cString, Boolean\u003e person : parties) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String hasPaid \u003d person.getValue() ? \"[\\u2713]\" : \"[\\u2718]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            people +\u003d hasPaid + person.getKey() + \" and \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        people \u003d people.substring(0, people.length() - 4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"[SE]\" + super.toString() +  \" [\" + status + getOutstandingAmount() + \"]\\n Split with \" + people;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method determines if the debt for the split expenditure has been paid or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the an empty string if the debt is paid, else returns the outstanding debt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String displaying the current state of the debt"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getOutstandingAmount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (outstandingAmount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \"$\" + outstandingAmount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cPair\u003cString, Boolean\u003e\u003e getParties() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return this.parties;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method sets the debt of a person in the split expenditure to settled."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param settleNo"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void hasSettledSplit(int settleNo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nameOfPerson \u003d getNameOfPerson(settleNo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Pair\u003cString, Boolean\u003e temp \u003d new Pair\u003c\u003e(nameOfPerson, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        parties.set(settleNo, temp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        outstandingAmount -\u003d eachOwe;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (outstandingAmount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isSettled \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getNameOfPerson(int settleNo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return parties.get(settleNo).getKey();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean getStatusOfPerson(int settleNo) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return parties.get(settleNo).getValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getEachOwe() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return eachOwe;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method returns a String containing the info of all people the expenditure is split"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with and the status of their debt."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String containing info on the people"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getNamesOfPeople() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        StringBuilder everyone \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Pair\u003cString, Boolean\u003e p : parties) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String status \u003d \"0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (p.getValue()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                status \u003d \"1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String infoPerPerson \u003d p.getKey() + \"#\" + status;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            everyone.append(infoPerPerson).append(\" ! \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return everyone.toString().substring(0, everyone.toString().length() - 3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 104
    }
  },
  {
    "path": "src/main/java/moneycommands/AddBillCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Bill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class AddBillCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public AddBillCommand (String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        inputString \u003d command.replaceFirst(\"add bill\", \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/lastpaid \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        float price \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String[] morSplit \u003d furSplit[1].split(\" /paynext \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        LocalDate boughtDate \u003d Parser.shortcutTime(morSplit[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        LocalDate nextPayDay \u003d Parser.shortcutTime(morSplit[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Bill bill \u003d new Bill(price, description, \"bills\", boughtDate, nextPayDay);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().add(bill);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (boughtDate.getMonthValue() \u003d\u003d currMonth \u0026\u0026 boughtDate.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getExpListCurrMonth().add(bill);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this bill to your total spending: \\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(account.getExpListTotal().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getExpListTotal().size() - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String billDes \u003d account.getExpListTotal().get(lastIndex).toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().remove(lastIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput( billDes + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 66
    }
  },
  {
    "path": "src/main/java/moneycommands/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add expenditure command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the expenditure data within the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddExpenditureCommand(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command.replaceFirst(\"spent \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add expenditure command. Takes the input from user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/cat \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] morSplit \u003d furSplit[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d morSplit[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate boughtTime \u003d Parser.shortcutTime(morSplit[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(price, description, category, boughtTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (boughtTime.getMonthValue() \u003d\u003d currMonth \u0026\u0026 boughtTime.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getExpListCurrMonth().add(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this to your total spending: \\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(account.getExpListTotal().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getExpListTotal().size() - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Expenditure exp \u003d account.getExpListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().remove(exp);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(exp.toString() + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 16,
      "chengweixuan": 32,
      "therealnickcheong": 33
    }
  },
  {
    "path": "src/main/java/moneycommands/AddGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This command adds a short-term goal to the Short-Term Goals List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the add short-term goal command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the goal data within the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the add goal command. Takes input from user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and adds a short-term goal to the Short-Term Goals List"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String desc \u003d inputString.split(\"/amt \")[0].replaceFirst(\"goal \", \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d Float.parseFloat(inputString.split(\"/amt \")[1].split(\"/by \")[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate byDate \u003d Parser.shortcutTime(inputString.split(\"/by \")[1].split(\" /priority \")[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String priorityLevel \u003d inputString.split(\"/priority \")[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d \"GS\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(price, desc, category, byDate, priorityLevel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //account.sortShortTermGoals(account.getShortTermGoals());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this Goal: \\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"     \" + account.getShortTermGoals().get(account.getShortTermGoals().size() - 1).toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" Goals in the list.\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //ui.appendToOutput(\"Current Goal Savings: $\" + account.getGoalSavings() + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getShortTermGoals().size() - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Goal g \u003d account.getShortTermGoals().get(lastIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().remove(g);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(g.toString() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" goals listed\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 19,
      "chengweixuan": 13,
      "therealnickcheong": 51
    }
  },
  {
    "path": "src/main/java/moneycommands/AddIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an income source to the Total Income List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add income command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the income source data within the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddIncomeCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command.replaceFirst(\"add income \", \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add income command. Takes the input data from user and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an income source to the Total Income List."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/payday \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float salary \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate payDay \u003d Parser.shortcutTime(furSplit[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(salary, description, payDay);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (payDay.getMonthValue() \u003d\u003d currMonth \u0026\u0026 payDay.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getIncomeListCurrMonth().add(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this income source: \\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getIncomeListTotal().get(account.getIncomeListTotal().size() - 1).toString()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income sources listed\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getIncomeListTotal().size() - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Income i \u003d account.getIncomeListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().remove(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income listed\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 17,
      "chengweixuan": 33,
      "therealnickcheong": 32
    }
  },
  {
    "path": "src/main/java/moneycommands/AddInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AddInstalmentCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AddInstalmentCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        inputString \u003d command.replaceFirst(\"add instalment \", \"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/within \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        float cost \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String[] morSplit \u003d furSplit[1].split(\" months /from \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        int numOfPaymentsReq \u003d Integer.parseInt(morSplit[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String[] evenMorSplit \u003d morSplit[1].split(\" @\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        LocalDate boughtDate \u003d LocalDate.parse(evenMorSplit[0], dateTimeFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String[] lastSplit \u003d evenMorSplit[1].split(\"%\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        float AIR \u003d Float.parseFloat(lastSplit[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String category \u003d \"instalments\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment \u003d new Instalment(cost, description, category, boughtDate, numOfPaymentsReq, AIR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this to your instalments: \\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(account.getInstalments().get(account.getInstalments().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" You are paying $\" + df.format(instalment.EqualMonthlyInstalment()) + \" per month\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" For \" + instalment.getNumOfPayments() + \" months\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Until \" + instalment.getDateEndDate() + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" The total amount you will pay is $\" + instalment.totalAmount() + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getInstalments().size() - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment ins \u003d account.getInstalments().get(lastIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().remove(ins);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(ins.toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 12,
      "ChenChao19": 58
    }
  },
  {
    "path": "src/main/java/moneycommands/AddLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds a loan to the Loan List."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class AddLoanCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Loan.Type type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add loan command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the loan data within the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Differentiates between an add outgoing loan or incoming loan according to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * data in user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public AddLoanCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.startsWith(\"lent\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"lent \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (command.startsWith(\"borrowed\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"borrowed \", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add loan command. Takes the input data from user and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an incoming or outgoing loan to the Loan List."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" /amt \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float amount \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate startDate \u003d Parser.shortcutTime(furSplit[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan l \u003d new Loan(amount, description, startDate, type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(l);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int loanTypeSize \u003d l.getType() \u003d\u003d Loan.Type.INCOMING ? account.getIncomingLoans().size() :"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                l.getType() \u003d\u003d Loan.Type.OUTGOING ? account.getOutgoingLoans().size() : -1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this \" + l.getType().toString().toLowerCase() + \" loan: \\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getLoans().get(account.getLoans().size() - 1).toString()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getLoans().size() + \" loans listed\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" and \" + loanTypeSize + \" \" + l.getType().toString().toLowerCase() + \" loans\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        int lastIndex \u003d account.getIncomeListTotal().size() - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        Income i \u003d account.getIncomeListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        account.getIncomeListTotal().remove(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        storage.writeToFile(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        ui.appendToOutput(i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "//        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income listed\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 84
    }
  },
  {
    "path": "src/main/java/moneycommands/AddSplitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Split;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds a split expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class AddSplitCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add split expenditure command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the split expenditure data within the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public AddSplitCommand(String command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceFirst(\"split \", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add split expenditure command. Takes the input data from user and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an split expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/cat \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float price \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] morSplit \u003d furSplit[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String category \u003d morSplit[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] evenMorSplit \u003d morSplit[1].split(\"/with \", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate boughtTime \u003d Parser.shortcutTime(evenMorSplit[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] people \u003d evenMorSplit[1].split(\"and \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cPair\u003cString, Boolean\u003e\u003e parties \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (String person : people) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            person \u003d person.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Pair\u003cString, Boolean\u003e temp \u003d new Pair\u003c\u003e(person, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            parties.add(temp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Split s \u003d new Split(price, description, category, boughtTime, parties);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account); // need to link this to storage later"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.populateCurrentMonthLists();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this split expenditure to your total spending: \\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(account.getExpListTotal().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) { // find out what this is for"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int lastIndex \u003d account.getExpListTotal().size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure exp \u003d account.getExpListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().remove(exp);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(exp.toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 90
    }
  },
  {
    "path": "src/main/java/moneycommands/AutoUpdateInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoUpdateInstalmentCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoUpdateInstalmentCommand() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() { return false; }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for(Instalment ins : account.getInstalments()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Period diff \u003d Period.between(ins.getDateBoughtDate(), currDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            int paymentsMade \u003d diff.getMonths() + diff.getYears() * 12 + 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            ins.percentPay(paymentsMade);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if(diff.getDays() !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.isNotPayTheMonth();;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if(diff.getDays() \u003d\u003d 0 \u0026\u0026 !ins.getPayForTheMonth()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                Expenditure e \u003d new Expenditure(ins.EqualMonthlyInstalment(), ins.getDescription(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        ins.getCategory(), currDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                account.getExpListCurrMonth().add(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.isPayTheMonth();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 40
    }
  },
  {
    "path": "src/main/java/moneycommands/CheckFutureBalanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class allow user to estimate their future balance in an account"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CheckFutureBalanceCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate futureDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor parses the input command and gets the description and the date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param inputString The command typed in by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws ParseException The exception for parsing the date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public CheckFutureBalanceCommand(String inputString) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d inputString.split(\" /at \")[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d description.replaceFirst(\"check-balance \", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        futureDate \u003d Parser.shortcutTime(inputString.split(\" /at \")[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return this command will not cease the overall program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method firstly find the account based on the description then calculate the number"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * of months between the future date and the latest update date. Based on the interest rate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * it can get the future balance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException The self-defined exceptions to handle the invalid future date and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * the non-existing account"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d account.findTrackerByName(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate currDate \u003d bankTracker.getLatestDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (futureDate.isBefore(currDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The input date is invalid! It should be a date later then the latest update date.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(currDate, futureDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears()*12;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        float balance \u003d bankTracker.getAmt();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        double rate \u003d bankTracker.getRate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        balance *\u003d  Math.pow((1+rate),length);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String stringBalance \u003d decimalFormat.format(balance);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  The future balance in \" + description + \" :\\n    \" + stringBalance + \" at \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + dateTimeFormatter.format(futureDate) + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "cctt1014": 73
    }
  },
  {
    "path": "src/main/java/moneycommands/CommitGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class CommitGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ArrayList\u003cGoal\u003e goalsAfterCommit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float goalSavingsAfterCommit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public CommitGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] args \u003d inputString.split(\"commit goal \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(args.length \u003d\u003d 1){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The Description of the command cannot be empty\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String combinedArgs \u003d args[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String[] indivArgs \u003d combinedArgs.split(\",\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            goalsAfterCommit \u003d  new ArrayList\u003c\u003e(account.getShortTermGoals());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            goalSavingsAfterCommit \u003d account.getGoalSavings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ArrayList\u003cInteger\u003e indexOfCommittedGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(String i: indivArgs){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                int index \u003d Integer.parseInt(i.replaceAll(\"[^0-9]+\", \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                indexOfCommittedGoals.add(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Collections.sort(indexOfCommittedGoals, Collections.reverseOrder());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(int j: indexOfCommittedGoals){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(j \u003e account.getShortTermGoals().size()){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    throw new DukeException(\"The serial number of the Goal is Out Of Bounds!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Goal committedGoal \u003d  goalsAfterCommit.get(j-1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    float price \u003d committedGoal.getPrice();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    if(goalSavingsAfterCommit \u003c price){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        throw new DukeException(\"Goals committed exceeds Goal Savings\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalsAfterCommit.remove(j-1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalSavingsAfterCommit -\u003d price;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            //account.sortShortTermGoals(goalsAfterCommit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float savingsReqPerMonth \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d goalsAfterCommit.size();i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Goal currGoal \u003d goalsAfterCommit.get(i-1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                float currGoalPrice \u003d currGoal.getPrice();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                LocalDate goalDate \u003d currGoal.getDateBoughtDate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                float monthsBetween \u003d ChronoUnit.MONTHS.between(LocalDate.now(), goalDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                String goalProgress \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(goalSavingsAfterCommit \u003e\u003d currGoalPrice){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalProgress \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    float percentageProgress \u003d (goalSavingsAfterCommit/currGoalPrice)*100;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalProgress \u003d \"[\" + df.format(percentageProgress) + \"%]\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    savingsReqPerMonth +\u003d (currGoalPrice - goalSavingsAfterCommit)/monthsBetween;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.appendToOutput(\" \" + i + \".\" + goalProgress + goalsAfterCommit.get(i-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\"Goal Savings after commit: $\" + goalSavingsAfterCommit + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\"Target Savings for the Month: $\" + savingsReqPerMonth + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "therealnickcheong": 102
    }
  },
  {
    "path": "src/main/java/moneycommands/CreateBankAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class create a bank account tracker for the user to track their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * different bank account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CreateBankAccountCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BankTracker newTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor analyzes the input command and get the information"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * (account description, initial amount, initial date and interest rate)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * of the new bank account tracker and pack it as a new bank-tracker."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param inputString The command line typed in by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws ParseException The exception for parsing the date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public CreateBankAccountCommand(String inputString) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String desc \u003d inputString.split(\" /amt \")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String info \u003d inputString.split(\" /amt \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        desc \u003d desc.replaceFirst(\"bank-account \",\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String[] words \u003d info.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate initialDate \u003d Parser.shortcutTime(words[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        newTracker \u003d new BankTracker(desc, Integer.parseInt(words[0]),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                initialDate, Double.parseDouble(words[4]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Since the new bank account tracker has been packed in the constructor,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * in this method, Financial Ghost will append the information of the new"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * tracker to the list in the Account class and print a confirm message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException The self-defined exception to handle the duplicate description"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cBankTracker\u003e currList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (BankTracker b : currList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (b.getDescription().equals(newTracker.getDescription())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"There is a account with the same name! Please change the description!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().add(newTracker);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Income newIncome \u003d new Income(newTracker.getAmt(), \"Initialize account: \" + newTracker.getDescription(), newTracker.getLatestDate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getIncomeListTotal().add(newIncome);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate date \u003d newTracker.getLatestDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (date.getMonthValue() \u003d\u003d currMonth \u0026\u0026 date.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getIncomeListCurrMonth().add(newIncome);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"New bank account tracker has been added to the list: \\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(newTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 9,
      "chengweixuan": 3,
      "cctt1014": 77,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteBankAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class is used to delete the bank tracker from the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * and withdraw the money from the total saving as a expenditure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DeleteBankAccountCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DeleteBankAccountCommand(String inputString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        inputString \u003d inputString.replaceFirst(\"delete bank-account \", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        index \u003d Integer.parseInt(inputString)-1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d account.getBankTrackerList().get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Expenditure expenditure \u003d new Expenditure(bankTracker.getAmt(), \"Withdraw from \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + bankTracker.getDescription(), \"bank\", Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getExpListTotal().add(expenditure);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate date \u003d Parser.shortcutTime(\"now\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (date.getMonthValue() \u003d\u003d currMonth \u0026\u0026 date.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getExpListCurrMonth().add(expenditure);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"The bank account tracker below has been removed: \\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(bankTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 57
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an expenditure from the Total Expenditure List according to index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete expenditure command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteExpenditureCommand(String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete expenditure command. Takes the index of the item"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Expenditure List and checks for the item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getExpListTotal().size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the expenditure is Out Of Bounds!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this expenditure:\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getExpListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getExpListTotal().size() - 1) + \" expenditures in the list.\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.markDeletedEntry(\"EXP\", \"@\", \"#\", serialNo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.undoDeletedEntry(account, \"EXP\", serialNo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 13,
      "chengweixuan": 17,
      "therealnickcheong": 34
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes a short-term goal from the Short-Term Goal List according to index"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete short-term goal command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param index delete command inputted from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteGoalCommand(int index){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete short-term goal command. Takes the index of the item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Short-Term Goals List and checks for the item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getShortTermGoals().size()){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this Goal:\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getShortTermGoals().get(serialNo-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getShortTermGoals().size()-1) + \" goals in the list.\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.markDeletedEntry(\"G\", \"@\", \"#\", serialNo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().remove(serialNo - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //account.sortShortTermGoals(account.getShortTermGoals());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.undoDeletedEntry(account, \"G\", serialNo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getShortTermGoals().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" goals listed\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 10,
      "chengweixuan": 17,
      "therealnickcheong": 41
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an income source from the Total Income List according to index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete income command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteIncomeCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete income command. Takes the index of the item"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Income List and checks for the item"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getIncomeListTotal().size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the income is Out Of Bounds!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Income deletedI \u003d account.getIncomeListTotal().get(serialNo - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this income source:\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\"  \" + deletedI.toString() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getIncomeListTotal().size() - 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" income sources in the list.\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.markDeletedEntry(\"INC\", \"@\", \"#\", serialNo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.undoDeletedEntry(account, \"INC\", serialNo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getIncomeListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income listed\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 17,
      "chengweixuan": 19,
      "therealnickcheong": 30
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class DeleteInstalmentCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public DeleteInstalmentCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        inputString \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() { return false; }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (serialNo \u003e account.getInstalments().size()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"The serial number of the Instalments is Out Of Bounds!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this Instalment:\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getInstalments().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getInstalments().size() - 1) + \" instalments in the list.\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.markDeletedEntry(\"INS\", \"@\", \"#\", serialNo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().remove(serialNo - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.undoDeletedEntry(account, \"INS\", serialNo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getInstalments().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 11,
      "ChenChao19": 35
    }
  },
  {
    "path": "src/main/java/moneycommands/DoneGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DoneGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the add short-term goal command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the goal data within the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DoneGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int indexNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (indexNo \u003e account.getShortTermGoals().size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the Goal is Out Of Bounds!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal doneGoal \u003d  account.getShortTermGoals().get(indexNo-1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d doneGoal.getPrice();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String desc \u003d doneGoal.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d doneGoal.getCategory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LocalDate doneDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(account.getGoalSavings() \u003c price){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Goal Price exceeds Goal Savings\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(price, desc, category, doneDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().remove(indexNo-1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //account.sortShortTermGoals(account.getShortTermGoals());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Nice! This Goal is Completed:\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + doneGoal.toString() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getShortTermGoals().size()) + \" goals in the list.\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //ui.appendToOutput(\"current Goal Savings: $\" + account.getGoalSavings() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "therealnickcheong": 69
    }
  },
  {
    "path": "src/main/java/moneycommands/ExitMoneyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ExitMoneyCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ExitMoneyCommand(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"     Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "therealnickcheong": 21
    }
  },
  {
    "path": "src/main/java/moneycommands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class FindCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public FindCommand(String cmd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(inputString.split(\" \").length \u003d\u003d 1){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The description of a find cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String find \u003d inputString.split(\"find \")[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            StringBuilder descSearch \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int findCounter \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(Goal goal: account.getShortTermGoals()){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(goal.getDescription().contains(find)){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    findCounter++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    descSearch.append(findCounter).append(\".\").append(goal.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String descSearchOutput \u003d descSearch.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Goals Found:\\n\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            findCounter \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearch.setLength(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(Income income: account.getIncomeListTotal()){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(income.getDescription().contains(find)){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    findCounter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    descSearch.append(findCounter).append(\".\").append(income.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d descSearch.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Income Items Found:\\n\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            findCounter \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearch.setLength(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(Expenditure expenditure: account.getExpListTotal()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(expenditure.getDescription().contains(find)){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    findCounter++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    descSearch.append(findCounter).append(\".\").append(expenditure.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d descSearch.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Expenditure Items Found:\\n\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            findCounter \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearch.setLength(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(Loan loan: account.getLoans()){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(loan.getDescription().contains(find)){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    findCounter++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    descSearch.append(findCounter).append(\".\").append(loan.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d descSearch.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Loan Items Found:\\n\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            findCounter \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearch.setLength(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for(Instalment instalment: account.getInstalments()){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if(instalment.getDescription().contains(find)){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    findCounter++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    descSearch.append(findCounter).append(\".\").append(instalment.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d descSearch.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Instalment Items Found:\\n\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //ui.appendToOutput(\"Got it, Search Results will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 98
    }
  },
  {
    "path": "src/main/java/moneycommands/GraphCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class GraphCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public GraphCommand(String inputString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd \u003d inputString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (cmd.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\"Done.\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\"Got it, graph will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 31
    }
  },
  {
    "path": "src/main/java/moneycommands/InternalTransferCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class InternalTransferCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private boolean add;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private float amt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public InternalTransferCommand(String inputString) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String status \u003d inputString.split(\" \")[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (status.equals(\"deposit\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            add \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            inputString \u003d inputString.replaceFirst(\"deposit \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (status.equals(\"withdraw\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            add \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            inputString \u003d inputString.replaceFirst(\"withdraw \", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt \u003d Float.parseFloat(inputString.split(\" \")[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        date \u003d Parser.shortcutTime(inputString.split(\" /at \")[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String temp \u003d inputString.split(\" /at \")[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d temp.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return this command will not cease the overall program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d account.findTrackerByName(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Calendar currDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currMonth \u003d currDate.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int currYear \u003d currDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (add) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.updateDate(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.addAmt(amt);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Income income \u003d new Income(amt, \"Deposit to \" + bankTracker.getDescription(), date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getIncomeListTotal().add(income);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (date.getMonthValue() \u003d\u003d currMonth \u0026\u0026 date.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                account.getIncomeListCurrMonth().add(income);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (bankTracker.predictAmt(date) \u003c amt) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"Sorry, FG only allow non-zero balance. Here is the account info: \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + bankTracker.getBankAccountInfo());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.updateDate(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.addAmt(0-amt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Expenditure expenditure \u003d new Expenditure(amt, \"Withdraw from \" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    bankTracker.getDescription(), \"withdraw from bank\", date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getExpListTotal().add(expenditure);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (date.getMonthValue() \u003d\u003d currMonth \u0026\u0026 date.getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                account.getExpListCurrMonth().add(expenditure);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  Got it. Here is the current information about this account:\\n    \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + bankTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 83
    }
  },
  {
    "path": "src/main/java/moneycommands/ListBankTrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class responds to \"list bank trackers\" command to list down all"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * the existing bank account trackers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ListBankTrackerCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ListBankTrackerCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method execute the list command to list down all the existing bank"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * account trackers by getting the information from account object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cBankTracker\u003e accountList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"Here are the bank accounts and their info:\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c accountList.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput((i+1) + \". ----------------------------------------\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(accountList.get(i).getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\"-------------------------------------------\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "cctt1014": 40,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/ListGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all short-term goals within the Short-Term Goal List to the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListGoalsCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListGoalsCommand(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list goals command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all short-term goals in the Short-Term Goals List to the user according to index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //account.sortShortTermGoals(account.getShortTermGoals());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float savingsReqPerMonth \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d account.getShortTermGoals().size();i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Goal currGoal \u003d account.getShortTermGoals().get(i-1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float currGoalPrice \u003d currGoal.getPrice();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            LocalDate goalDate \u003d currGoal.getDateBoughtDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float monthsBetween \u003d ChronoUnit.MONTHS.between(LocalDate.now(), goalDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String goalProgress \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if(account.getGoalSavings() \u003e\u003d currGoalPrice){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                goalProgress \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                float percentageProgress \u003d (account.getGoalSavings()/currGoalPrice)*100;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                goalProgress \u003d \"[\" + df.format(percentageProgress) + \"%]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                savingsReqPerMonth +\u003d (currGoalPrice - account.getGoalSavings())/monthsBetween;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + i + \".\" + goalProgress + account.getShortTermGoals().get(i-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"current Goal Savings: $\" + account.getGoalSavings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"current Goal Savings: $\" + account.getGoalSavings() + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Target Savings for the Month: $\" + savingsReqPerMonth + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "chengweixuan": 13,
      "therealnickcheong": 54
    }
  },
  {
    "path": "src/main/java/moneycommands/ListInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class ListInstalmentCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ListInstalmentCommand(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() { return false; }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for (Instalment i : account.getInstalments()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".[\" + df.format(i.getPercentage()) + \"%] \" + i.getDescription() + \" ($\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + df.format(i.EqualMonthlyInstalment()) + \" per month until \" + i.getDateEndDate() + \")\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 31,
      "therealnickcheong": 2
    }
  },
  {
    "path": "src/main/java/moneycommands/ListLoansCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists either the outgoing, incoming or all loans in the Loans List"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * according to user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ListLoansCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command. Isolates the command that determines what type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of loans to list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command List command inputted from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListLoansCommand(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        command \u003d command.replaceFirst(\"list \", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        command \u003d command.replace( \"loans\", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method calculates the total monetary amount of a type of loan."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param type Type of loan specified by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Float monetary amount of the type of loan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float totalLoanAmount(Loan.Type type, Account account) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case OUTGOING:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getOutgoingLoans()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case INCOMING:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getIncomingLoans()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total \u003d -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list loans command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Determines the type of loan to list and searches the Loan List for the type of"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * loan specified. Returns all loans of that type with the total monetary amount"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of that type of loan and prints to user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan.Type searchType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (inputString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"incoming\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"outgoing\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.ALL;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (searchType \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getIncomingLoans()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (searchType \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getOutgoingLoans()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (searchType \u003d\u003d Loan.Type.ALL) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Oops! Type of list invalid! Please list either incoming, outgoing or all loans\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total amount of \" + searchType.toString() + \" Loans: $\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(totalLoanAmount(searchType, account) + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it! List of \" + searchType.toString() + \" Loans printed in the other pane! \\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 126
    }
  },
  {
    "path": "src/main/java/moneycommands/ListMonthExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all expenditures within the Month Expenditure List to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ListMonthExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListMonthExpenditureCommand(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list month expenditure command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all expenditures in the Month Expenditure List to the user according to index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : account.getExpListCurrMonth()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToGraphContainer(\"Total expenditure for the month: $\" + account.getCurrMonthExp() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "ChenChao19": 5,
      "chengweixuan": 39,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/ListMonthIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all income sources within the Month Income List to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ListMonthIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListMonthIncomeCommand(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list month income command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all income sources in the Month Income List to the user according to index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : account.getIncomeListCurrMonth()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToGraphContainer(\"Total income for the month: $\" + account.getCurrMonthIncome() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "chengweixuan": 39,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all expenditures within the Total Expenditure List to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListTotalExpenditureCommand(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all expenditure command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all expenditures in the Total Expenditure List to the user according to index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Expenditure i : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            //System.out.println(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"Total income so far: $\" + account.getTotalExp());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToGraphContainer(\"Total expenditure so far: $\" + account.getTotalExp() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "chengweixuan": 13,
      "therealnickcheong": 29
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all income sources within the Total Income List to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListTotalIncomeCommand(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all income command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all income sources in the Total Income List to the user according to index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToGraphContainer(\"Total income so far: $\" + account.getTotalIncome() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "chengweixuan": 14,
      "therealnickcheong": 26
    }
  },
  {
    "path": "src/main/java/moneycommands/MoneyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public abstract class MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public MoneyCommand(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public abstract void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public abstract void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "therealnickcheong": 17
    }
  },
  {
    "path": "src/main/java/moneycommands/SettleLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command settles the debt of an incoming/outgoing loan in the Loans List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class SettleLoanCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    Loan.Type type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the settle loan command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Determines the type of of loan to settle specified in the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Settle command inputted by user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public SettleLoanCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.startsWith(\"paid\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"paid \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (command.startsWith(\"received\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"received \", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method checks if a String contains a numeric or non-numeric value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param checkStr String to be checked"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return True if the String is  numeric, else returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isNumeric(String checkStr) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            int i \u003d Integer.parseInt(checkStr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method scans a given ArrayList of loans and returns an ArrayList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of all the names of the involved party in the loans."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans to be scanned"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return ArrayList of names of parties"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cString\u003e getListOfNames(ArrayList\u003cLoan\u003e loanList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cString\u003e listOfNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loanList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            listOfNames.add(l.getDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return listOfNames;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method returns true if a person, who\u0027s name is specified, has a loan"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * listed within a given ArrayList of loans, else returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans to be checked"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param name String name of the person"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return True if the person is found in the loan list, else returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isInListOfNames(ArrayList\u003cLoan\u003e loanList, String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return getListOfNames(loanList).contains(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the settle loan command. According to the type of loan"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be settled specified by user, checks the incoming/outgoing loans for the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * incoming/outgoing loan entry to be settled."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Searches for the loan specified by the user in either the incoming/outgoing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * ArrayList of loans according the name or index, depending on user input, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * settles his/her loan with the amount inputted by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If the amount repaid settles the entire debt, the loan is set as settled. Else,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the amount repaid is deducted from outstanding amount in the loan."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If an outgoing loan is settled, the debt repaid is entered into Total Income List."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If an incoming loan is settled, the debt repaid is entered into Total Expenditure List."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" /to \", 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float amount;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (splitStr[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            amount \u003d -2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            amount \u003d Float.parseFloat(splitStr[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int serialNo;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (isNumeric(splitStr[1])) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            serialNo \u003d Integer.parseInt(splitStr[1]) - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (type \u003d\u003d Loan.Type.OUTGOING \u0026\u0026 isInListOfNames(account.getOutgoingLoans(), splitStr[1])) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                serialNo \u003d getListOfNames(account.getOutgoingLoans()).indexOf(splitStr[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else if (type \u003d\u003d Loan.Type.INCOMING \u0026\u0026 isInListOfNames(account.getIncomingLoans(), splitStr[1])) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                serialNo \u003d getListOfNames(account.getIncomingLoans()).indexOf(splitStr[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(splitStr[1] + \" does not have a/an \" + type.toString().toLowerCase() + \" loan\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan l;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float amountToPrint;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Loan.Type.INCOMING \u0026\u0026 serialNo \u003e account.getIncomingLoans().size() ||"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        type \u003d\u003d Loan.Type.OUTGOING \u0026\u0026 serialNo \u003e account.getOutgoingLoans().size()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the loan is Out Of Bounds!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Loan.Type.OUTGOING \u0026\u0026 amount \u003c\u003d account.getOutgoingLoans().get(serialNo).getOutstandingLoan()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            l \u003d account.getOutgoingLoans().get(serialNo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            amountToPrint \u003d (amount \u003d\u003d -2) ? l.getOutstandingLoan() : amount;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            l.settleLoanDebt(amount);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getOutgoingLoans().set(serialNo, l);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Income i \u003d new Income(amount, \"From \" + l.getDescription(), Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getIncomeListCurrMonth().add(i);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Loan.Type.INCOMING \u0026\u0026 amount \u003c\u003d account.getIncomingLoans().get(serialNo).getOutstandingLoan()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            l \u003d account.getIncomingLoans().get(serialNo);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            amountToPrint \u003d (amount \u003d\u003d -2) ? l.getOutstandingLoan() : amount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            l.settleLoanDebt(amount);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getIncomingLoans().set(serialNo, l);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Expenditure e \u003d new Expenditure(amount, l.getDescription(), \"Loan Repayment\", Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            account.getExpListCurrMonth().add(e);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Whoa! The amount entered is more than debt! Type \u0027all\u0027 to settle the entire debt\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String payDirection \u003d (type \u003d\u003d Loan.Type.INCOMING) ? \" to \" :"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                type \u003d\u003d Loan.Type.OUTGOING ? \" from \" : \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. An amount of $\" + amountToPrint + \" has been paid\" + payDirection);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(l.getDescription() + \" for the following loan: \\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (l.getStatus()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            ui.appendToOutput(\"The \" + type.toString().toLowerCase() + \" loan has been settled\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 168
    }
  },
  {
    "path": "src/main/java/moneycommands/SettleSplitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Split;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command settles a debt within a split expenditure in the Total Expenditure List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class SettleSplitCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the settle split expenditure command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the data for the index of the split expenditure in the Total Expenditure List"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and the person who has settled the debt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Settle split expenditure command inputted from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public SettleSplitCommand(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceFirst(\"settle \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method determines if the String inputted is a number or the name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of a person."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param checkStr Name/Number of person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Boolean true if the String is a number, false if it is a name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isNumeric(String checkStr) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            int i \u003d Integer.parseInt(checkStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the settle split expenditure command. Takes the input from the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and checks the Total Expenditure List for the split expenditure entry."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Searches for the person specified by the user input in the list of people the expenditure"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * is split with, according to name or index depending on user input, and sets his/her debt"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * as settled."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Enters the debt paid into Total Income List."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int serialNo \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int settleNo \u003d -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (serialNo \u003e account.getExpListTotal().size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the expenditure is Out Of Bounds!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure s \u003d account.getExpListTotal().get(serialNo - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (!(s instanceof Split)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Oops! Index given is not a Split Expenditure!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (isNumeric(splitStr[1])) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            settleNo \u003d Integer.parseInt(splitStr[1]) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Pair\u003cString, Boolean\u003e toSearch \u003d new Pair\u003c\u003e(splitStr[1], false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (((Split) s).getParties().contains(toSearch)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                settleNo \u003d ((Split) s).getParties().indexOf(toSearch);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(splitStr[1] + \" does not owe you for \" + s.getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ((Split) s).hasSettledSplit(settleNo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().set(serialNo - 1, s); // need to see if this works"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float price \u003d ((Split) s).getEachOwe();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String description \u003d \"Repayment for \" + s.getDescription();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate payday \u003d Parser.shortcutTime(\"now\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i \u003d new Income(price, description, payday);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListCurrMonth().add(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String statusStr;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (((Split) s).getOutstandingAmount().equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            statusStr \u003d \"The split debt has been settled\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            statusStr \u003d \"The split debt is still outstanding. Outstanding amount: $\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    ((Split) s).getOutstandingAmount();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String personName \u003d ((Split) s).getNameOfPerson(settleNo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. \" + personName + \" has settled his debt on the split expenditure: \\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \" + account.getExpListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(statusStr + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "chengweixuan": 119
    }
  },
  {
    "path": "src/main/java/moneycommands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * This command tracks the last command issued to the program and reverts program back to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * previous state when called."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class UndoCommand extends  MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    protected MoneyCommand lastIssuedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public UndoCommand() { lastIssuedCommand \u003d null; }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public boolean isExit() { return  false; }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void setLastIssuedCommand(MoneyCommand c) { lastIssuedCommand \u003d c; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        lastIssuedCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (lastIssuedCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"No command to undo!\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 38
    }
  },
  {
    "path": "src/main/java/moneycommands/ViewPastMonthExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command allows users to check the expenditure"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * for a previous or future month specified by the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ViewPastMonthExpenditure extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the check expenditure command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the data for the month and year to check as given in the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Check command inputted from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ViewPastMonthExpenditure(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String inputString \u003d command.replaceFirst(\"check expenditure \", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        month \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        year \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method returns the name of a month given the index of the month from 1-12."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param month Index of the month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String of the month name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getMonthName(int month) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 1: {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"January\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 2: {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"February\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 3: {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"March\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 4: {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"April\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 5: {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"May\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 6: {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"June\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 7: {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"July\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 8: {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"August\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 9: {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"September\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 10: {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"October\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 11: {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"November\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 12: {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"December\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the check expenditure command. Takes the input from the user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and checks the Total Expenditure List for expenditures which occur in the month specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the user input. Prints the expenditures found and computes the total expenditure for that"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * month and prints to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Month is invalid! Please pick a month from 1-12\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float totalMonthExpenditure \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (i.getDateBoughtDate().getMonthValue() \u003d\u003d month \u0026\u0026 i.getDateBoughtDate().getYear() \u003d\u003d year) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToOutput(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                totalMonthExpenditure +\u003d i.getPrice();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Total expenditure for \" + getMonthName(month) + \" of \" + year + \" : $\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(totalMonthExpenditure + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "chengweixuan": 116
    }
  },
  {
    "path": "src/main/java/moneycommands/ViewPastMonthIncome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ";import controlpanel.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command allows users to check the income"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * for a previous or future month specified by the user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ViewPastMonthIncome extends MoneyCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the check income command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the data for the month and year to check as given in the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Check command inputted from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ViewPastMonthIncome(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String inputString \u003d command.replaceFirst(\"check income \", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        month \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        year \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method returns the name of a month given the index of the month from 1-12."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param month Index of the month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String of the month name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getMonthName(int month) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 1: {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"January\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 2: {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"February\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 3: {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"March\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 4: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"April\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 5: {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"May\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 6: {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"June\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 7: {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"July\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 8: {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"August\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 9: {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"September\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 10: {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"October\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 11: {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"November\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            case 12: {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return \"December\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the check income command. Takes the input from the user"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and checks the Total Income List for expenditures which occur in the month specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the user input. Prints the income sources found and computes the total income for that"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * month and prints to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Month is invalid! Please pick a month from 1-12\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float totalMonthIncome \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (i.getPayday().getMonthValue() \u003d\u003d month \u0026\u0026 i.getPayday().getYear() \u003d\u003d year) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToOutput(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                totalMonthIncome +\u003d i.getPrice();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Total income for \" + getMonthName(month) + \" of \" + year + \" : $\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(totalMonthIncome + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 7,
      "chengweixuan": 112,
      "therealnickcheong": 2
    }
  },
  {
    "path": "src/main/java/moneycommands/initCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class initCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public initCommand(String cmd, boolean isNewUser) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(!isNewUser){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You\u0027re an existing user\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float userSavings \u003d Float.parseFloat(inputString.split(\" \")[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float avgExp \u003d Float.parseFloat(inputString.split(\" \")[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.initialize(userSavings,avgExp);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Initialised, you\u0027re ready to use Financial Ghosts\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 9,
      "chengweixuan": 1,
      "therealnickcheong": 29
    }
  },
  {
    "path": "src/main/java/moneycommands/startCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class startCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public startCommand(boolean isNewUser){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(isNewUser){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            message \u003d \"You are a new user please type: init [existing savings] [Avg Monthly Expenditure]\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            message \u003d \"You\u0027re ready to use Financial Ghosts\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"current Goal Savings: $\" + account.getGoalSavings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "therealnickcheong": 28
    }
  },
  {
    "path": "src/main/resources/view/CommandPopUp.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1e9\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 16
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1e9\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 3,
      "therealnickcheong": 13
    }
  },
  {
    "path": "src/main/resources/view/Histogram.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root prefHeight\u003d\"261.0\" prefWidth\u003d\"331.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChart\" layoutX\u003d\"-4.0\" prefHeight\u003d\"337.0\" prefWidth\u003d\"409.0\" titleSide\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 19
    }
  },
  {
    "path": "src/main/resources/view/LineGraph.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root prefHeight\u003d\"261.0\" prefWidth\u003d\"331.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cLineChart fx:id\u003d\"lineChart\" layoutX\u003d\"-4.0\" prefHeight\u003d\"337.0\" prefWidth\u003d\"409.0\" titleSide\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" fx:id\u003d\"yAxis\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"680.0\" prefWidth\u003d\"910.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cTextField fx:id\u003d\"searchBar\" layoutY\u003d\"500.0\" onKeyReleased\u003d\"#handleSearchInput\" promptText\u003d\"Search\" prefHeight\u003d\"30\" prefWidth\u003d\"348.0\" AnchorPane.bottomAnchor\u003d\"149.60000000000002\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"530.0\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#help\" promptText\u003d\"Commands\" prefHeight\u003d\"41.0\" prefWidth\u003d\"830.0\" AnchorPane.bottomAnchor\u003d\"108.39999999999998\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003c!--\u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"834.0\" layoutY\u003d\"600.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hmax\u003d\"10.0\" hvalue\u003d\"10.0\" pannable\u003d\"true\" prefHeight\u003d\"500.0\" prefWidth\u003d\"369.0\" vmax\u003d\"10.0\" vvalue\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"348.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane2\" hbarPolicy\u003d\"NEVER\" hmax\u003d\"10.0\" hvalue\u003d\"10.0\" layoutX\u003d\"373.0\" pannable\u003d\"true\" prefHeight\u003d\"500.0\" prefWidth\u003d\"538.0\" vvalue\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            \u003cVBox fx:id\u003d\"graphContainer\" prefWidth\u003d\"409.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "      \u003cVBox layoutY\u003d\"572.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"238.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 2,
      "cctt1014": 8,
      "therealnickcheong": 15
    }
  },
  {
    "path": "src/test/java/DetectAnomaliesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import commands.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public DetectAnomaliesTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void testInvalidDuration() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addEvent \u003d new AddCommand(\"event\", \"project meeting /at 1/1/2000 0000 to 1/1/1999 0000\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addEvent.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void testScheduleClashes() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Events e \u003d new Events(\"important thing\", simpleDateFormat.parse(\"1/1/2008 1900\"), simpleDateFormat.parse(\"1/1/2008 2100\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks.addTask(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent1 \u003d new AddCommand(\"event\", \"party /at 1/1/2008 1910 to 1/1/2008 2110\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent1.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent2 \u003d new AddCommand(\"event\", \"study session /at 1/1/2008 1830 to 1/1/2008 2030\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent2.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent3 \u003d new AddCommand(\"event\", \"duke meeting /at 1/1/2008 1850 to 1/1/2008 2105\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent3.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent4 \u003d new AddCommand(\"event\", \"phone my mom /at 1/1/2008 1500 to 1/1/2008 1945\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent4.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks.removeTask(tasks.lengthOfList() - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 59,
      "ChenChao19": 2
    }
  },
  {
    "path": "src/test/java/FreeTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class FreeTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public FreeTimeTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage \u003d new Storage(\"D:/main/data/tasks-test.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testIsExit() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command freeTimeCmd \u003d new FreeTimeCommand(\"2/2/2019 1400\", 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertFalse(freeTimeCmd.isExit());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testFindFreeTime() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command freeTimeCmd \u003d new FreeTimeCommand(\"1/1/2020 0000\", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        freeTimeCmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertEquals(\"  The nearest time slot: \\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                \"    1/1/2020 0000 ~ 1/1/2020 0200 is available\\n\",ui.getOutputString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 2,
      "cctt1014": 40
    }
  },
  {
    "path": "src/test/java/GoalsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class GoalsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testAddGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goal buy Motorbike /amt 10000 /by 15/1/2050 /priority HIGH\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand addGoalCommand \u003d  new AddGoalCommand(testInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        addGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this Goal: \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"     [GS] buy Motorbike (target: $10000.0)\\n (to achieve by: 15/1/2050) HIGH\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                , ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDeleteGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand deleteGoalCommand \u003d  new DeleteGoalCommand(8);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        deleteGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this Goal:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"  [GS] buy Motorbike (target: $10000.0)\\n (to achieve by: 15/1/2050) HIGH\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                , ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    public void testDoneGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        String testInput \u003d \"done goal 4\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        MoneyCommand doneGoalCommand \u003d  new DoneGoalCommand(testInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        ui.clearOutputString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        doneGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        assertEquals(\" Noted. I\u0027ve removed this Goal:\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//                        + \"  [GS] buy Motorbike (target: $10000.0)\\n (to achieve by: 15/1/2050) HIGH\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//                , ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 72
    }
  },
  {
    "path": "src/test/java/RemindTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.RemindersCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersUpcoming()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdUpcoming \u003d  new RemindersCommand(\"upcoming\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdUpcoming.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your Upcoming Reminders: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 1.[D][\\u2718] Duke Documentation (by: 30/9/2019 2359)\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 2.[T][\\u2718] some stuff\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 3.[P][\\u2718] hackathon (from: 29/9/2019 1400 to 19/10/2019 1800)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersPast()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdPast \u003d  new RemindersCommand(\"past\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdPast.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your Past Reminders: \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[E][\\u2718] code jam (at: 6/6/2011 1100 to 7/7/2011 1400)\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 2.[D][\\u2718] IPPT  (by: 16/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersToday()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdToday \u003d  new RemindersCommand(\"today\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdToday.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Today\u0027s Reminders: \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[P][\\u2718] H2 math revision (from: 12/9/2019 1400 to 30/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testViewSchedule()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Command viewSchedule \u003d  new ViewScheduleCommand(\"schedule /on 14/09/2019\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        viewSchedule.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your schedule for 14/09/2019: \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[P][\\u2718] H2 math revision (from: 12/9/2019 1400 to 30/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "ChenChao19": 2,
      "cctt1014": 3,
      "-": 61,
      "therealnickcheong": 31
    }
  },
  {
    "path": "src/test/java/RescheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class RescheduleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public RescheduleTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage \u003d new Storage(\"D:/main/data/tasks.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command rescheduleCmd \u003d new"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                RescheduleCommand(\"reschedule event 1 /at 6/6/2011 1100 to 7/7/2011 1400\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertFalse(rescheduleCmd.isExit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testRescheduleOutput() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command rescheduleCmd \u003d new"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                RescheduleCommand(\"reschedule deadline 4 /by 16/9/2019 1800\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        rescheduleCmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \"  \" + tasks.getCheckList().get(4-1).toString() + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \" Now you have 7 tasks in the list.\\n\" + \" Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \"     \" + tasks.getCheckList().get(8-1).toString() + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \" Now you have 8 tasks in the list.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 2,
      "cctt1014": 45
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import controlpanel.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Task test \u003d new Task(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, test.getStatus());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Task test \u003d new Task(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[\\u2718]\", test.getStatusIcon());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[\\u2713]\", test.getStatusIcon());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testType() throws ParseException{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strStartDate \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strEndDate \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"T\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new ToDos(description).getType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"D\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Deadline(description, startDate).getType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"E\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Events(description, startDate, endDate).getType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"P\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(description, strStartDate, strEndDate).getType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"F\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(description, needs).getType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testGetByAtFromToNeeds()throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String from \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String to \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"do assignments\", startDate).getBy());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"6/2/2019 1300\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new Events(\"marquee\", startDate,endDate).getEndAt());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new Events(\"marquee\", startDate,endDate).getStartAt());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(\"zouk\", from,to).getFrom());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"6/2/2019 1300\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(\"zouk\", from, to).getTo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"2 hours\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(\"zoukout\", needs).getNeeds());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testToString() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strStartDate \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strEndDate \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[T][\\u2718] Get lit tonight\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new ToDos(description).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[D][\\u2718] Get lit tonight(by: \" + strStartDate + \")\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Deadline(description, startDate).toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[E][\\u2718] Get lit tonight(at: \" + strStartDate + \" to \" + strEndDate + \")\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Events(description, startDate, endDate).toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[P][\\u2718] Get lit tonight(from: \" + strStartDate + \" to \" + strEndDate + \")\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(description, strStartDate, strEndDate).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[F][\\u2718] Get lit tonight(needs: 2 hours)\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(description, needs).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 67,
      "cctt1014": 3,
      "-": 40,
      "therealnickcheong": 4
    }
  },
  {
    "path": "src/test/java/TentativeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**import commands.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TentativeTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testMultiEventCreation() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addMultiEvent \u003d new AddCommand(\"multiEvent\", \"multiEvent event name /at 1/12/2009 2232 to 1/12/2009 2234 /or 2/12/2009 2232 to 2/12/2009 2234\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addMultiEvent.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \"     [E][✘] event name (at: 1/12/2009 2232 to 1/12/2009 2234 or 2/12/2009 2232 to 2/12/2009 2234 )\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" Now you have \" + tasks.lengthOfList() + \" tasks in the list.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void chooseEventTime() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Command chooseTime \u003d new ChooseEventTime(\"choose \" + tasks.lengthOfList() + \" 1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        chooseTime.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\" Noted. The following timing has been chosen:\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                \" [E][✘] event name (at: 1/12/2009 2232 to 1/12/2009 2234 )\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Command clearChanges \u003d new DeleteCommand(tasks.lengthOfList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        clearChanges.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "ChenChao19": 2,
      "chengweixuan": 9,
      "-": 42,
      "therealnickcheong": 3
    }
  }
]
