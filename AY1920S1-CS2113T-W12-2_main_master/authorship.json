[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027 //for documentation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027 //shadowJar for pack up an executable file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027 //javaFx for rendering"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    archiveBaseName \u003d \"Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "therealnickcheong": 22
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method give the GUI in the form of a Dialog Box."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param text string written on the GUI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param img image show on the GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return DialogBox a GUI to interact with the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 6,
      "cctt1014": 5,
      "therealnickcheong": 58
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * The main class which controls the overall flow, run the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Duke class acts as a constructor to initialize and setup"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * //@param filePath the path of the tasks.txt which contains the data of the tasks\u0027 list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            account \u003d new Account();//need to load from storage on program init"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method runs the overall program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        while (!isExit \u0026\u0026 ui.inputStatus()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method prints a line that Duke will print out in the program."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return a line that the program will print out in response to a user\u0027s commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            boolean isNewUser \u003d account.isToInitialize();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand c \u003d Parser.moneyParse(input, isNewUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            c.execute(account, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return ui.getOutputString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return ui.getOutputString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "cctt1014": 15,
      "-": 46,
      "therealnickcheong": 25
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            stage.setTitle(\"Financial Ghost\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 1,
      "therealnickcheong": 28
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.stage.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Ui mainWindowUi;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static Image userImage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Initialises scroll bar and outputs Duke Welcome message on startup of GUI."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        mainWindowUi \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String welcomeDuke \u003d mainWindowUi.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                DialogBox.getDukeDialog(\"enter start to begin\", dukeImage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileReader fileReader \u003d new FileReader(\"data/iconPath.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String iconPath \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        userImage \u003d new Image(this.getClass().getResourceAsStream(iconPath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (input.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"data/iconPath.txt\", false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            FileChooser chooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            chooser.setTitle(\"Select a picture:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            File defaultDirectory \u003d new File(\"D:/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            chooser.setInitialDirectory(defaultDirectory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            File selectedFile \u003d chooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Path from \u003d Paths.get(selectedFile.toURI());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Path to \u003d Paths.get(\"src/main/resources/images/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/\" + selectedFile.getName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    DialogBox.getDukeDialog(\"Done.\", dukeImage)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.write(\"/images/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 44,
      "therealnickcheong": 55
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.FixedDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Periods;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.MultipleEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The command which aims to add a new task to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor to initialize a add command object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param string The type of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd The content of the original text in input command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public AddCommand(String string, String cmd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        type \u003d string;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The method execute the add command to add different types of task to the task list based on the."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * task type which is specified in the input command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException When there is something wrong with the parsing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the command line is not qualified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        case \"period\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String[] getDate1 \u003d inputString.split(\"/from \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String[] getDate2 \u003d getDate1[1].split(\"/to \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Date date1 \u003d simpleDateFormat.parse(getDate2[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Date date2 \u003d simpleDateFormat.parse(getDate2[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (invalidDuration(date1, date2)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                throw new DukeException(\"OOPS!!! The period of this event is invalid.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String formattedDate1 \u003d simpleDateFormat.format(date1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String formattedDate2 \u003d simpleDateFormat.format(date2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Task t \u003d new Periods(getDate1[0].replaceFirst(\"period \", \"\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    formattedDate1, formattedDate2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String[] getDate \u003d inputString.split(\"/by \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Date date \u003d simpleDateFormat.parse(getDate[getDate.length - 1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String formattedDate \u003d simpleDateFormat.format(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Task t \u003d new Deadline(getDate[0].replaceFirst(\"deadline \", \"\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (inputString.equals(\"event\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String[] getDate \u003d inputString.split(\"/at \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String eventPeriod \u003d getDate[getDate.length - 1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String[] startendDate \u003d eventPeriod.split(\" to \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Date startDate \u003d simpleDateFormat.parse(startendDate[0]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Date endDate \u003d simpleDateFormat.parse(startendDate[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (invalidDuration(startDate, endDate)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                throw new DukeException(\"OOPS!!! The period of this event is invalid.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Task t \u003d new Events(getDate[0].replaceFirst(\"event \", \"\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    startDate, endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (scheduleClashes(tasks, (Events) t)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                throw new DukeException(\"OOPS! There seems to be a clash in your schedule.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (inputString.equals(\"todo\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Task t \u003d new ToDos(inputString.replaceFirst(\"todo \", \"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        case \"duration\": {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (inputString.equals(\"duration\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a duration cannot be empty.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String[] getDuration \u003d inputString.split(\"/needs \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Task t \u003d new FixedDuration(getDuration[0].replaceFirst(\"duration \", \"\"), getDuration[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"multiEvent\": {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (inputString.equals(\"multiEvent\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a multiple event cannot be empty.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] getDate \u003d inputString.split(\"/at\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String description \u003d getDate[0].replaceFirst(\"multiEvent \", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] dateStr \u003d getDate[1].split(\"/or\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            ArrayList\u003cPair\u003cDate, Date\u003e\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (String choices : dateStr) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String[] startEndDate \u003d choices.split(\"to \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Date startDate \u003d simpleDateFormat.parse(startEndDate[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Date endDate \u003d simpleDateFormat.parse(startEndDate[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (invalidDuration(startDate, endDate)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The period of this event is invalid.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Pair\u003cDate, Date\u003e tempDate \u003d new Pair\u003c\u003e(startDate, endDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                dates.add(tempDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Task t \u003d new MultipleEvent(description, dates);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            tasks.addTask(t);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeTheFile(tasks.getCheckList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"     \" + tasks.getTask(tasks.lengthOfList() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + tasks.lengthOfList() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method check that is there any time clash between the input event and."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * the existing tasks."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param e The input event needs to be checked."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Is there any time clash between the input event an the existing tasks."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Boolean scheduleClashes(TaskList tasks, Events e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            if (t instanceof Events) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                if (e.getStartDateAt().compareTo(((Events) t).getEndDateAt()) \u003c\u003d 0"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    \u0026\u0026 e.getEndDateAt().compareTo(((Events) t).getStartDateAt()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method compares the start date and the end date of one event."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * to check whether it is a valid input duration."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param from The start date of a event."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param to The end date of a event."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether it is a valid input duration."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Boolean invalidDuration(Date from, Date to) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return (from.compareTo(to) \u003e 0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 19,
      "ChenChao19": 24,
      "chengweixuan": 22,
      "cctt1014": 74,
      "therealnickcheong": 45
    }
  },
  {
    "path": "src/main/java/commands/ChooseEventTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ChooseEventTime extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int choice;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor initialise a ChooseEventTime command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param command the content of the original command input by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ChooseEventTime(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d command.replaceFirst(\"choose \", \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitStr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        serialNo \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        choice \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (serialNo \u003e tasks.lengthOfList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        tasks.getCheckList().get(serialNo - 1).chooseDate(choice - 1); // chooses one choice"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Noted. The following timing has been chosen:\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" \" + tasks.getTask(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.writeTheFile(tasks.getCheckList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 4,
      "chengweixuan": 1,
      "cctt1014": 3,
      "-": 28,
      "therealnickcheong": 5
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The abstract class to represent all types of the commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The default constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Command(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The methods to execute the command based on its type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException When there is something wrong with the parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the command line is not qualified."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 22,
      "therealnickcheong": 15
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The command which aims to delete a specific task from the checklist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor which initializes the delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param index the index number of the task which will be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        serialNo \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the delete command. It deletes a task which is specified by its."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * index number from the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the command line is not qualified."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (serialNo \u003e tasks.lengthOfList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  \" + tasks.getTask(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (tasks.lengthOfList() - 1) + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks.removeTask(serialNo - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeTheFile(tasks.getCheckList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 36,
      "therealnickcheong": 15
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The command aims to mark a specific task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor which initialize the done command with a input index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param index The index number of the task which will be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        serialNo \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the done command. It marks the task as done according to its index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the command line is not qualified."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (serialNo \u003e tasks.lengthOfList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks.markDoneATask(serialNo - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeTheFile(tasks.getCheckList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"   \" + tasks.getTask(serialNo - 1).getStatusIcon());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(tasks.getTask(serialNo - 1).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 2,
      "cctt1014": 33,
      "therealnickcheong": 15
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * the exit command aims to trigger the greeting and cease the overall program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * A default constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the exit command. It will send a goodbye message and cease the overall program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"     Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 25,
      "therealnickcheong": 12
    }
  },
  {
    "path": "src/main/java/commands/FreeTimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor which initializes a new free time command with date and duration time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param specificDate the time would like to know is there free time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param time         the length of the desired duration."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException exception related to time parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FreeTimeCommand(String specificDate, int time) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d simpleDateFormat.parse(specificDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        duration \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * computes a new date which is \"n\" hours after the \"start\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param start input date (old date)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param n the number of hours passed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return a new date which is \"n\" hours after the \"start\"."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Date addNHours(Date start, int n) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        calendar.setTime(start);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        calendar.add(Calendar.HOUR, n);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chentong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method execute the free-time command. Implements priority queue to store the start time and the end time of."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * the events which happens after the given date (the time we need to get free time). Then, if the start."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * time of one existing events is after the end time of the current desired duration, the system will show the."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * desired duration as the available time slot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks   task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui      user interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage read or write the local file which stores the task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException  any duke exception."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException any duke exception."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cDate\u003e startTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cDate\u003e endTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (t instanceof Events) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                Date eventStartDate \u003d simpleDateFormat.parse(((Events) t).getStartAt());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                Date eventEndDate \u003d simpleDateFormat.parse(((Events) t).getEndAt());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!startTime.isEmpty() \u0026\u0026 eventStartDate.before(startTime.get(startTime.size() - 1))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    int position \u003d startTime.size() - 2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (; position \u003e\u003d 0; position--) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (eventStartDate.after(startTime.get(position))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                            position++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    startTime.add(position, eventStartDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    endTime.add(position, eventEndDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    startTime.add(eventStartDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    endTime.add(eventEndDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Date start \u003d date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Date end \u003d addNHours(start, duration);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c startTime.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Date eventStart \u003d startTime.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Date eventEnd \u003d endTime.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            if (end.before(eventStart)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                if (start.before(eventEnd)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    start \u003d eventEnd;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    end \u003d addNHours(start, duration);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  The nearest time slot: \\n\" + \"    \" + simpleDateFormat.format(start) + \" ~ \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + simpleDateFormat.format(end) + \" is available\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chentong"
        },
        "content": "    } //execute"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chentong"
        },
        "content": "} //class"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 3,
      "chentong": 3,
      "cctt1014": 14,
      "-": 68,
      "therealnickcheong": 19
    }
  },
  {
    "path": "src/main/java/commands/RemindersCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class RemindersCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    protected Date nowDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor to initialize a Reminders command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param string The type of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public RemindersCommand(String string) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.keyword \u003d string;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.nowDate \u003d new Date();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date currDate \u003d nowDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] currDay \u003d simpleDateFormat.format(currDate).split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date startDay \u003d simpleDateFormat.parse(currDay[0] + \" 0000\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date endDay \u003d simpleDateFormat.parse(currDay[0] + \" 2359\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"upcoming\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\" Got it. Your Upcoming Reminders: \\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Boolean isAfter \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Deadline) t).getDateBy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isAfter \u003d dueDate.after(endDay);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Events) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Events) t).getStartDateAt();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isAfter \u003d dueDate.after(endDay);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof ToDos) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isAfter \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Periods) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Periods) t).getDateFrom();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isAfter \u003d dueDate.after(endDay);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof MultipleEvent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((MultipleEvent) t).getStartDateAt();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isAfter \u003d (dueDate.after(endDay) \u0026\u0026 ((MultipleEvent) t).getChosenStatus());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (isAfter \u0026\u0026 !t.getStatus()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    ui.appendToOutput(\" \" + counter++ + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"past\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\" Got it. Your Past Reminders: \\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Boolean isBefore \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Deadline) t).getDateBy();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isBefore \u003d dueDate.before(startDay);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Events) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Events) t).getEndDateAt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isBefore \u003d dueDate.before(startDay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Periods) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Periods) t).getDateTo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isBefore \u003d dueDate.before(startDay);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof MultipleEvent) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((MultipleEvent) t).getEndDateAt();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isBefore \u003d (dueDate.before(startDay) \u0026\u0026 ((MultipleEvent) t).getChosenStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (isBefore \u0026\u0026 !t.getStatus()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    ui.appendToOutput(\" \" + counter++ + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"today\": {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\" Got it. Today\u0027s Reminders: \\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Boolean isToday \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date dueDate \u003d ((Deadline) t).getDateBy();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isToday \u003d (!dueDate.before(startDay) \u0026\u0026 !dueDate.after(endDay));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Events) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date startDate \u003d ((Events) t).getStartDateAt();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date endDate \u003d ((Events) t).getEndDateAt();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    isToday \u003d (startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof Periods) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date startDate \u003d ((Periods) t).getDateFrom();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date endDate \u003d ((Periods) t).getDateTo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    isToday \u003d (startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else if (t instanceof MultipleEvent) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date startDate \u003d ((MultipleEvent) t).getStartDateAt();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date endDate \u003d ((MultipleEvent) t).getEndDateAt();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    isToday \u003d ((startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                            || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                            || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                            \u0026\u0026 ((MultipleEvent) t).getChosenStatus());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (isToday \u0026\u0026 !t.getStatus()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    ui.appendToOutput(\" \" + counter++ + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 12,
      "cctt1014": 6,
      "therealnickcheong": 109
    }
  },
  {
    "path": "src/main/java/commands/RescheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The class which can edit the type and the date of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param inputString the original command typed in by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public RescheduleCommand(String inputString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd \u003d inputString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * To show whether this command should be the last one."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return whether this command should be the last one."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Run this command. Delete the original task first then add the new one."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks the object controls the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage the object saves or reads the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException check if any exception is caught."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException check if any exception is caught."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String[] words \u003d cmd.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        final String deleteCommand \u003d \"delete \" + words[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int serialNo \u003d Integer.parseInt(words[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        words[0] \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        words[2] \u003d tasks.getTask(serialNo - 1).getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String newAddCommand \u003d words[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 2; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            newAddCommand \u003d newAddCommand + \" \" + words[i];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command delete \u003d Parser.parse(deleteCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        delete.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command add \u003d Parser.parse(newAddCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        add.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 42,
      "therealnickcheong": 18
    }
  },
  {
    "path": "src/main/java/commands/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The command aims to search the tasks with the keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor which initialize the search command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param string The keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public SearchCommand(String string) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        keyword \u003d string;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the search command. It list down all the tasks which contains."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * the given keyword."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 1;i \u003c\u003d tasks.lengthOfList();i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (tasks.getTask(i - 1).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                ui.appendToOutput(\" \" + count++ + \".\" + tasks.getTask(i - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 1,
      "cctt1014": 33,
      "therealnickcheong": 13
    }
  },
  {
    "path": "src/main/java/commands/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * The command aims to view the current checklist i.e. print out all the tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * A default constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ViewCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the list command. It list out all the tasks currently in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param tasks The task list object to interact with the checklist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui To print something needed in user interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage To re-save the data in local disk if necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.lengthOfList();i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\" \" + i + \".\" + tasks.getTask(i - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 27,
      "therealnickcheong": 13
    }
  },
  {
    "path": "src/main/java/commands/ViewScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ViewScheduleCommand(String string) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.inputString \u003d string;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] currDay \u003d inputString.split(\"/on \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date startDay \u003d simpleDateFormat.parse(currDay[currDay.length - 1] + \" 0000\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date endDay \u003d simpleDateFormat.parse(currDay[currDay.length - 1] + \" 2359\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        //ui.appendToOutput(startDay);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        //ui.appendToOutput(endDay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\" Got it. Your schedule for \" + currDay[currDay.length - 1] + \": \\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Task t : tasks.getCheckList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Boolean isToday \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date dueDate \u003d ((Deadline) t).getDateBy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                isToday \u003d (!dueDate.before(startDay) \u0026\u0026 !dueDate.after(endDay));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } else if (t instanceof Events) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date startDate \u003d ((Events) t).getStartDateAt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date endDate \u003d ((Events) t).getEndDateAt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                isToday \u003d (startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } else if (t instanceof Periods) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date startDate \u003d ((Periods) t).getDateFrom();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date endDate \u003d ((Periods) t).getDateTo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                isToday \u003d (startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } else if (t instanceof MultipleEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date startDate \u003d ((MultipleEvent) t).getStartDateAt();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Date endDate \u003d ((MultipleEvent) t).getEndDateAt();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                isToday \u003d ((startDate.after(startDay) \u0026\u0026 startDate.before(endDay))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        || (endDate.after(startDay) \u0026\u0026 endDate.before(endDay))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        || (startDay.after(startDate) \u0026\u0026 endDay.before(endDate))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        \u0026\u0026 ((MultipleEvent) t).getChosenStatus());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (isToday \u0026\u0026 !t.getStatus()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                ui.appendToOutput(\" \" + counter++ + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 7,
      "cctt1014": 4,
      "therealnickcheong": 57
    }
  },
  {
    "path": "src/main/java/controlpanel/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A self defined exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * A default constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor to throw the errors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param errorMsg The error message sent from the faulty object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 3,
      "cctt1014": 14,
      "therealnickcheong": 5
    }
  },
  {
    "path": "src/main/java/controlpanel/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ChooseEventTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.RemindersCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ViewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This class which takes in the user input from command line and identifies the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * correct command type. Calls the appropriate MoneyCommand from control panel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Parser() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * The constructor which runs the parser."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd the original input string (command)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return return a command object which is initialized based on its type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException if any exception is caught."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static Command parse(String cmd) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new ViewCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (cmd.equals(\"find\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a find cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String keyword \u003d cmd.split(\" \")[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new SearchCommand(keyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String temp \u003d cmd.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            int serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new DoneCommand(serialNo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String temp \u003d cmd.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            int serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new DeleteCommand(serialNo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"reminders\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String keyword \u003d cmd.split(\" \")[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            command \u003d new RemindersCommand(keyword);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"schedule\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            command  \u003d new ViewScheduleCommand(cmd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"reschedule\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new RescheduleCommand(cmd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.contains(\"choose\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            command \u003d new ChooseEventTime(cmd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"free-time\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String[] words \u003d cmd.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            int duration \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new FreeTimeCommand(words[4] + \" \" + words[5], duration);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String keyword \u003d cmd.split(\" \")[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (!(keyword.equals(\"deadline\") || keyword.equals(\"event\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    || keyword.equals(\"todo\") || keyword.equals(\"period\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    || keyword.equals(\"duration\") || keyword.equals(\"multiEvent\"))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            command \u003d new AddCommand(keyword, cmd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor which runs the parser to parse all commands"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param cmd Original input command from the user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param isNewUser Boolean to identify if the user if a new or returning user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return MoneyCommand to be called according to the user commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException If the user input is invalid"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static MoneyCommand moneyParse(String cmd, boolean isNewUser) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand moneyCommand \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(cmd.equals(\"start\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new startCommand(isNewUser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"init\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new initCommand(cmd, isNewUser);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if(cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if(isNewUser) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You are a new user please type: init [existing savings] [Avg Monthly Expenditure]\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"bank-account\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new CreateBankAccountCommand(cmd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.equals(\"list bank trackers\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new ListBankTrackerCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"goal-short\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddShortGoalCommand(cmd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list goals\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete goal\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String temp \u003d cmd.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            int serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteGoalCommand(serialNo);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"add income\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddIncomeCommand(cmd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"spent\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all income\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all expenditure\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalExpenditureCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete income\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteIncomeCommand(cmd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete expenditure\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return moneyCommand;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Takes user input of date for add commands and checks for shortcut dates."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If shortcut is found, converts to the correct date according to shortcut."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the formatted Date from user inputted date."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param dateStr user input of date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return formatted Date based on user inputted date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public static Date shortcutTime(String dateStr) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String time \u003d dateStr.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (time.equals(\"now\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date currDate \u003d new Date();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(currDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"ytd\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date ytdDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(ytdDate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"tmr\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date tmrDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(tmrDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"lstwk\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastWeekDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(lastWeekDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"nxtwk\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +7);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextWeekDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(nextWeekDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"lstmth\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastMonthDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(lastMonthDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"nxtmth\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, +1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextMonthDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(nextMonthDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"lstyr\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, -1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date lastYearDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(lastYearDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (time.equals(\"nxtyr\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, +1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            Date nextYearDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d simpleDateFormat.format(nextYearDate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(passDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return simpleDateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 7,
      "chengweixuan": 88,
      "cctt1014": 43,
      "therealnickcheong": 62
    }
  },
  {
    "path": "src/main/java/controlpanel/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Periods;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.FixedDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.MultipleEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        fileName \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method is used to read a txt file and store it in an Array List that contains all the tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return checkList the Array List that stores the tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FileReader fileReader \u003d new FileReader(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                line \u003d line.replace(\u0027|\u0027, \u0027@\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] info \u003d line.split(\" @ \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                if (!(info[0].equals(\"T\") || info[0].equals(\"D\") || info[0].equals(\"E\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        || info[0].equals(\"P\") || info[0].equals(\"F\") || info[0].equals(\"M\"))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"This is not a valid input from the file!!!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                Task t \u003d new Task(\"default\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (info[0]) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                case \"F\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    t \u003d new FixedDuration(info[2], info[3]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    t \u003d new ToDos(info[2]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date deadlineDate \u003d simpleDateFormat.parse(info[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    t \u003d new Deadline(info[2], deadlineDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date eventStartDate \u003d simpleDateFormat.parse(info[3]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Date eventEndDate \u003d simpleDateFormat.parse(info[4]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    t \u003d new Events(info[2], eventStartDate, eventEndDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                case \"P\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    Date periodStartDate \u003d simpleDateFormat.parse(info[3]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    Date periodEndDate \u003d simpleDateFormat.parse(info[4]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    t \u003d new Periods(info[2], info[3], info[4]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"M\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    String[] dateStr \u003d info[3].split(\" /or \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    ArrayList\u003cPair\u003cDate, Date\u003e\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    for (String choices : dateStr) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        //System.out.println(choices);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        String[] startendDate \u003d choices.split(\"to \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Date startDate \u003d simpleDateFormat.parse(startendDate[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Date endDate \u003d simpleDateFormat.parse(startendDate[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Pair\u003cDate, Date\u003e tempDate \u003d new Pair\u003c\u003e(startDate, endDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        dates.add(tempDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    t \u003d new MultipleEvent(info[2], dates, info[4]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                if (t.getDescription().equals(\"default\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"This task is not refreshed.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                checkList.add(t);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException | DukeException | ParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return checkList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method is to write the Array List that contains all the tasks into a txt file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param taskList The list to be push into the txt file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeTheFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter.write(\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                if (t instanceof  FixedDuration) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"F | 1 | \" + t.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"F | 0 | \" + t.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t instanceof ToDos) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"T | 1 | \" + t.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"T | 0 | \" + t.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t instanceof Events) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"E | 1 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Events) t).getStartAt() + \" | \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Events) t).getEndAt() + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"E | 0 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Events) t).getStartAt() + \" | \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                                + ((Events) t).getEndAt() + \"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"D | 1 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Deadline) t).getBy() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"D | 0 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Deadline) t).getBy() + \"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t instanceof Periods) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"P | 1 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Periods) t).getFrom() + \" | \" + ((Periods) t).getTo() + \"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"P | 0 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                + ((Periods) t).getFrom() + \" | \" + ((Periods) t).getTo() + \"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t instanceof MultipleEvent) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    String isChosen \u003d \"0\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    if (((MultipleEvent) t).getChosenStatus()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        isChosen \u003d \"1\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (t.getStatus()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                        String possibleDates \u003d \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                        for (Pair\u003cDate, Date\u003e date : ((MultipleEvent) t).getDates()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            possibleDates +\u003d simpleDateFormat.format(date.getKey()) + \" to \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                                    + simpleDateFormat.format(date.getValue()) + \" /or \";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"M | 1 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                                + possibleDates + \"| \" + isChosen + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                        String possibleDates \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                        for (Pair\u003cDate, Date\u003e date : ((MultipleEvent) t).getDates()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            possibleDates +\u003d simpleDateFormat.format(date.getKey())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                                    + \" to \" + simpleDateFormat.format(date.getValue()) + \" /or \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                        bufferedWriter.write(\"M | 0 | \" + t.getDescription() + \" | \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                                + possibleDates + \"| \" + isChosen + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 44,
      "chengweixuan": 12,
      "cctt1014": 9,
      "-": 92,
      "therealnickcheong": 22
    }
  },
  {
    "path": "src/main/java/controlpanel/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static String outputString \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        scanner \u003d new Scanner(System. in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The method to initialize and show welcome to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String greeting \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"Hello from\\n\" + logo + greeting);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean inputStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        System.out.println(\"This is not a valid input from the file!!!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"ERROR: \" + message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void appendToOutput(String msg) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString +\u003d msg;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void clearOutputString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 7,
      "cctt1014": 53,
      "therealnickcheong": 2
    }
  },
  {
    "path": "src/main/java/money/Account.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cIncome\u003e incomeListTotal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expListTotal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cIncome\u003e incomeListCurrMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expListCurrMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cGoal\u003e shortTermGoals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cInstallment\u003e installments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cBankTracker\u003e bankTrackerList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float totalSavings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float currMonthSavings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float baseSavings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float goalSavings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private boolean toInitialize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        incomeListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        expListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        incomeListCurrMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        expListCurrMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        shortTermGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        installments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        bankTrackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void initialize(float userSavings, float avgExp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date nowDate \u003d new Date();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income initialSavings;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (userSavings \u003e avgExp * 6) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.baseSavings \u003d avgExp * 6;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.goalSavings \u003d userSavings - baseSavings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"InitialSavings\", nowDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"InitialSavings\", nowDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.baseSavings \u003d totalSavings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.goalSavings \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cIncome\u003e getIncomeListTotal() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomeListTotal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cExpenditure\u003e getExpListTotal() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return expListTotal;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cIncome\u003e getIncomeListCurrMonth() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomeListCurrMonth;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cExpenditure\u003e getExpListCurrMonth() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return expListCurrMonth;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cGoal\u003e getShortTermGoals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return shortTermGoals;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ArrayList\u003cInstallment\u003e getInstallments() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return installments;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ArrayList\u003cBankTracker\u003e getBankTrackerList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return bankTrackerList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalIncome() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListTotal) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalExp() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : expListTotal) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthIncome() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListCurrMonth) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthExp() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : expListCurrMonth) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getTotalSavings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return totalSavings;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getCurrMonthSavings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        currMonthSavings \u003d getCurrMonthIncome() - getCurrMonthExp();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return currMonthSavings;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getBaseSavings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return baseSavings;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getGoalSavings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return goalSavings;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void updateSavings() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        currMonthSavings \u003d getCurrMonthIncome() - getCurrMonthExp();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isToInitialize() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return toInitialize;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void populateCurrentMonthLists() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Date currDate \u003d new Date();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Calendar dateNow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int currMonth \u003d currDate.getMonth(); // there\u0027s an issue here of depreciation"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int currYear \u003d currDate.getYear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : incomeListTotal) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (i.getPayday().getMonth() \u003d\u003d currMonth \u0026\u0026 i.getPayday().getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                incomeListCurrMonth.add(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure e : expListTotal) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (e.getDateBoughtTime().getMonth() \u003d\u003d currMonth \u0026\u0026 e.getDateBoughtTime().getYear() \u003d\u003d currYear) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                expListCurrMonth.add(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 62,
      "cctt1014": 3,
      "therealnickcheong": 90
    }
  },
  {
    "path": "src/main/java/money/BankTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class BankTracker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private int amt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Date latestDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public BankTracker(String accountDescription, int initialAmt, Date initialDate, double interestRate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d accountDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt \u003d initialAmt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        latestDate \u003d  initialDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        rate \u003d interestRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getBankAccountInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return \"  Name: \" + description + \"\\n  Balance: \" + amt + \"\\n  Initial Date: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + simpleDateFormat.format(latestDate) + \"\\n  Interest Rate: \" + rate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 26,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/money/Expenditure.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Expenditure extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Date boughtTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Expenditure Object to record expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Price of the item spent on"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info on the item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param category Category the item is grouped under"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param boughtTime Date which the item is bought"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Expenditure(float price, String description, String category, Date boughtTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.boughtTime \u003d boughtTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on: \" + getBoughtTime() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Date getDateBoughtTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return boughtTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getBoughtTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return simpleDateFormat.format(boughtTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 7,
      "therealnickcheong": 35
    }
  },
  {
    "path": "src/main/java/money/Goal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Goal extends Expenditure {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private enum Priority {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LOW,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        HIGH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Goal(float price, String description, String category, Date goalBy, String priorityLevel) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description, category, goalBy);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        switch (priorityLevel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"low\" : {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"medium\": {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"high\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[GS]\" + \" \" + super.getDescription() + \"(target: $\" + super.getPrice() + \") (to achieve by: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + getGoalBy() + \") \" + getPriority();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return priority.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getGoalBy() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String goalByDateTime \u003d super.getBoughtTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String goalByDate \u003d goalByDateTime.split(\" \")[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return goalByDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 52
    }
  },
  {
    "path": "src/main/java/money/Income.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Income extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Date payday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * The constructor for the Income Object to record income sources."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Money in from the income source"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info of the income source"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param payday Date which the income is received"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Income(float price, String description, Date payday) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.payday \u003d payday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Date getPayday() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return payday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"[I]\" + \" \" + super.getDescription() + \"(salary: $\" + super.getPrice() + \") (Paid On: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + getPaidTime() + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getPaidTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return simpleDateFormat.format(payday);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 8,
      "therealnickcheong": 27
    }
  },
  {
    "path": "src/main/java/money/Installment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Installment extends Expenditure {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Date endTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Installment(float price, String description, String category, Date boughtTime) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description, category, boughtTime);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setEndTime(Date endTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 16
    }
  },
  {
    "path": "src/main/java/money/Item.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float price;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Item(float price, String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float getPrice() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"$\" + price + \" \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 24
    }
  },
  {
    "path": "src/main/java/moneycommands/AddExpenditureCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add expenditure command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the expenditure data within the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddExpenditureCommand(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command.replaceFirst(\"spent \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add expenditure command. Takes the input from user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/cat \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] morSplit \u003d furSplit[1].split(\"/on\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d morSplit[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Date boughtTime \u003d Parser.shortcutTime(morSplit[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(price, description, category, boughtTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this to your total spending: \\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(account.getExpListTotal().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 21,
      "therealnickcheong": 42
    }
  },
  {
    "path": "src/main/java/moneycommands/AddIncomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an income source to the Total Income List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add income command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the income source data within the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddIncomeCommand(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command.replaceFirst(\"add income \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add income command. Takes the input data from user and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an income source to the Total Income List."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] furSplit \u003d splitStr[1].split(\"/payday \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float salary \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Date payDay \u003d Parser.shortcutTime(furSplit[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(salary, description, payDay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this income source: \\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getIncomeListTotal().get(account.getIncomeListTotal().size() - 1).toString()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income sources listed\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 22,
      "therealnickcheong": 38
    }
  },
  {
    "path": "src/main/java/moneycommands/AddShortGoalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This command adds a short-term goal to the Short-Term Goals List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddShortGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the add short-term goal command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the goal data within the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddShortGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add short-term goal command. Takes input from user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and adds a short-term goal to the Short-Term Goals List"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String desc \u003d inputString.split(\"/amt \")[0].replaceFirst(\"goal-short \", \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d Float.parseFloat(inputString.split(\"/amt \")[1].split(\"/by \")[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        //Date byDate \u003d simpleDateFormat.parse(inputString.split(\"/by \")[1].split(\"/priority \")[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Date byDate \u003d Parser.shortcutTime(inputString.split(\"/by \")[1].split(\"/priority \")[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String priorityLevel \u003d inputString.split(\"/priority \")[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d \"GS\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(priorityLevel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(price, desc, category,byDate, priorityLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"     \" + account.getShortTermGoals().get(account.getShortTermGoals().size() - 1).toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" Goals in the list.\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Current Goal Savings: $\" + account.getGoalSavings() + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 15,
      "therealnickcheong": 50
    }
  },
  {
    "path": "src/main/java/moneycommands/CreateBankAccountCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CreateBankAccountCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BankTracker newTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public CreateBankAccountCommand(String inputString) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String desc \u003d inputString.split(\" /amt \")[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String info \u003d inputString.split(\" /amt \")[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        desc \u003d desc.replaceFirst(\"bank-account \",\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String[] words \u003d info.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Date initialDate \u003d Parser.shortcutTime(words[2]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        newTracker \u003d new BankTracker(desc, Integer.parseInt(words[0]),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                initialDate, Double.parseDouble(words[4]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().add(newTracker);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"New bank account tracker has been added to the list: \\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(newTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 4,
      "cctt1014": 32,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteExpenditureCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an expenditure from the Total Expenditure List according to index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete expenditure command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteExpenditureCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete expenditure command. Takes the index of the item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Expenditure List and checks for the item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getExpListTotal().size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the expenditure is Out Of Bounds!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this expenditure:\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getExpListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getExpListTotal().size() - 1) + \" expenditures in the list.\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 17,
      "therealnickcheong": 36
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteGoalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes a short-term goal from the Short-Term Goal List according to index"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete short-term goal command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param index delete command inputted from user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteGoalCommand(int index){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete short-term goal command. Takes the index of the item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Short-Term Goals List and checks for the item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getShortTermGoals().size()){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        System.out.println(\" Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        System.out.println(\"  \" + account.getShortTermGoals().get(serialNo-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        System.out.println(\" Now you have \" + (account.getShortTermGoals().size()-1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getShortTermGoals().get(serialNo-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getShortTermGoals().size()-1) + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().remove(serialNo-1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //storage.writeTheFile(account.getShortTermGoals());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 17,
      "therealnickcheong": 35
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteIncomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an income source from the Total Income List according to index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete income command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteIncomeCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete income command. Takes the index of the item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Income List and checks for the item"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getIncomeListTotal().size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the income is Out Of Bounds!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this income source:\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getIncomeListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getIncomeListTotal().size() - 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" income sources in the list.\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 19,
      "therealnickcheong": 34
    }
  },
  {
    "path": "src/main/java/moneycommands/ExitMoneyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ExitMoneyCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ExitMoneyCommand(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"     Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 23
    }
  },
  {
    "path": "src/main/java/moneycommands/ListBankTrackerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ListBankTrackerCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ListBankTrackerCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cBankTracker\u003e accountList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"Here are the bank accounts and their info:\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c accountList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput((i+1) + \". ----------------------------------------\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(accountList.get(i).getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\"-------------------------------------------\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 27,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/ListGoalsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all short-term goals within the Short-Term Goal List to the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListGoalsCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListGoalsCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list goals command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all short-term goals in the Short-Term Goals List to the user according to index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d account.getShortTermGoals().size();i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            //System.out.println(\" \" + i + \".\" + account.getShortTermGoals().get(i-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\" \" + i + \".\" + account.getShortTermGoals().get(i-1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"current Goal Savings: $\" + account.getGoalSavings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"current Goal Savings: $\" + account.getGoalSavings() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 13,
      "therealnickcheong": 26
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalExpenditureCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all expenditures within the Total Expenditure List to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListTotalExpenditureCommand(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all expenditure command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all expenditures in the Total Expenditure List to the user according to index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Expenditure i : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            //System.out.println(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"Total income so far: $\" + account.getTotalExp());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Total expenditure so far: $\" + account.getTotalExp() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 13,
      "therealnickcheong": 30
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalIncomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all income sources within the Total Income List to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListTotalIncomeCommand(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all income command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all income sources in the Total Income List to the user according to index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            //System.out.println(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"Total income so far: $\" + account.getTotalIncome());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Total income so far: $\" + account.getTotalIncome() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 13,
      "therealnickcheong": 29
    }
  },
  {
    "path": "src/main/java/moneycommands/MoneyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public abstract class MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public MoneyCommand(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public abstract void execute(Account account, Ui ui, Storage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 18
    }
  },
  {
    "path": "src/main/java/moneycommands/ViewPastMonthIncome.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ViewPastMonthIncome extends MoneyCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ViewPastMonthIncome(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceFirst(\"check income \", \"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String[] splitStr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        month \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        year \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Month is invalid! Please pick a month from 1-12\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 32,
      "therealnickcheong": 2
    }
  },
  {
    "path": "src/main/java/moneycommands/initCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class initCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public initCommand(String cmd, boolean isNewUser) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(!isNewUser){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You\u0027re an existing user\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //String userSavings \u003d inputString.split(\" \")[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //String avgExp \u003d inputString.split(\" \")[2];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float userSavings \u003d Float.parseFloat(inputString.split(\" \")[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float avgExp \u003d Float.parseFloat(inputString.split(\" \")[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.initialize(userSavings,avgExp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Initialised, you\u0027re ready to use Financial Ghosts\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //ui.appendToOutput(avgExp + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 1,
      "therealnickcheong": 32
    }
  },
  {
    "path": "src/main/java/moneycommands/startCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class startCommand extends MoneyCommand{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public startCommand(boolean isNewUser){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if(isNewUser){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            message \u003d \"You are a new user please type: init [existing savings] [Avg Monthly Expenditure]\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            message \u003d \"You\u0027re ready to use Financial Ghosts\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"current Goal Savings: $\" + account.getGoalSavings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 29
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This is the Deadline Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * inherits from Task Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * Has constructor and methods for the Deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This constructor \"Deadline\" is used to construct the Deadline object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param description This is the first parameter to the Deadline constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param by This is the second parameter to the Deadline constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method \"toString\" is used to return the relevant attributes to be printed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return String This returns the relevant attributes to be printed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + getBy() + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method \"getBy\" is used to get the due date of the object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return String This returns the due date of the object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return simpleDateFormat.format(by);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method \"getDateBy\" is used to get the due date of the object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return Date This returns the due date of the object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Date getDateBy() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 65
    }
  },
  {
    "path": "src/main/java/tasks/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date startAt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date endAt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor to initialize a Events object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param start The start date of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param end The end date of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Events(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startAt \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endAt \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super.type \u003d \"E\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + getStartAt() + \" to \" + getEndAt() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getStartAt() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return simpleDateFormat.format(startAt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getEndAt() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return simpleDateFormat.format(endAt);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getStartDateAt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return startAt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getEndDateAt() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return endAt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 8,
      "-": 35,
      "therealnickcheong": 4
    }
  },
  {
    "path": "src/main/java/tasks/FixedDuration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    protected String needs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor initialise a FixedDuration Object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param description the description of the task within a fixed duration."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param needs the time required to complete a task within a fixed duration."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public FixedDuration(String description, String needs) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.needs \u003d needs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        super.type \u003d \"F\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return \"[F]\" + super.toString() + \"(needs: \" + getNeeds() + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getNeeds() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return needs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 26,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/tasks/MultipleEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class MultipleEvent extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ArrayList\u003cPair\u003cDate, Date\u003e\u003e dates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean beenChosen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor to initialize a MultipleEvent object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param description the description of the multiple event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param dates the list of start and end date of these events."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public MultipleEvent(String description, ArrayList\u003cPair\u003cDate, Date\u003e\u003e dates) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dates \u003d dates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.beenChosen \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super.type \u003d \"M\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public MultipleEvent(String description, ArrayList\u003cPair\u003cDate, Date\u003e\u003e dates, String chosenStatus) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.dates \u003d dates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //this.beenChosen \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super.type \u003d \"M\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (chosenStatus.equals(\"1\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.beenChosen \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.beenChosen \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String possibleDates \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Pair dates : dates) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            possibleDates +\u003d simpleDateFormat.format(dates.getKey()) + \" to \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + simpleDateFormat.format(dates.getValue()) + \" or \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        possibleDates \u003d possibleDates.substring(0, possibleDates.length() - 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" +  possibleDates + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair\u003cDate, Date\u003e getDate(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return dates.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cPair\u003cDate,Date\u003e\u003e getDates() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getChosenStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return beenChosen;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setChosenStatusTrue(){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.beenChosen \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void chooseDate(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Pair\u003cDate, Date\u003e temp \u003d  getDate(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        dates.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        dates.add(temp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        beenChosen \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Date getStartDateAt() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return dates.get(0).getKey();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Date getEndDateAt() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return dates.get(0).getValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 5,
      "-": 51,
      "therealnickcheong": 30
    }
  },
  {
    "path": "src/main/java/tasks/Periods.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Periods extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    protected String from;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    protected String to;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * The constructor to initialize a period object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param description the description of these task within a period."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param from the start date of the task within a period."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param to the end date of the task within a period."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Periods(String description, String from, String to) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super.type \u003d \"P\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[P]\" + super.toString() + \"(from: \" + from + \" to \" + to + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getFrom() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getTo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateFrom() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return simpleDateFormat.parse(from);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTo() throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return simpleDateFormat.parse(to);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 16,
      "-": 28,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void chooseDate(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "       // System.out.println(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 3,
      "cctt1014": 3,
      "-": 34,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArrayList\u003cTask\u003e checkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    //constructors"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e initialList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        checkList \u003d initialList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        checkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return checkList.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ArrayList\u003cTask\u003e getCheckList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return checkList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkList.add(t);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkList.remove(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int lengthOfList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return checkList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void markDoneATask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        checkList.get(index).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 4,
      "cctt1014": 6,
      "-": 29,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/tasks/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDos(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        super.type \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 1,
      "-": 13,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1e9\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 3,
      "therealnickcheong": 13
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hmax\u003d\"10.0\" hvalue\u003d\"10.0\" pannable\u003d\"true\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vmax\u003d\"10.0\" vvalue\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 3,
      "therealnickcheong": 16
    }
  },
  {
    "path": "src/test/java/DetectAnomaliesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private SimpleDateFormat simpleDateFormat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public DetectAnomaliesTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void testInvalidDuration() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addEvent \u003d new AddCommand(\"event\", \"project meeting /at 1/1/2000 0000 to 1/1/1999 0000\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addEvent.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void testScheduleClashes() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Events e \u003d new Events(\"important thing\", simpleDateFormat.parse(\"1/1/2008 1900\"), simpleDateFormat.parse(\"1/1/2008 2100\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks.addTask(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent1 \u003d new AddCommand(\"event\", \"party /at 1/1/2008 1910 to 1/1/2008 2110\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent1.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent2 \u003d new AddCommand(\"event\", \"study session /at 1/1/2008 1830 to 1/1/2008 2030\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent2.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent3 \u003d new AddCommand(\"event\", \"duke meeting /at 1/1/2008 1850 to 1/1/2008 2105\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent3.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Command addClashingEvent4 \u003d new AddCommand(\"event\", \"phone my mom /at 1/1/2008 1500 to 1/1/2008 1945\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e addClashingEvent4.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        tasks.removeTask(tasks.lengthOfList() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 62
    }
  },
  {
    "path": "src/test/java/FreeTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class FreeTimeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public FreeTimeTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage \u003d new Storage(\"D:/main/data/tasks-test.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testIsExit() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command freeTimeCmd \u003d new FreeTimeCommand(\"2/2/2019 1400\", 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertFalse(freeTimeCmd.isExit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testFindFreeTime() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command freeTimeCmd \u003d new FreeTimeCommand(\"1/1/2020 0000\", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        freeTimeCmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertEquals(\"  The nearest time slot: \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                \"    1/1/2020 0000 ~ 1/1/2020 0200 is available\\n\",ui.getOutputString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 42
    }
  },
  {
    "path": "src/test/java/RemindTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.RemindersCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersUpcoming()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdUpcoming \u003d  new RemindersCommand(\"upcoming\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdUpcoming.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your Upcoming Reminders: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 1.[D][\\u2718] Duke Documentation (by: 30/9/2019 2359)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 2.[T][\\u2718] some stuff\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" 3.[P][\\u2718] hackathon (from: 29/9/2019 1400 to 19/10/2019 1800)\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersPast()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdPast \u003d  new RemindersCommand(\"past\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdPast.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your Past Reminders: \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[E][\\u2718] code jam (at: 6/6/2011 1100 to 7/7/2011 1400)\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 2.[D][\\u2718] IPPT  (by: 16/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testRemindersToday()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Command RemCmdToday \u003d  new RemindersCommand(\"today\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        RemCmdToday.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Today\u0027s Reminders: \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[P][\\u2718] H2 math revision (from: 12/9/2019 1400 to 30/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testViewSchedule()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Command viewSchedule \u003d  new ViewScheduleCommand(\"schedule /on 14/09/2019\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        viewSchedule.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"hello\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. Your schedule for 14/09/2019: \\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 1.[P][\\u2718] H2 math revision (from: 12/9/2019 1400 to 30/9/2019 1800)\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 8,
      "cctt1014": 3,
      "-": 62,
      "therealnickcheong": 33
    }
  },
  {
    "path": "src/test/java/RescheduleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class RescheduleTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public RescheduleTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage \u003d new Storage(\"D:/main/data/tasks.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command rescheduleCmd \u003d new"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                RescheduleCommand(\"reschedule event 1 /at 6/6/2011 1100 to 7/7/2011 1400\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertFalse(rescheduleCmd.isExit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void testRescheduleOutput() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Command rescheduleCmd \u003d new"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                RescheduleCommand(\"reschedule deadline 4 /by 16/9/2019 1800\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        rescheduleCmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \"  \" + tasks.getCheckList().get(4-1).toString() + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \" Now you have 7 tasks in the list.\\n\" + \" Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \"     \" + tasks.getCheckList().get(8-1).toString() + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + \" Now you have 8 tasks in the list.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                , ui.getOutputString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 47
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Task test \u003d new Task(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, test.getStatus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Task test \u003d new Task(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[\\u2718]\", test.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[\\u2713]\", test.getStatusIcon());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testType() throws ParseException{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strStartDate \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strEndDate \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"T\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new ToDos(description).getType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"D\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Deadline(description, startDate).getType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"E\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Events(description, startDate, endDate).getType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"P\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(description, strStartDate, strEndDate).getType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"F\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(description, needs).getType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testGetByAtFromToNeeds()throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String from \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String to \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(\"do assignments\", startDate).getBy());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"6/2/2019 1300\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new Events(\"marquee\", startDate,endDate).getEndAt());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new Events(\"marquee\", startDate,endDate).getStartAt());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"3/2/2019 1300\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(\"zouk\", from,to).getFrom());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"6/2/2019 1300\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(\"zouk\", from, to).getTo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"2 hours\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(\"zoukout\", needs).getNeeds());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testToString() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String description \u003d \"Get lit tonight\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        SimpleDateFormat simpleDateFormat  \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date startDate \u003d simpleDateFormat.parse(\"3/2/2019 1300\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Date endDate \u003d simpleDateFormat.parse(\"6/2/2019 1300\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strStartDate \u003d simpleDateFormat.format(startDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String strEndDate \u003d simpleDateFormat.format(endDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String needs \u003d \"2 hours\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[T][\\u2718] Get lit tonight\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new ToDos(description).toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[D][\\u2718] Get lit tonight(by: \" + strStartDate + \")\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Deadline(description, startDate).toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[E][\\u2718] Get lit tonight(at: \" + strStartDate + \" to \" + strEndDate + \")\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Events(description, startDate, endDate).toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[P][\\u2718] Get lit tonight(from: \" + strStartDate + \" to \" + strEndDate + \")\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new Periods(description, strStartDate, strEndDate).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[F][\\u2718] Get lit tonight(needs: 2 hours)\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                new FixedDuration(description, needs).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 66,
      "cctt1014": 4,
      "-": 39,
      "therealnickcheong": 5
    }
  },
  {
    "path": "src/test/java/TentativeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public TentativeTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/tasks-test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testMultiEventCreation() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addMultiEvent \u003d new AddCommand(\"multiEvent\", \"multiEvent event name /at 1/12/2009 2232 to 1/12/2009 2234 /or 2/12/2009 2232 to 2/12/2009 2234\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addMultiEvent.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \"     [E][✘] event name (at: 1/12/2009 2232 to 1/12/2009 2234 or 2/12/2009 2232 to 2/12/2009 2234 )\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" Now you have \" + tasks.lengthOfList() + \" tasks in the list.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void chooseEventTime() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Command chooseTime \u003d new ChooseEventTime(\"choose \" + tasks.lengthOfList() + \" 1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        chooseTime.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\" Noted. The following timing has been chosen:\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                \" [E][✘] event name (at: 1/12/2009 2232 to 1/12/2009 2234 )\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Command clearChanges \u003d new DeleteCommand(tasks.lengthOfList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        clearChanges.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "chengweixuan": 9,
      "-": 42,
      "therealnickcheong": 5
    }
  }
]
